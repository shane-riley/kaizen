
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  0000027a  000002ee  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000027a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000002f0  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000320  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000060  00000000  00000000  00000360  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000088c  00000000  00000000  000003c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006e0  00000000  00000000  00000c4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000040c  00000000  00000000  0000132c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000b4  00000000  00000000  00001738  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003e5  00000000  00000000  000017ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000ba  00000000  00000000  00001bd1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000068  00000000  00000000  00001c8b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea e7       	ldi	r30, 0x7A	; 122
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 30       	cpi	r26, 0x02	; 2
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <main>
  8e:	0c 94 3b 01 	jmp	0x276	; 0x276 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <wait>:
// ============================================
// S U B R O U T I N E S
// ============================================


void wait(volatile int multiple) {
  96:	cf 93       	push	r28
  98:	df 93       	push	r29
  9a:	00 d0       	rcall	.+0      	; 0x9c <wait+0x6>
  9c:	cd b7       	in	r28, 0x3d	; 61
  9e:	de b7       	in	r29, 0x3e	; 62
  a0:	9a 83       	std	Y+2, r25	; 0x02
  a2:	89 83       	std	Y+1, r24	; 0x01
	// This subroutine creates a delay equal to multiple*T, where T is 1 msec
	// Assumes a 16MHz clock frequency ? FOR DIFFERENT CLOCK, CHANGE THE COUNT EXIT VALUE IN WHILE LOOP
	while (multiple > 0) {
  a4:	0d c0       	rjmp	.+26     	; 0xc0 <wait+0x2a>
		TCCR0A = 0x00; // clears WGM00 and WGM01 (bits 0 and 1) to ensure Timer/Counter is in normal mode.
  a6:	14 bc       	out	0x24, r1	; 36
		TCNT0 = 0; // preload value for testing on count = 250
  a8:	16 bc       	out	0x26, r1	; 38
		TCCR0B = 0b00000011; //1<<CS01 | 1<<CS00; TCCR0B = 0x03; //
  aa:	83 e0       	ldi	r24, 0x03	; 3
  ac:	85 bd       	out	0x25, r24	; 37
		// Start TIMER0, Normal mode, crystal clock, prescaler = 64
		while (TCNT0 < 0xFA); // exits when count = 250 (requires preload of 0 to make count = 250) CHANGE THIS VALUE FOR CLOCK OTHER THAN 16MHz
  ae:	86 b5       	in	r24, 0x26	; 38
  b0:	8a 3f       	cpi	r24, 0xFA	; 250
  b2:	e8 f3       	brcs	.-6      	; 0xae <wait+0x18>
		TCCR0B = 0x00; // Stop TIMER0
  b4:	15 bc       	out	0x25, r1	; 37
		multiple--;
  b6:	89 81       	ldd	r24, Y+1	; 0x01
  b8:	9a 81       	ldd	r25, Y+2	; 0x02
  ba:	01 97       	sbiw	r24, 0x01	; 1
  bc:	9a 83       	std	Y+2, r25	; 0x02
  be:	89 83       	std	Y+1, r24	; 0x01


void wait(volatile int multiple) {
	// This subroutine creates a delay equal to multiple*T, where T is 1 msec
	// Assumes a 16MHz clock frequency ? FOR DIFFERENT CLOCK, CHANGE THE COUNT EXIT VALUE IN WHILE LOOP
	while (multiple > 0) {
  c0:	89 81       	ldd	r24, Y+1	; 0x01
  c2:	9a 81       	ldd	r25, Y+2	; 0x02
  c4:	18 16       	cp	r1, r24
  c6:	19 06       	cpc	r1, r25
  c8:	74 f3       	brlt	.-36     	; 0xa6 <wait+0x10>
		// Start TIMER0, Normal mode, crystal clock, prescaler = 64
		while (TCNT0 < 0xFA); // exits when count = 250 (requires preload of 0 to make count = 250) CHANGE THIS VALUE FOR CLOCK OTHER THAN 16MHz
		TCCR0B = 0x00; // Stop TIMER0
		multiple--;
	}
} // end wait()
  ca:	0f 90       	pop	r0
  cc:	0f 90       	pop	r0
  ce:	df 91       	pop	r29
  d0:	cf 91       	pop	r28
  d2:	08 95       	ret

000000d4 <switch_pressed>:
		i = 1;
	}
}  // end wait_for_switch()

int switch_pressed() {
	return !(PINC & 0x01);
  d4:	96 b1       	in	r25, 0x06	; 6
  d6:	81 e0       	ldi	r24, 0x01	; 1
  d8:	89 27       	eor	r24, r25
}  // end switch_pressed()
  da:	81 70       	andi	r24, 0x01	; 1
  dc:	90 e0       	ldi	r25, 0x00	; 0
  de:	08 95       	ret

000000e0 <wait_for_switch>:
	}
} // end wait()

void wait_for_switch() {
	int i;
	while(!switch_pressed()) {
  e0:	0e 94 6a 00 	call	0xd4	; 0xd4 <switch_pressed>
  e4:	89 2b       	or	r24, r25
  e6:	e1 f3       	breq	.-8      	; 0xe0 <wait_for_switch>
		i = 1;
	}
}  // end wait_for_switch()
  e8:	08 95       	ret

000000ea <forward>:
int switch_pressed() {
	return !(PINC & 0x01);
}  // end switch_pressed()

void forward() {
	PORTB = 0x01;
  ea:	81 e0       	ldi	r24, 0x01	; 1
  ec:	85 b9       	out	0x05, r24	; 5
  ee:	08 95       	ret

000000f0 <backward>:
}  // end forward()

void backward() {
	PORTB = 0x02;
  f0:	82 e0       	ldi	r24, 0x02	; 2
  f2:	85 b9       	out	0x05, r24	; 5
  f4:	08 95       	ret

000000f6 <stop>:
}  // end backward()

void stop() {
	PORTB = 0x03;
  f6:	83 e0       	ldi	r24, 0x03	; 3
  f8:	85 b9       	out	0x05, r24	; 5
  fa:	08 95       	ret

000000fc <step_CCW>:
}  // end stop()

void step_CCW() {
	
	switch(phase_step) {
  fc:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 100:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 104:	82 30       	cpi	r24, 0x02	; 2
 106:	91 05       	cpc	r25, r1
 108:	99 f0       	breq	.+38     	; 0x130 <step_CCW+0x34>
 10a:	1c f4       	brge	.+6      	; 0x112 <step_CCW+0x16>
 10c:	01 97       	sbiw	r24, 0x01	; 1
 10e:	39 f0       	breq	.+14     	; 0x11e <step_CCW+0x22>
 110:	08 95       	ret
 112:	83 30       	cpi	r24, 0x03	; 3
 114:	91 05       	cpc	r25, r1
 116:	a9 f0       	breq	.+42     	; 0x142 <step_CCW+0x46>
 118:	04 97       	sbiw	r24, 0x04	; 4
 11a:	e1 f0       	breq	.+56     	; 0x154 <step_CCW+0x58>
 11c:	08 95       	ret
		case 1:
		PORTD = 0b00010000;
 11e:	80 e1       	ldi	r24, 0x10	; 16
 120:	8b b9       	out	0x0b, r24	; 11
		phase_step = 2;
 122:	82 e0       	ldi	r24, 0x02	; 2
 124:	90 e0       	ldi	r25, 0x00	; 0
 126:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 12a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		break;
 12e:	08 95       	ret
		
		case 2:
		PORTD = 0b01000000;
 130:	80 e4       	ldi	r24, 0x40	; 64
 132:	8b b9       	out	0x0b, r24	; 11
		phase_step = 3;
 134:	83 e0       	ldi	r24, 0x03	; 3
 136:	90 e0       	ldi	r25, 0x00	; 0
 138:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 13c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		break;
 140:	08 95       	ret
		
		case 3:
		PORTD = 0b00100000;
 142:	80 e2       	ldi	r24, 0x20	; 32
 144:	8b b9       	out	0x0b, r24	; 11
		phase_step = 4;
 146:	84 e0       	ldi	r24, 0x04	; 4
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 14e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		break;
 152:	08 95       	ret
		
		case 4:
		PORTD = 0b10000000;
 154:	80 e8       	ldi	r24, 0x80	; 128
 156:	8b b9       	out	0x0b, r24	; 11
		phase_step = 1;
 158:	81 e0       	ldi	r24, 0x01	; 1
 15a:	90 e0       	ldi	r25, 0x00	; 0
 15c:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 160:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 164:	08 95       	ret

00000166 <step_CW>:
	}
}  // end step_CCW()

void step_CW() {
	
	switch(phase_step) {
 166:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 16a:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 16e:	82 30       	cpi	r24, 0x02	; 2
 170:	91 05       	cpc	r25, r1
 172:	99 f0       	breq	.+38     	; 0x19a <step_CW+0x34>
 174:	1c f4       	brge	.+6      	; 0x17c <step_CW+0x16>
 176:	01 97       	sbiw	r24, 0x01	; 1
 178:	39 f0       	breq	.+14     	; 0x188 <step_CW+0x22>
 17a:	08 95       	ret
 17c:	83 30       	cpi	r24, 0x03	; 3
 17e:	91 05       	cpc	r25, r1
 180:	a9 f0       	breq	.+42     	; 0x1ac <step_CW+0x46>
 182:	04 97       	sbiw	r24, 0x04	; 4
 184:	e1 f0       	breq	.+56     	; 0x1be <step_CW+0x58>
 186:	08 95       	ret
		case 1:
		PORTD = 0b00100000;
 188:	80 e2       	ldi	r24, 0x20	; 32
 18a:	8b b9       	out	0x0b, r24	; 11
		phase_step = 4;
 18c:	84 e0       	ldi	r24, 0x04	; 4
 18e:	90 e0       	ldi	r25, 0x00	; 0
 190:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 194:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		break;
 198:	08 95       	ret
		
		case 2:
		PORTD = 0b10000000;
 19a:	80 e8       	ldi	r24, 0x80	; 128
 19c:	8b b9       	out	0x0b, r24	; 11
		phase_step = 1;
 19e:	81 e0       	ldi	r24, 0x01	; 1
 1a0:	90 e0       	ldi	r25, 0x00	; 0
 1a2:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 1a6:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		break;
 1aa:	08 95       	ret
		
		case 3:
		PORTD = 0b00010000;
 1ac:	80 e1       	ldi	r24, 0x10	; 16
 1ae:	8b b9       	out	0x0b, r24	; 11
		phase_step = 2;
 1b0:	82 e0       	ldi	r24, 0x02	; 2
 1b2:	90 e0       	ldi	r25, 0x00	; 0
 1b4:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 1b8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		break;
 1bc:	08 95       	ret
		
		case 4:
		PORTD = 0b01000000;
 1be:	80 e4       	ldi	r24, 0x40	; 64
 1c0:	8b b9       	out	0x0b, r24	; 11
		phase_step = 3;
 1c2:	83 e0       	ldi	r24, 0x03	; 3
 1c4:	90 e0       	ldi	r25, 0x00	; 0
 1c6:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 1ca:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 1ce:	08 95       	ret

000001d0 <main>:
{
	
	// SETUP
	
	// B is output
	DDRB = 0xFF;
 1d0:	8f ef       	ldi	r24, 0xFF	; 255
 1d2:	84 b9       	out	0x04, r24	; 4
	
	// D is output
	DDRD = 0xFF;
 1d4:	8a b9       	out	0x0a, r24	; 10
	
	// C is input
	DDRC = 0x00;
 1d6:	17 b8       	out	0x07, r1	; 7
	
	// LEDs off
	PORTB = 0x03;
 1d8:	83 e0       	ldi	r24, 0x03	; 3
 1da:	85 b9       	out	0x05, r24	; 5
	
    /* Replace with your application code */
    while (1) 
    {
		// Wait for the press
		stop();
 1dc:	0e 94 7b 00 	call	0xf6	; 0xf6 <stop>
		wait_for_switch();
 1e0:	0e 94 70 00 	call	0xe0	; 0xe0 <wait_for_switch>
		// Init state and loop through actions
		for (int state = 0; state < 6 * STEPS_PER_QUARTER + 1; state++) {
 1e4:	00 e0       	ldi	r16, 0x00	; 0
 1e6:	10 e0       	ldi	r17, 0x00	; 0
 1e8:	41 c0       	rjmp	.+130    	; 0x26c <main+0x9c>
			
			
			if (state < 2 * STEPS_PER_QUARTER) {
 1ea:	08 31       	cpi	r16, 0x18	; 24
 1ec:	11 05       	cpc	r17, r1
 1ee:	4c f4       	brge	.+18     	; 0x202 <main+0x32>
				// 180deg clockwise in five seconds
				forward();
 1f0:	0e 94 75 00 	call	0xea	; 0xea <forward>
				step_CCW();
 1f4:	0e 94 7e 00 	call	0xfc	; 0xfc <step_CCW>
				wait(5000 / (2 * STEPS_PER_QUARTER));
 1f8:	80 ed       	ldi	r24, 0xD0	; 208
 1fa:	90 e0       	ldi	r25, 0x00	; 0
 1fc:	0e 94 4b 00 	call	0x96	; 0x96 <wait>
 200:	12 c0       	rjmp	.+36     	; 0x226 <main+0x56>
			} else if (state == 2 * STEPS_PER_QUARTER) {
 202:	08 31       	cpi	r16, 0x18	; 24
 204:	11 05       	cpc	r17, r1
 206:	39 f4       	brne	.+14     	; 0x216 <main+0x46>
				// Wait
				stop();
 208:	0e 94 7b 00 	call	0xf6	; 0xf6 <stop>
				wait(1000);
 20c:	88 ee       	ldi	r24, 0xE8	; 232
 20e:	93 e0       	ldi	r25, 0x03	; 3
 210:	0e 94 4b 00 	call	0x96	; 0x96 <wait>
 214:	08 c0       	rjmp	.+16     	; 0x226 <main+0x56>
			} else {
				// 360 counter clockwise in five seconds
				backward();
 216:	0e 94 78 00 	call	0xf0	; 0xf0 <backward>
				step_CW();
 21a:	0e 94 b3 00 	call	0x166	; 0x166 <step_CW>
				wait(5000 / (4 * STEPS_PER_QUARTER));
 21e:	88 e6       	ldi	r24, 0x68	; 104
 220:	90 e0       	ldi	r25, 0x00	; 0
 222:	0e 94 4b 00 	call	0x96	; 0x96 <wait>
			}
			
			// Extra check
			if (switch_pressed()) {
 226:	0e 94 6a 00 	call	0xd4	; 0xd4 <switch_pressed>
 22a:	89 2b       	or	r24, r25
 22c:	c1 f4       	brne	.+48     	; 0x25e <main+0x8e>
 22e:	1c c0       	rjmp	.+56     	; 0x268 <main+0x98>
				// Move +45 degrees, -90 degrees, +45 degrees, in three seconds total
				for (int int_state = 0; int_state < 2 * STEPS_PER_QUARTER; int_state++) {
					if (int_state < STEPS_PER_QUARTER / 2 || int_state >= 3 * STEPS_PER_QUARTER / 2) {
 230:	ce 01       	movw	r24, r28
 232:	06 97       	sbiw	r24, 0x06	; 6
 234:	0c 97       	sbiw	r24, 0x0c	; 12
 236:	48 f0       	brcs	.+18     	; 0x24a <main+0x7a>
						forward();
 238:	0e 94 75 00 	call	0xea	; 0xea <forward>
						step_CCW();
 23c:	0e 94 7e 00 	call	0xfc	; 0xfc <step_CCW>
						wait(3000 / (2 * STEPS_PER_QUARTER));
 240:	8d e7       	ldi	r24, 0x7D	; 125
 242:	90 e0       	ldi	r25, 0x00	; 0
 244:	0e 94 4b 00 	call	0x96	; 0x96 <wait>
 248:	08 c0       	rjmp	.+16     	; 0x25a <main+0x8a>
					} else {
						backward();
 24a:	0e 94 78 00 	call	0xf0	; 0xf0 <backward>
						step_CW();
 24e:	0e 94 b3 00 	call	0x166	; 0x166 <step_CW>
						wait(3000 / (2 * STEPS_PER_QUARTER));
 252:	8d e7       	ldi	r24, 0x7D	; 125
 254:	90 e0       	ldi	r25, 0x00	; 0
 256:	0e 94 4b 00 	call	0x96	; 0x96 <wait>
			}
			
			// Extra check
			if (switch_pressed()) {
				// Move +45 degrees, -90 degrees, +45 degrees, in three seconds total
				for (int int_state = 0; int_state < 2 * STEPS_PER_QUARTER; int_state++) {
 25a:	21 96       	adiw	r28, 0x01	; 1
 25c:	02 c0       	rjmp	.+4      	; 0x262 <main+0x92>
 25e:	c0 e0       	ldi	r28, 0x00	; 0
 260:	d0 e0       	ldi	r29, 0x00	; 0
 262:	c8 31       	cpi	r28, 0x18	; 24
 264:	d1 05       	cpc	r29, r1
 266:	24 f3       	brlt	.-56     	; 0x230 <main+0x60>
    {
		// Wait for the press
		stop();
		wait_for_switch();
		// Init state and loop through actions
		for (int state = 0; state < 6 * STEPS_PER_QUARTER + 1; state++) {
 268:	0f 5f       	subi	r16, 0xFF	; 255
 26a:	1f 4f       	sbci	r17, 0xFF	; 255
 26c:	09 34       	cpi	r16, 0x49	; 73
 26e:	11 05       	cpc	r17, r1
 270:	0c f4       	brge	.+2      	; 0x274 <main+0xa4>
 272:	bb cf       	rjmp	.-138    	; 0x1ea <main+0x1a>
 274:	b3 cf       	rjmp	.-154    	; 0x1dc <main+0xc>

00000276 <_exit>:
 276:	f8 94       	cli

00000278 <__stop_program>:
 278:	ff cf       	rjmp	.-2      	; 0x278 <__stop_program>
