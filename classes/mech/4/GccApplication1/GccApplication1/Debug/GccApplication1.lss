
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000160  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001b4  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001e4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  00000224  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000738  00000000  00000000  0000025c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006ab  00000000  00000000  00000994  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002b1  00000000  00000000  0000103f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000064  00000000  00000000  000012f0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003a5  00000000  00000000  00001354  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000101  00000000  00000000  000016f9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  000017fa  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 7d 00 	call	0xfa	; 0xfa <main>
  78:	0c 94 ae 00 	jmp	0x15c	; 0x15c <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <wait>:

// ============================================
// S U B R O U T I N E S
// ============================================

void wait(volatile int multiple) {
  80:	cf 93       	push	r28
  82:	df 93       	push	r29
  84:	00 d0       	rcall	.+0      	; 0x86 <wait+0x6>
  86:	cd b7       	in	r28, 0x3d	; 61
  88:	de b7       	in	r29, 0x3e	; 62
  8a:	9a 83       	std	Y+2, r25	; 0x02
  8c:	89 83       	std	Y+1, r24	; 0x01
	// This subroutine creates a delay equal to multiple*T, where T is 1 msec
	// Assumes a 16MHz clock frequency – FOR DIFFERENT CLOCK, CHANGE THE COUNT EXIT VALUE IN WHILE LOOP
	while (multiple > 0) {
  8e:	0d c0       	rjmp	.+26     	; 0xaa <wait+0x2a>
		TCCR0A = 0x00; // clears WGM00 and WGM01 (bits 0 and 1) to ensure Timer/Counter is in normal mode.
  90:	14 bc       	out	0x24, r1	; 36
		TCNT0 = 0; // preload value for testing on count = 250
  92:	16 bc       	out	0x26, r1	; 38
		TCCR0B = 0b00000011; //1<<CS01 | 1<<CS00; TCCR0B = 0x03; //
  94:	83 e0       	ldi	r24, 0x03	; 3
  96:	85 bd       	out	0x25, r24	; 37
		// Start TIMER0, Normal mode, crystal clock, prescaler = 64
		while (TCNT0 < 0xFA); // exits when count = 250 (requires preload of 0 to make count = 250) CHANGE THIS VALUE FOR CLOCK OTHER THAN 16MHz
  98:	86 b5       	in	r24, 0x26	; 38
  9a:	8a 3f       	cpi	r24, 0xFA	; 250
  9c:	e8 f3       	brcs	.-6      	; 0x98 <wait+0x18>
		TCCR0B = 0x00; // Stop TIMER0
  9e:	15 bc       	out	0x25, r1	; 37
		multiple--;
  a0:	89 81       	ldd	r24, Y+1	; 0x01
  a2:	9a 81       	ldd	r25, Y+2	; 0x02
  a4:	01 97       	sbiw	r24, 0x01	; 1
  a6:	9a 83       	std	Y+2, r25	; 0x02
  a8:	89 83       	std	Y+1, r24	; 0x01
// ============================================

void wait(volatile int multiple) {
	// This subroutine creates a delay equal to multiple*T, where T is 1 msec
	// Assumes a 16MHz clock frequency – FOR DIFFERENT CLOCK, CHANGE THE COUNT EXIT VALUE IN WHILE LOOP
	while (multiple > 0) {
  aa:	89 81       	ldd	r24, Y+1	; 0x01
  ac:	9a 81       	ldd	r25, Y+2	; 0x02
  ae:	18 16       	cp	r1, r24
  b0:	19 06       	cpc	r1, r25
  b2:	74 f3       	brlt	.-36     	; 0x90 <wait+0x10>
		// Start TIMER0, Normal mode, crystal clock, prescaler = 64
		while (TCNT0 < 0xFA); // exits when count = 250 (requires preload of 0 to make count = 250) CHANGE THIS VALUE FOR CLOCK OTHER THAN 16MHz
		TCCR0B = 0x00; // Stop TIMER0
		multiple--;
	}
} // end wait()
  b4:	0f 90       	pop	r0
  b6:	0f 90       	pop	r0
  b8:	df 91       	pop	r29
  ba:	cf 91       	pop	r28
  bc:	08 95       	ret

000000be <read_voltage>:

int read_voltage() {
	
	// Set starting bit
	ADCSRA = ADCSRA | 0b01000000;
  be:	ea e7       	ldi	r30, 0x7A	; 122
  c0:	f0 e0       	ldi	r31, 0x00	; 0
  c2:	80 81       	ld	r24, Z
  c4:	80 64       	ori	r24, 0x40	; 64
  c6:	80 83       	st	Z, r24
	
	// Wait for completion
	while ((0b00010000 & ADCSRA) == 0);
  c8:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
  cc:	84 ff       	sbrs	r24, 4
  ce:	fc cf       	rjmp	.-8      	; 0xc8 <read_voltage+0xa>

	// Left-justify in register
	return (ADCH);
  d0:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
	
} // end read_voltage()
  d4:	90 e0       	ldi	r25, 0x00	; 0
  d6:	08 95       	ret

000000d8 <set_which_led>:

void set_which_led(int led) {
	
	if (led >= 0) {
  d8:	99 23       	and	r25, r25
  da:	64 f0       	brlt	.+24     	; 0xf4 <set_which_led+0x1c>
		PORTB = ~(1 << led);
  dc:	21 e0       	ldi	r18, 0x01	; 1
  de:	30 e0       	ldi	r19, 0x00	; 0
  e0:	a9 01       	movw	r20, r18
  e2:	02 c0       	rjmp	.+4      	; 0xe8 <set_which_led+0x10>
  e4:	44 0f       	add	r20, r20
  e6:	55 1f       	adc	r21, r21
  e8:	8a 95       	dec	r24
  ea:	e2 f7       	brpl	.-8      	; 0xe4 <set_which_led+0xc>
  ec:	ca 01       	movw	r24, r20
  ee:	80 95       	com	r24
  f0:	85 b9       	out	0x05, r24	; 5
  f2:	08 95       	ret
	} else {
		PORTB = 0xFF;
  f4:	8f ef       	ldi	r24, 0xFF	; 255
  f6:	85 b9       	out	0x05, r24	; 5
  f8:	08 95       	ret

000000fa <main>:

// main 
int main(void)
{
	// SETUP
	DDRB = 0xFF;  // Set all PORTB pins as output
  fa:	8f ef       	ldi	r24, 0xFF	; 255
  fc:	84 b9       	out	0x04, r24	; 4
	PORTB = 0xFF; // Turn off PORTB pins
  fe:	85 b9       	out	0x05, r24	; 5
	
	DDRC = 0;     // Set PORTC as input
 100:	17 b8       	out	0x07, r1	; 7
	
	// SET UP ANALOG READ
	ADMUX = 0b01100000;  // PC0, LEFT JUSTIFY, USE VREF
 102:	80 e6       	ldi	r24, 0x60	; 96
 104:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
	PRR = 0x00;  // POWER ON ADC
 108:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <__TEXT_REGION_LENGTH__+0x7f8064>
	ADCSRA = 0b10000111;  // TURN ON ND PRESCALER
 10c:	87 e8       	ldi	r24, 0x87	; 135
 10e:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
	
	unsigned int voltage;
	int bin;
	
	wait(50);
 112:	82 e3       	ldi	r24, 0x32	; 50
 114:	90 e0       	ldi	r25, 0x00	; 0
 116:	0e 94 40 00 	call	0x80	; 0x80 <wait>
    // MAINLOOP
	while(1)
    {
		voltage = read_voltage();
 11a:	0e 94 5f 00 	call	0xbe	; 0xbe <read_voltage>
		bin = (voltage / 51);
 11e:	9c 01       	movw	r18, r24
 120:	a1 ea       	ldi	r26, 0xA1	; 161
 122:	b0 ea       	ldi	r27, 0xA0	; 160
 124:	0e 94 9f 00 	call	0x13e	; 0x13e <__umulhisi3>
		set_which_led(bin);
 128:	96 95       	lsr	r25
 12a:	87 95       	ror	r24
 12c:	92 95       	swap	r25
 12e:	82 95       	swap	r24
 130:	8f 70       	andi	r24, 0x0F	; 15
 132:	89 27       	eor	r24, r25
 134:	9f 70       	andi	r25, 0x0F	; 15
 136:	89 27       	eor	r24, r25
 138:	0e 94 6c 00 	call	0xd8	; 0xd8 <set_which_led>
 13c:	ee cf       	rjmp	.-36     	; 0x11a <main+0x20>

0000013e <__umulhisi3>:
 13e:	a2 9f       	mul	r26, r18
 140:	b0 01       	movw	r22, r0
 142:	b3 9f       	mul	r27, r19
 144:	c0 01       	movw	r24, r0
 146:	a3 9f       	mul	r26, r19
 148:	70 0d       	add	r23, r0
 14a:	81 1d       	adc	r24, r1
 14c:	11 24       	eor	r1, r1
 14e:	91 1d       	adc	r25, r1
 150:	b2 9f       	mul	r27, r18
 152:	70 0d       	add	r23, r0
 154:	81 1d       	adc	r24, r1
 156:	11 24       	eor	r1, r1
 158:	91 1d       	adc	r25, r1
 15a:	08 95       	ret

0000015c <_exit>:
 15c:	f8 94       	cli

0000015e <__stop_program>:
 15e:	ff cf       	rjmp	.-2      	; 0x15e <__stop_program>
