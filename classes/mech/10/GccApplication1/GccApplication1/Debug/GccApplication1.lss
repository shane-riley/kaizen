
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000212  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001be  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000212  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000244  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  00000284  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000085d  00000000  00000000  000002c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006a5  00000000  00000000  00000b21  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000301  00000000  00000000  000011c6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000007c  00000000  00000000  000014c8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003ca  00000000  00000000  00001544  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000d7  00000000  00000000  0000190e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  000019e5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 96 00 	call	0x12c	; 0x12c <main>
  78:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <wait>:
    }
}


// wait function
void wait(volatile int multiple) {
  80:	cf 93       	push	r28
  82:	df 93       	push	r29
  84:	00 d0       	rcall	.+0      	; 0x86 <wait+0x6>
  86:	cd b7       	in	r28, 0x3d	; 61
  88:	de b7       	in	r29, 0x3e	; 62
  8a:	9a 83       	std	Y+2, r25	; 0x02
  8c:	89 83       	std	Y+1, r24	; 0x01
	// This subroutine creates a delay equal to multiple*T, where T is 1 msec
	// Assumes a 16MHz clock frequency ? FOR DIFFERENT CLOCK, CHANGE THE COUNT EXIT VALUE IN WHILE LOOP
	while (multiple > 0) {
  8e:	0d c0       	rjmp	.+26     	; 0xaa <wait+0x2a>
		TCCR0A = 0x00; // clears WGM00 and WGM01 (bits 0 and 1) to ensure Timer/Counter is in normal mode.
  90:	14 bc       	out	0x24, r1	; 36
		TCNT0 = 0; // preload value for testing on count = 250
  92:	16 bc       	out	0x26, r1	; 38
		TCCR0B = 0b00000011; //1<<CS01 | 1<<CS00; TCCR0B = 0x03; //
  94:	83 e0       	ldi	r24, 0x03	; 3
  96:	85 bd       	out	0x25, r24	; 37
		// Start TIMER0, Normal mode, crystal clock, prescaler = 64
		while (TCNT0 < 0xFA); // exits when count = 250 (requires preload of 0 to make count = 250) CHANGE THIS VALUE FOR CLOCK OTHER THAN 16MHz
  98:	86 b5       	in	r24, 0x26	; 38
  9a:	8a 3f       	cpi	r24, 0xFA	; 250
  9c:	e8 f3       	brcs	.-6      	; 0x98 <wait+0x18>
		TCCR0B = 0x00; // Stop TIMER0
  9e:	15 bc       	out	0x25, r1	; 37
		multiple--;
  a0:	89 81       	ldd	r24, Y+1	; 0x01
  a2:	9a 81       	ldd	r25, Y+2	; 0x02
  a4:	01 97       	sbiw	r24, 0x01	; 1
  a6:	9a 83       	std	Y+2, r25	; 0x02
  a8:	89 83       	std	Y+1, r24	; 0x01

// wait function
void wait(volatile int multiple) {
	// This subroutine creates a delay equal to multiple*T, where T is 1 msec
	// Assumes a 16MHz clock frequency ? FOR DIFFERENT CLOCK, CHANGE THE COUNT EXIT VALUE IN WHILE LOOP
	while (multiple > 0) {
  aa:	89 81       	ldd	r24, Y+1	; 0x01
  ac:	9a 81       	ldd	r25, Y+2	; 0x02
  ae:	18 16       	cp	r1, r24
  b0:	19 06       	cpc	r1, r25
  b2:	74 f3       	brlt	.-36     	; 0x90 <wait+0x10>
		// Start TIMER0, Normal mode, crystal clock, prescaler = 64
		while (TCNT0 < 0xFA); // exits when count = 250 (requires preload of 0 to make count = 250) CHANGE THIS VALUE FOR CLOCK OTHER THAN 16MHz
		TCCR0B = 0x00; // Stop TIMER0
		multiple--;
	}
} // end wait()
  b4:	0f 90       	pop	r0
  b6:	0f 90       	pop	r0
  b8:	df 91       	pop	r29
  ba:	cf 91       	pop	r28
  bc:	08 95       	ret

000000be <send_to_max>:
} // end setup_max()

// send to max
void send_to_max(unsigned char command, unsigned char data) {
	// Clear SS bit
	PORTB &= 0b11111011;
  be:	95 b1       	in	r25, 0x05	; 5
  c0:	9b 7f       	andi	r25, 0xFB	; 251
  c2:	95 b9       	out	0x05, r25	; 5
	
	// Send cmd and wait
	SPDR = command;
  c4:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1<<SPIF)));
  c6:	0d b4       	in	r0, 0x2d	; 45
  c8:	07 fe       	sbrs	r0, 7
  ca:	fd cf       	rjmp	.-6      	; 0xc6 <send_to_max+0x8>
	
	// Send data and wait
	SPDR = data;
  cc:	6e bd       	out	0x2e, r22	; 46
	while(!(SPSR & (1<<SPIF)));
  ce:	0d b4       	in	r0, 0x2d	; 45
  d0:	07 fe       	sbrs	r0, 7
  d2:	fd cf       	rjmp	.-6      	; 0xce <send_to_max+0x10>
	
	// Set SS bit
	PORTB |= 0b00000100;
  d4:	85 b1       	in	r24, 0x05	; 5
  d6:	84 60       	ori	r24, 0x04	; 4
  d8:	85 b9       	out	0x05, r24	; 5
  da:	08 95       	ret

000000dc <setup_max>:

// Setup max
void setup_max() {
	
	// SS, SCK, MOSI as output
	DDRB |= (1<<2) | (1<<3) | (1<<5);
  dc:	84 b1       	in	r24, 0x04	; 4
  de:	8c 62       	ori	r24, 0x2C	; 44
  e0:	84 b9       	out	0x04, r24	; 4
	
	// Setup SPCR
	// Main mode 0, SCK = Fosc / 16, lead with MSB
	SPCR = 0b01010001;
  e2:	81 e5       	ldi	r24, 0x51	; 81
  e4:	8c bd       	out	0x2c, r24	; 44
	
	// Send packet to ensure
	// numeric decoding for digits 0 and 1
	send_to_max(MAX_CMD_DECODING_ON, 0xFF);
  e6:	6f ef       	ldi	r22, 0xFF	; 255
  e8:	89 e0       	ldi	r24, 0x09	; 9
  ea:	0e 94 5f 00 	call	0xbe	; 0xbe <send_to_max>
	
	// Set scan limit to 2
	send_to_max(MAX_CMD_SCAN_LIMIT_2, MAX_DAT_SCAN_LIMIT_2);
  ee:	62 e0       	ldi	r22, 0x02	; 2
  f0:	8b e0       	ldi	r24, 0x0B	; 11
  f2:	0e 94 5f 00 	call	0xbe	; 0xbe <send_to_max>
	
	send_to_max(0xF, 0);
  f6:	60 e0       	ldi	r22, 0x00	; 0
  f8:	8f e0       	ldi	r24, 0x0F	; 15
  fa:	0e 94 5f 00 	call	0xbe	; 0xbe <send_to_max>
  fe:	08 95       	ret

00000100 <write_digits>:
	// Set SS bit
	PORTB |= 0b00000100;
} // end send_to_max()

// Write two digits
void write_digits(int digits) {
 100:	cf 93       	push	r28
	
	// Unpack digits
	int digit_0 = digits % 10;
 102:	2a e0       	ldi	r18, 0x0A	; 10
 104:	30 e0       	ldi	r19, 0x00	; 0
 106:	b9 01       	movw	r22, r18
 108:	0e 94 b5 00 	call	0x16a	; 0x16a <__divmodhi4>
 10c:	48 2f       	mov	r20, r24
	int digit_1 = (digits / 10) % 10;
 10e:	cb 01       	movw	r24, r22
 110:	b9 01       	movw	r22, r18
 112:	0e 94 b5 00 	call	0x16a	; 0x16a <__divmodhi4>
 116:	c8 2f       	mov	r28, r24
	
	send_to_max(MAX_CMD_DIG0, digit_0);
 118:	64 2f       	mov	r22, r20
 11a:	81 e0       	ldi	r24, 0x01	; 1
 11c:	0e 94 5f 00 	call	0xbe	; 0xbe <send_to_max>
	send_to_max(MAX_CMD_DIG1, digit_1);
 120:	6c 2f       	mov	r22, r28
 122:	82 e0       	ldi	r24, 0x02	; 2
 124:	0e 94 5f 00 	call	0xbe	; 0xbe <send_to_max>
	
} // end write_digits()
 128:	cf 91       	pop	r28
 12a:	08 95       	ret

0000012c <main>:

int main(void)
{
	
	// Set up
	setup_max();
 12c:	0e 94 6e 00 	call	0xdc	; 0xdc <setup_max>
	
    /* Replace with your application code */
    while (1) 
    {
		// Push month
		write_digits(MONTH);
 130:	84 e0       	ldi	r24, 0x04	; 4
 132:	90 e0       	ldi	r25, 0x00	; 0
 134:	0e 94 80 00 	call	0x100	; 0x100 <write_digits>
		
		// Turn on
		send_to_max(MAX_CMD_POWER, MAX_DAT_TURN_ON);
 138:	61 e0       	ldi	r22, 0x01	; 1
 13a:	8c e0       	ldi	r24, 0x0C	; 12
 13c:	0e 94 5f 00 	call	0xbe	; 0xbe <send_to_max>
		
		// Wait
		wait(500);
 140:	84 ef       	ldi	r24, 0xF4	; 244
 142:	91 e0       	ldi	r25, 0x01	; 1
 144:	0e 94 40 00 	call	0x80	; 0x80 <wait>
		
		// Push day
		write_digits(DAY);
 148:	86 e0       	ldi	r24, 0x06	; 6
 14a:	90 e0       	ldi	r25, 0x00	; 0
 14c:	0e 94 80 00 	call	0x100	; 0x100 <write_digits>
		
		// Wait
		wait(500);
 150:	84 ef       	ldi	r24, 0xF4	; 244
 152:	91 e0       	ldi	r25, 0x01	; 1
 154:	0e 94 40 00 	call	0x80	; 0x80 <wait>
		
		// Turn off
		send_to_max(MAX_CMD_POWER, MAX_DAT_TURN_OFF);
 158:	60 e0       	ldi	r22, 0x00	; 0
 15a:	8c e0       	ldi	r24, 0x0C	; 12
 15c:	0e 94 5f 00 	call	0xbe	; 0xbe <send_to_max>
		
		// Wait
		wait(2000);
 160:	80 ed       	ldi	r24, 0xD0	; 208
 162:	97 e0       	ldi	r25, 0x07	; 7
 164:	0e 94 40 00 	call	0x80	; 0x80 <wait>
 168:	e3 cf       	rjmp	.-58     	; 0x130 <main+0x4>

0000016a <__divmodhi4>:
 16a:	97 fb       	bst	r25, 7
 16c:	07 2e       	mov	r0, r23
 16e:	16 f4       	brtc	.+4      	; 0x174 <__divmodhi4+0xa>
 170:	00 94       	com	r0
 172:	07 d0       	rcall	.+14     	; 0x182 <__divmodhi4_neg1>
 174:	77 fd       	sbrc	r23, 7
 176:	09 d0       	rcall	.+18     	; 0x18a <__divmodhi4_neg2>
 178:	0e 94 c9 00 	call	0x192	; 0x192 <__udivmodhi4>
 17c:	07 fc       	sbrc	r0, 7
 17e:	05 d0       	rcall	.+10     	; 0x18a <__divmodhi4_neg2>
 180:	3e f4       	brtc	.+14     	; 0x190 <__divmodhi4_exit>

00000182 <__divmodhi4_neg1>:
 182:	90 95       	com	r25
 184:	81 95       	neg	r24
 186:	9f 4f       	sbci	r25, 0xFF	; 255
 188:	08 95       	ret

0000018a <__divmodhi4_neg2>:
 18a:	70 95       	com	r23
 18c:	61 95       	neg	r22
 18e:	7f 4f       	sbci	r23, 0xFF	; 255

00000190 <__divmodhi4_exit>:
 190:	08 95       	ret

00000192 <__udivmodhi4>:
 192:	aa 1b       	sub	r26, r26
 194:	bb 1b       	sub	r27, r27
 196:	51 e1       	ldi	r21, 0x11	; 17
 198:	07 c0       	rjmp	.+14     	; 0x1a8 <__udivmodhi4_ep>

0000019a <__udivmodhi4_loop>:
 19a:	aa 1f       	adc	r26, r26
 19c:	bb 1f       	adc	r27, r27
 19e:	a6 17       	cp	r26, r22
 1a0:	b7 07       	cpc	r27, r23
 1a2:	10 f0       	brcs	.+4      	; 0x1a8 <__udivmodhi4_ep>
 1a4:	a6 1b       	sub	r26, r22
 1a6:	b7 0b       	sbc	r27, r23

000001a8 <__udivmodhi4_ep>:
 1a8:	88 1f       	adc	r24, r24
 1aa:	99 1f       	adc	r25, r25
 1ac:	5a 95       	dec	r21
 1ae:	a9 f7       	brne	.-22     	; 0x19a <__udivmodhi4_loop>
 1b0:	80 95       	com	r24
 1b2:	90 95       	com	r25
 1b4:	bc 01       	movw	r22, r24
 1b6:	cd 01       	movw	r24, r26
 1b8:	08 95       	ret

000001ba <_exit>:
 1ba:	f8 94       	cli

000001bc <__stop_program>:
 1bc:	ff cf       	rjmp	.-2      	; 0x1bc <__stop_program>
