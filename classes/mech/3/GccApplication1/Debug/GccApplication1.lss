
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000328  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002d4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000328  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000358  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  00000398  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000008d3  00000000  00000000  000003e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006c1  00000000  00000000  00000cb3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000039d  00000000  00000000  00001374  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000014c  00000000  00000000  00001714  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000445  00000000  00000000  00001860  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000004c4  00000000  00000000  00001ca5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  00002169  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 c6 00 	jmp	0x18c	; 0x18c <__vector_1>
   8:	0c 94 14 01 	jmp	0x228	; 0x228 <__vector_2>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 70 00 	call	0xe0	; 0xe0 <main>
  78:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <_Z4waiti>:

// ============================================
// S U B R O U T I N E S
// ============================================

void wait(volatile int multiple) {
  80:	cf 93       	push	r28
  82:	df 93       	push	r29
  84:	00 d0       	rcall	.+0      	; 0x86 <_Z4waiti+0x6>
  86:	cd b7       	in	r28, 0x3d	; 61
  88:	de b7       	in	r29, 0x3e	; 62
  8a:	9a 83       	std	Y+2, r25	; 0x02
  8c:	89 83       	std	Y+1, r24	; 0x01
	// This subroutine creates a delay equal to multiple*T, where T is 1 msec
	// Assumes a 16MHz clock frequency – FOR DIFFERENT CLOCK, CHANGE THE COUNT EXIT VALUE IN WHILE LOOP
	while (multiple > 0) {
  8e:	89 81       	ldd	r24, Y+1	; 0x01
  90:	9a 81       	ldd	r25, Y+2	; 0x02
  92:	18 16       	cp	r1, r24
  94:	19 06       	cpc	r1, r25
  96:	74 f4       	brge	.+28     	; 0xb4 <_Z4waiti+0x34>
		TCCR0A = 0x00; // clears WGM00 and WGM01 (bits 0 and 1) to ensure Timer/Counter is in normal mode.
  98:	14 bc       	out	0x24, r1	; 36
		TCNT0 = 0; // preload value for testing on count = 250
  9a:	16 bc       	out	0x26, r1	; 38
		TCCR0B = 0b00000011; //1<<CS01 | 1<<CS00; TCCR0B = 0x03; //
  9c:	83 e0       	ldi	r24, 0x03	; 3
  9e:	85 bd       	out	0x25, r24	; 37
		// Start TIMER0, Normal mode, crystal clock, prescaler = 64
		while (TCNT0 < 0xFA); // exits when count = 250 (requires preload of 0 to make count = 250) CHANGE THIS VALUE FOR CLOCK OTHER THAN 16MHz
  a0:	86 b5       	in	r24, 0x26	; 38
  a2:	8a 3f       	cpi	r24, 0xFA	; 250
  a4:	e8 f3       	brcs	.-6      	; 0xa0 <_Z4waiti+0x20>
		TCCR0B = 0x00; // Stop TIMER0
  a6:	15 bc       	out	0x25, r1	; 37
		multiple--;
  a8:	89 81       	ldd	r24, Y+1	; 0x01
  aa:	9a 81       	ldd	r25, Y+2	; 0x02
  ac:	01 97       	sbiw	r24, 0x01	; 1
  ae:	9a 83       	std	Y+2, r25	; 0x02
  b0:	89 83       	std	Y+1, r24	; 0x01
// ============================================

void wait(volatile int multiple) {
	// This subroutine creates a delay equal to multiple*T, where T is 1 msec
	// Assumes a 16MHz clock frequency – FOR DIFFERENT CLOCK, CHANGE THE COUNT EXIT VALUE IN WHILE LOOP
	while (multiple > 0) {
  b2:	ed cf       	rjmp	.-38     	; 0x8e <_Z4waiti+0xe>
		// Start TIMER0, Normal mode, crystal clock, prescaler = 64
		while (TCNT0 < 0xFA); // exits when count = 250 (requires preload of 0 to make count = 250) CHANGE THIS VALUE FOR CLOCK OTHER THAN 16MHz
		TCCR0B = 0x00; // Stop TIMER0
		multiple--;
	}
} // end wait()
  b4:	0f 90       	pop	r0
  b6:	0f 90       	pop	r0
  b8:	df 91       	pop	r29
  ba:	cf 91       	pop	r28
  bc:	08 95       	ret

000000be <_Z13set_which_ledi>:

void set_which_led(int led) {
	
	if (led >= 0) {
  be:	99 23       	and	r25, r25
  c0:	64 f0       	brlt	.+24     	; 0xda <_Z13set_which_ledi+0x1c>
		PORTC = ~(1 << led);
  c2:	21 e0       	ldi	r18, 0x01	; 1
  c4:	30 e0       	ldi	r19, 0x00	; 0
  c6:	a9 01       	movw	r20, r18
  c8:	02 c0       	rjmp	.+4      	; 0xce <_Z13set_which_ledi+0x10>
  ca:	44 0f       	add	r20, r20
  cc:	55 1f       	adc	r21, r21
  ce:	8a 95       	dec	r24
  d0:	e2 f7       	brpl	.-8      	; 0xca <_Z13set_which_ledi+0xc>
  d2:	ca 01       	movw	r24, r20
  d4:	80 95       	com	r24
  d6:	88 b9       	out	0x08, r24	; 8
  d8:	08 95       	ret
	} else {
		PORTC = 0xFF;
  da:	8f ef       	ldi	r24, 0xFF	; 255
  dc:	88 b9       	out	0x08, r24	; 8
  de:	08 95       	ret

000000e0 <main>:

// main 
int main(void)
{
	// SETUP
	DDRC = 0xFF;  // Set all PORTC pins as output
  e0:	8f ef       	ldi	r24, 0xFF	; 255
  e2:	87 b9       	out	0x07, r24	; 7
	PORTC = 0xFF; // Turn off PORTC pins
  e4:	88 b9       	out	0x08, r24	; 8
	DDRD = 0;     // Set PORTD as input
  e6:	1a b8       	out	0x0a, r1	; 10
	EICRA = 1 << ISC01 | 1 << ISC00 | 1 << ISC11 | 1 << ISC10;  // Trigger INT0 and INT1 on rising edge
  e8:	8f e0       	ldi	r24, 0x0F	; 15
  ea:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7f8069>
	EIMSK = 1 << INT1 | 1 << INT0;  // Enable INT1 and INT0
  ee:	83 e0       	ldi	r24, 0x03	; 3
  f0:	8d bb       	out	0x1d, r24	; 29
	sei();
  f2:	78 94       	sei
	
	// UNINTERRUPTED STATE
	int led = 0;
	int is_increasing = 1;
  f4:	01 e0       	ldi	r16, 0x01	; 1
  f6:	10 e0       	ldi	r17, 0x00	; 0
	EICRA = 1 << ISC01 | 1 << ISC00 | 1 << ISC11 | 1 << ISC10;  // Trigger INT0 and INT1 on rising edge
	EIMSK = 1 << INT1 | 1 << INT0;  // Enable INT1 and INT0
	sei();
	
	// UNINTERRUPTED STATE
	int led = 0;
  f8:	c0 e0       	ldi	r28, 0x00	; 0
  fa:	d0 e0       	ldi	r29, 0x00	; 0
	int is_increasing = 1;
		 
    // MAINLOOP
	while(1)
    {
		led += is_increasing ? 1 : -1;
  fc:	01 15       	cp	r16, r1
  fe:	11 05       	cpc	r17, r1
 100:	19 f0       	breq	.+6      	; 0x108 <main+0x28>
 102:	81 e0       	ldi	r24, 0x01	; 1
 104:	90 e0       	ldi	r25, 0x00	; 0
 106:	02 c0       	rjmp	.+4      	; 0x10c <main+0x2c>
 108:	8f ef       	ldi	r24, 0xFF	; 255
 10a:	9f ef       	ldi	r25, 0xFF	; 255
 10c:	c8 0f       	add	r28, r24
 10e:	d9 1f       	adc	r29, r25
		if (led == 0) is_increasing = 1;
 110:	20 97       	sbiw	r28, 0x00	; 0
 112:	11 f4       	brne	.+4      	; 0x118 <main+0x38>
 114:	01 e0       	ldi	r16, 0x01	; 1
 116:	10 e0       	ldi	r17, 0x00	; 0
		if (led == 3) is_increasing = 0;
 118:	c3 30       	cpi	r28, 0x03	; 3
 11a:	d1 05       	cpc	r29, r1
 11c:	11 f4       	brne	.+4      	; 0x122 <main+0x42>
 11e:	00 e0       	ldi	r16, 0x00	; 0
 120:	10 e0       	ldi	r17, 0x00	; 0
		set_which_led(led);
 122:	ce 01       	movw	r24, r28
 124:	0e 94 5f 00 	call	0xbe	; 0xbe <_Z13set_which_ledi>
		wait(1000);
 128:	88 ee       	ldi	r24, 0xE8	; 232
 12a:	93 e0       	ldi	r25, 0x03	; 3
 12c:	0e 94 40 00 	call	0x80	; 0x80 <_Z4waiti>
	// UNINTERRUPTED STATE
	int led = 0;
	int is_increasing = 1;
		 
    // MAINLOOP
	while(1)
 130:	e5 cf       	rjmp	.-54     	; 0xfc <main+0x1c>

00000132 <_Z14set_binary_ledi>:

void set_binary_led(int num) {
	
	// Calculate binary representation
	int binary = 0;
	int shift = 0;
 132:	40 e0       	ldi	r20, 0x00	; 0
 134:	50 e0       	ldi	r21, 0x00	; 0
} // end set_one_led()

void set_binary_led(int num) {
	
	// Calculate binary representation
	int binary = 0;
 136:	60 e0       	ldi	r22, 0x00	; 0
 138:	70 e0       	ldi	r23, 0x00	; 0
	int shift = 0;
	while (num > 0) {
 13a:	18 16       	cp	r1, r24
 13c:	19 06       	cpc	r1, r25
 13e:	1c f5       	brge	.+70     	; 0x186 <_Z14set_binary_ledi+0x54>
		if (num % 2 == 1) {
 140:	9c 01       	movw	r18, r24
 142:	21 70       	andi	r18, 0x01	; 1
 144:	30 78       	andi	r19, 0x80	; 128
 146:	33 23       	and	r19, r19
 148:	34 f4       	brge	.+12     	; 0x156 <_Z14set_binary_ledi+0x24>
 14a:	21 50       	subi	r18, 0x01	; 1
 14c:	31 09       	sbc	r19, r1
 14e:	2e 6f       	ori	r18, 0xFE	; 254
 150:	3f 6f       	ori	r19, 0xFF	; 255
 152:	2f 5f       	subi	r18, 0xFF	; 255
 154:	3f 4f       	sbci	r19, 0xFF	; 255
 156:	21 30       	cpi	r18, 0x01	; 1
 158:	31 05       	cpc	r19, r1
 15a:	51 f4       	brne	.+20     	; 0x170 <_Z14set_binary_ledi+0x3e>
			binary = binary | (1 << shift);
 15c:	21 e0       	ldi	r18, 0x01	; 1
 15e:	30 e0       	ldi	r19, 0x00	; 0
 160:	04 2e       	mov	r0, r20
 162:	02 c0       	rjmp	.+4      	; 0x168 <_Z14set_binary_ledi+0x36>
 164:	22 0f       	add	r18, r18
 166:	33 1f       	adc	r19, r19
 168:	0a 94       	dec	r0
 16a:	e2 f7       	brpl	.-8      	; 0x164 <_Z14set_binary_ledi+0x32>
 16c:	62 2b       	or	r22, r18
 16e:	73 2b       	or	r23, r19
		}
		shift++;
 170:	4f 5f       	subi	r20, 0xFF	; 255
 172:	5f 4f       	sbci	r21, 0xFF	; 255
		num /= 2;
 174:	9c 01       	movw	r18, r24
 176:	99 23       	and	r25, r25
 178:	14 f4       	brge	.+4      	; 0x17e <_Z14set_binary_ledi+0x4c>
 17a:	2f 5f       	subi	r18, 0xFF	; 255
 17c:	3f 4f       	sbci	r19, 0xFF	; 255
 17e:	c9 01       	movw	r24, r18
 180:	95 95       	asr	r25
 182:	87 95       	ror	r24
void set_binary_led(int num) {
	
	// Calculate binary representation
	int binary = 0;
	int shift = 0;
	while (num > 0) {
 184:	da cf       	rjmp	.-76     	; 0x13a <_Z14set_binary_ledi+0x8>
		shift++;
		num /= 2;
	}
	
	// Invert to get active low
	PORTC = ~binary;
 186:	60 95       	com	r22
 188:	68 b9       	out	0x08, r22	; 8
 18a:	08 95       	ret

0000018c <__vector_1>:
	
} // end set_binary_led

// INT0 Service routine
ISR(INT0_vect) {
 18c:	1f 92       	push	r1
 18e:	0f 92       	push	r0
 190:	0f b6       	in	r0, 0x3f	; 63
 192:	0f 92       	push	r0
 194:	11 24       	eor	r1, r1
 196:	ef 92       	push	r14
 198:	ff 92       	push	r15
 19a:	0f 93       	push	r16
 19c:	1f 93       	push	r17
 19e:	2f 93       	push	r18
 1a0:	3f 93       	push	r19
 1a2:	4f 93       	push	r20
 1a4:	5f 93       	push	r21
 1a6:	6f 93       	push	r22
 1a8:	7f 93       	push	r23
 1aa:	8f 93       	push	r24
 1ac:	9f 93       	push	r25
 1ae:	af 93       	push	r26
 1b0:	bf 93       	push	r27
 1b2:	cf 93       	push	r28
 1b4:	df 93       	push	r29
 1b6:	ef 93       	push	r30
 1b8:	ff 93       	push	r31
	
	// Save context for later
	int PORTC_d = PORTC;
 1ba:	e8 b0       	in	r14, 0x08	; 8
	int TCCR0A_d = TCCR0A;
 1bc:	f4 b4       	in	r15, 0x24	; 36
	int TCCR0B_d = TCCR0B;
 1be:	05 b5       	in	r16, 0x25	; 37
	int TCNT0_d = TCNT0;
 1c0:	16 b5       	in	r17, 0x26	; 38
	
	// Turn off led
	set_which_led(-1);
 1c2:	8f ef       	ldi	r24, 0xFF	; 255
 1c4:	9f ef       	ldi	r25, 0xFF	; 255
 1c6:	0e 94 5f 00 	call	0xbe	; 0xbe <_Z13set_which_ledi>
	
	// Wait two seconds
	wait(2000);
 1ca:	80 ed       	ldi	r24, 0xD0	; 208
 1cc:	97 e0       	ldi	r25, 0x07	; 7
 1ce:	0e 94 40 00 	call	0x80	; 0x80 <_Z4waiti>
	
	// Tick up in binary
	for (int i = 0; i < 16; i++) {
 1d2:	c0 e0       	ldi	r28, 0x00	; 0
 1d4:	d0 e0       	ldi	r29, 0x00	; 0
 1d6:	c0 31       	cpi	r28, 0x10	; 16
 1d8:	d1 05       	cpc	r29, r1
 1da:	4c f4       	brge	.+18     	; 0x1ee <__vector_1+0x62>
		set_binary_led(i);
 1dc:	ce 01       	movw	r24, r28
 1de:	0e 94 99 00 	call	0x132	; 0x132 <_Z14set_binary_ledi>
		wait(250);
 1e2:	8a ef       	ldi	r24, 0xFA	; 250
 1e4:	90 e0       	ldi	r25, 0x00	; 0
 1e6:	0e 94 40 00 	call	0x80	; 0x80 <_Z4waiti>
	
	// Wait two seconds
	wait(2000);
	
	// Tick up in binary
	for (int i = 0; i < 16; i++) {
 1ea:	21 96       	adiw	r28, 0x01	; 1
 1ec:	f4 cf       	rjmp	.-24     	; 0x1d6 <__vector_1+0x4a>
		set_binary_led(i);
		wait(250);
	}
	
	// Resume context from before interrupt signal
	PORTC = PORTC_d;
 1ee:	e8 b8       	out	0x08, r14	; 8
	TCCR0A = TCCR0A_d;
 1f0:	f4 bc       	out	0x24, r15	; 36
	TCCR0B = TCCR0B_d;
 1f2:	05 bd       	out	0x25, r16	; 37
	TCNT0 = TCNT0_d;
 1f4:	16 bd       	out	0x26, r17	; 38
	
	// Make sure INT0 not queued
	EIFR = 1;
 1f6:	81 e0       	ldi	r24, 0x01	; 1
 1f8:	8c bb       	out	0x1c, r24	; 28
}
 1fa:	ff 91       	pop	r31
 1fc:	ef 91       	pop	r30
 1fe:	df 91       	pop	r29
 200:	cf 91       	pop	r28
 202:	bf 91       	pop	r27
 204:	af 91       	pop	r26
 206:	9f 91       	pop	r25
 208:	8f 91       	pop	r24
 20a:	7f 91       	pop	r23
 20c:	6f 91       	pop	r22
 20e:	5f 91       	pop	r21
 210:	4f 91       	pop	r20
 212:	3f 91       	pop	r19
 214:	2f 91       	pop	r18
 216:	1f 91       	pop	r17
 218:	0f 91       	pop	r16
 21a:	ff 90       	pop	r15
 21c:	ef 90       	pop	r14
 21e:	0f 90       	pop	r0
 220:	0f be       	out	0x3f, r0	; 63
 222:	0f 90       	pop	r0
 224:	1f 90       	pop	r1
 226:	18 95       	reti

00000228 <__vector_2>:

// INT1 Service routine
ISR(INT1_vect) {
 228:	1f 92       	push	r1
 22a:	0f 92       	push	r0
 22c:	0f b6       	in	r0, 0x3f	; 63
 22e:	0f 92       	push	r0
 230:	11 24       	eor	r1, r1
 232:	ef 92       	push	r14
 234:	ff 92       	push	r15
 236:	0f 93       	push	r16
 238:	1f 93       	push	r17
 23a:	2f 93       	push	r18
 23c:	3f 93       	push	r19
 23e:	4f 93       	push	r20
 240:	5f 93       	push	r21
 242:	6f 93       	push	r22
 244:	7f 93       	push	r23
 246:	8f 93       	push	r24
 248:	9f 93       	push	r25
 24a:	af 93       	push	r26
 24c:	bf 93       	push	r27
 24e:	cf 93       	push	r28
 250:	df 93       	push	r29
 252:	ef 93       	push	r30
 254:	ff 93       	push	r31
	
	// Queuing INT1 allowed, not INT0
	
	// Save context for later
	int PORTC_d = PORTC;
 256:	e8 b0       	in	r14, 0x08	; 8
	int TCCR0A_d = TCCR0A;
 258:	f4 b4       	in	r15, 0x24	; 36
	int TCCR0B_d = TCCR0B;
 25a:	05 b5       	in	r16, 0x25	; 37
	int TCNT0_d = TCNT0;
 25c:	16 b5       	in	r17, 0x26	; 38
	
	// Turn on all leds
	PORTC = 0xF0;
 25e:	80 ef       	ldi	r24, 0xF0	; 240
 260:	88 b9       	out	0x08, r24	; 8
	
	// Wait two seconds
	wait(2000);
 262:	80 ed       	ldi	r24, 0xD0	; 208
 264:	97 e0       	ldi	r25, 0x07	; 7
 266:	0e 94 40 00 	call	0x80	; 0x80 <_Z4waiti>
	
	// Turn off in intervals
	for (int i = 0; i < 4; i++) {
 26a:	c0 e0       	ldi	r28, 0x00	; 0
 26c:	d0 e0       	ldi	r29, 0x00	; 0
 26e:	c4 30       	cpi	r28, 0x04	; 4
 270:	d1 05       	cpc	r29, r1
 272:	8c f4       	brge	.+34     	; 0x296 <__vector_2+0x6e>
		PORTC = PORTC | 1 << i;
 274:	28 b1       	in	r18, 0x08	; 8
 276:	81 e0       	ldi	r24, 0x01	; 1
 278:	90 e0       	ldi	r25, 0x00	; 0
 27a:	0c 2e       	mov	r0, r28
 27c:	02 c0       	rjmp	.+4      	; 0x282 <__vector_2+0x5a>
 27e:	88 0f       	add	r24, r24
 280:	99 1f       	adc	r25, r25
 282:	0a 94       	dec	r0
 284:	e2 f7       	brpl	.-8      	; 0x27e <__vector_2+0x56>
 286:	82 2b       	or	r24, r18
 288:	88 b9       	out	0x08, r24	; 8
		wait(500);
 28a:	84 ef       	ldi	r24, 0xF4	; 244
 28c:	91 e0       	ldi	r25, 0x01	; 1
 28e:	0e 94 40 00 	call	0x80	; 0x80 <_Z4waiti>
	
	// Wait two seconds
	wait(2000);
	
	// Turn off in intervals
	for (int i = 0; i < 4; i++) {
 292:	21 96       	adiw	r28, 0x01	; 1
 294:	ec cf       	rjmp	.-40     	; 0x26e <__vector_2+0x46>
		PORTC = PORTC | 1 << i;
		wait(500);
	}
	
	// Resume context from before interrupt signal
	PORTC = PORTC_d;
 296:	e8 b8       	out	0x08, r14	; 8
	TCCR0A = TCCR0A_d;
 298:	f4 bc       	out	0x24, r15	; 36
	TCCR0B = TCCR0B_d;
 29a:	05 bd       	out	0x25, r16	; 37
	TCNT0 = TCNT0_d;
 29c:	16 bd       	out	0x26, r17	; 38
	
	// Make sure INT0 not queued
	EIFR = 1;
 29e:	81 e0       	ldi	r24, 0x01	; 1
 2a0:	8c bb       	out	0x1c, r24	; 28
}
 2a2:	ff 91       	pop	r31
 2a4:	ef 91       	pop	r30
 2a6:	df 91       	pop	r29
 2a8:	cf 91       	pop	r28
 2aa:	bf 91       	pop	r27
 2ac:	af 91       	pop	r26
 2ae:	9f 91       	pop	r25
 2b0:	8f 91       	pop	r24
 2b2:	7f 91       	pop	r23
 2b4:	6f 91       	pop	r22
 2b6:	5f 91       	pop	r21
 2b8:	4f 91       	pop	r20
 2ba:	3f 91       	pop	r19
 2bc:	2f 91       	pop	r18
 2be:	1f 91       	pop	r17
 2c0:	0f 91       	pop	r16
 2c2:	ff 90       	pop	r15
 2c4:	ef 90       	pop	r14
 2c6:	0f 90       	pop	r0
 2c8:	0f be       	out	0x3f, r0	; 63
 2ca:	0f 90       	pop	r0
 2cc:	1f 90       	pop	r1
 2ce:	18 95       	reti

000002d0 <_exit>:
 2d0:	f8 94       	cli

000002d2 <__stop_program>:
 2d2:	ff cf       	rjmp	.-2      	; 0x2d2 <__stop_program>
