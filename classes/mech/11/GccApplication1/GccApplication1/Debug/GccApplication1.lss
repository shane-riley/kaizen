
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000006f2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000069e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000006f2  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000724  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000090  00000000  00000000  00000764  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a9c  00000000  00000000  000007f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000071e  00000000  00000000  00001290  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000050b  00000000  00000000  000019ae  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000130  00000000  00000000  00001ebc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000475  00000000  00000000  00001fec  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000353  00000000  00000000  00002461  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000080  00000000  00000000  000027b4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 6f 01 	call	0x2de	; 0x2de <main>
  78:	0c 94 4d 03 	jmp	0x69a	; 0x69a <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <wait>:
    }
}


// wait function
void wait(volatile int multiple) {
  80:	cf 93       	push	r28
  82:	df 93       	push	r29
  84:	00 d0       	rcall	.+0      	; 0x86 <wait+0x6>
  86:	cd b7       	in	r28, 0x3d	; 61
  88:	de b7       	in	r29, 0x3e	; 62
  8a:	9a 83       	std	Y+2, r25	; 0x02
  8c:	89 83       	std	Y+1, r24	; 0x01
	// This subroutine creates a delay equal to multiple*T, where T is 1 msec
	// Assumes a 16MHz clock frequency ? FOR DIFFERENT CLOCK, CHANGE THE COUNT EXIT VALUE IN WHILE LOOP
	while (multiple > 0) {
  8e:	0d c0       	rjmp	.+26     	; 0xaa <wait+0x2a>
		TCCR0A = 0x00; // clears WGM00 and WGM01 (bits 0 and 1) to ensure Timer/Counter is in normal mode.
  90:	14 bc       	out	0x24, r1	; 36
		TCNT0 = 0; // preload value for testing on count = 250
  92:	16 bc       	out	0x26, r1	; 38
		TCCR0B = 0b00000011; //1<<CS01 | 1<<CS00; TCCR0B = 0x03; //
  94:	83 e0       	ldi	r24, 0x03	; 3
  96:	85 bd       	out	0x25, r24	; 37
		// Start TIMER0, Normal mode, crystal clock, prescaler = 64
		while (TCNT0 < 0xFA); // exits when count = 250 (requires preload of 0 to make count = 250) CHANGE THIS VALUE FOR CLOCK OTHER THAN 16MHz
  98:	86 b5       	in	r24, 0x26	; 38
  9a:	8a 3f       	cpi	r24, 0xFA	; 250
  9c:	e8 f3       	brcs	.-6      	; 0x98 <wait+0x18>
		TCCR0B = 0x00; // Stop TIMER0
  9e:	15 bc       	out	0x25, r1	; 37
		multiple--;
  a0:	89 81       	ldd	r24, Y+1	; 0x01
  a2:	9a 81       	ldd	r25, Y+2	; 0x02
  a4:	01 97       	sbiw	r24, 0x01	; 1
  a6:	9a 83       	std	Y+2, r25	; 0x02
  a8:	89 83       	std	Y+1, r24	; 0x01

// wait function
void wait(volatile int multiple) {
	// This subroutine creates a delay equal to multiple*T, where T is 1 msec
	// Assumes a 16MHz clock frequency ? FOR DIFFERENT CLOCK, CHANGE THE COUNT EXIT VALUE IN WHILE LOOP
	while (multiple > 0) {
  aa:	89 81       	ldd	r24, Y+1	; 0x01
  ac:	9a 81       	ldd	r25, Y+2	; 0x02
  ae:	18 16       	cp	r1, r24
  b0:	19 06       	cpc	r1, r25
  b2:	74 f3       	brlt	.-36     	; 0x90 <wait+0x10>
		// Start TIMER0, Normal mode, crystal clock, prescaler = 64
		while (TCNT0 < 0xFA); // exits when count = 250 (requires preload of 0 to make count = 250) CHANGE THIS VALUE FOR CLOCK OTHER THAN 16MHz
		TCCR0B = 0x00; // Stop TIMER0
		multiple--;
	}
} // end wait()
  b4:	0f 90       	pop	r0
  b6:	0f 90       	pop	r0
  b8:	df 91       	pop	r29
  ba:	cf 91       	pop	r28
  bc:	08 95       	ret

000000be <send_to_max>:
} // end setup_max()

// send to max
void send_to_max(int command, int data) {
	// Clear SS bit
	PORTB &= 0b11111011;
  be:	95 b1       	in	r25, 0x05	; 5
  c0:	9b 7f       	andi	r25, 0xFB	; 251
  c2:	95 b9       	out	0x05, r25	; 5
	
	// Send cmd and wait
	SPDR = command;
  c4:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1<<SPIF)));
  c6:	0d b4       	in	r0, 0x2d	; 45
  c8:	07 fe       	sbrs	r0, 7
  ca:	fd cf       	rjmp	.-6      	; 0xc6 <send_to_max+0x8>
	
	// Send data and wait
	SPDR = data;
  cc:	6e bd       	out	0x2e, r22	; 46
	while(!(SPSR & (1<<SPIF)));
  ce:	0d b4       	in	r0, 0x2d	; 45
  d0:	07 fe       	sbrs	r0, 7
  d2:	fd cf       	rjmp	.-6      	; 0xce <send_to_max+0x10>
	
	// Set SS bit
	PORTB |= 0b00000100;
  d4:	85 b1       	in	r24, 0x05	; 5
  d6:	84 60       	ori	r24, 0x04	; 4
  d8:	85 b9       	out	0x05, r24	; 5
  da:	08 95       	ret

000000dc <setup_max>:

// Setup max
void setup_max() {
	
	// SS, SCK, MOSI as output
	DDRB |= (1<<2) | (1<<3) | (1<<5);
  dc:	84 b1       	in	r24, 0x04	; 4
  de:	8c 62       	ori	r24, 0x2C	; 44
  e0:	84 b9       	out	0x04, r24	; 4
	
	// Setup SPCR
	// Main mode 0, SCK = Fosc / 16, lead with MSB
	SPCR = 0b01010001;
  e2:	81 e5       	ldi	r24, 0x51	; 81
  e4:	8c bd       	out	0x2c, r24	; 44
	
	// Send packet to ensure
	// numeric decoding for digits 0 and 1
	send_to_max(MAX_CMD_DECODING_ON, MAX_DAT_DECODING_ON);
  e6:	63 e0       	ldi	r22, 0x03	; 3
  e8:	70 e0       	ldi	r23, 0x00	; 0
  ea:	89 e0       	ldi	r24, 0x09	; 9
  ec:	90 e0       	ldi	r25, 0x00	; 0
  ee:	0e 94 5f 00 	call	0xbe	; 0xbe <send_to_max>
	
	// Set scan limit to 2
	send_to_max(MAX_CMD_SCAN_LIMIT_2, MAX_DAT_SCAN_LIMIT_2);
  f2:	62 e0       	ldi	r22, 0x02	; 2
  f4:	70 e0       	ldi	r23, 0x00	; 0
  f6:	8b e0       	ldi	r24, 0x0B	; 11
  f8:	90 e0       	ldi	r25, 0x00	; 0
  fa:	0e 94 5f 00 	call	0xbe	; 0xbe <send_to_max>
  fe:	08 95       	ret

00000100 <write_digits>:
	// Set SS bit
	PORTB |= 0b00000100;
} // end send_to_max()

// Write two digits
void write_digits(int digits) {
 100:	cf 93       	push	r28
 102:	df 93       	push	r29
	
	// Unpack digits
	int digit_0 = digits % 10;
 104:	2a e0       	ldi	r18, 0x0A	; 10
 106:	30 e0       	ldi	r19, 0x00	; 0
 108:	b9 01       	movw	r22, r18
 10a:	0e 94 25 03 	call	0x64a	; 0x64a <__divmodhi4>
 10e:	fc 01       	movw	r30, r24
	int digit_1 = (digits / 10) % 10;
 110:	cb 01       	movw	r24, r22
 112:	b9 01       	movw	r22, r18
 114:	0e 94 25 03 	call	0x64a	; 0x64a <__divmodhi4>
 118:	ec 01       	movw	r28, r24
	
	send_to_max(MAX_CMD_DIG0, digit_0);
 11a:	bf 01       	movw	r22, r30
 11c:	81 e0       	ldi	r24, 0x01	; 1
 11e:	90 e0       	ldi	r25, 0x00	; 0
 120:	0e 94 5f 00 	call	0xbe	; 0xbe <send_to_max>
	send_to_max(MAX_CMD_DIG1, digit_1);
 124:	be 01       	movw	r22, r28
 126:	82 e0       	ldi	r24, 0x02	; 2
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	0e 94 5f 00 	call	0xbe	; 0xbe <send_to_max>
	
} // end write_digits()
 12e:	df 91       	pop	r29
 130:	cf 91       	pop	r28
 132:	08 95       	ret

00000134 <i2c_init>:
	
	return temperature;
}

void i2c_init(void) { // initialize i2c
	TWSR = 0b00000000; // prescaler is set to 1
 134:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
	TWBR = 72; // Put 72 into TWBR to define SCL frequency as 100kHz for 16MHz oscillator
 138:	88 e4       	ldi	r24, 0x48	; 72
 13a:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
	TWCR = 0b00000100; // TWEN = 1 (enable TWI)
 13e:	84 e0       	ldi	r24, 0x04	; 4
 140:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 144:	08 95       	ret

00000146 <i2c_start>:
}

void i2c_start(void) { // send start command
	//while (!(TWCR & (1<<TWINT))); //while (!(TWCR & 0b10000000));   // wait for idle condition -- TWINT bit must be high to proceed -- not needed if single main is used
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);  //TWCR | 0b10100100;       // initiate START condition -- write 1 to TWINT to clear it and initiate action, set TWSTA bit, set TWEN bit
 146:	84 ea       	ldi	r24, 0xA4	; 164
 148:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while (!(TWCR & (1<<TWINT))); //while (!(TWCR & 0b10000000));   // wait for action to finish (poll TWINT bit)
 14c:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 150:	88 23       	and	r24, r24
 152:	e4 f7       	brge	.-8      	; 0x14c <i2c_start+0x6>
	// if ((TWSR & 0xF8) != START) // error checking -- need to predefine START = 0x08 and ERROR() function.
	// ERROR();
}
 154:	08 95       	ret

00000156 <i2c_stop>:

void i2c_stop(void) { // send stop command
	while (!(TWCR & (1<<TWINT))); //while (!(TWCR & 0b10000000)) ;  // wait for action to finish (poll TWINT bit)
 156:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 15a:	88 23       	and	r24, r24
 15c:	e4 f7       	brge	.-8      	; 0x156 <i2c_stop>
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO); //TWCR = TWCR | 0b10010100;       // initiate STOP condition -- write 1 to TWINT to clear it and initiate action, set TWSTO bit and set TWEN bit
 15e:	84 e9       	ldi	r24, 0x94	; 148
 160:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 164:	08 95       	ret

00000166 <i2c_repeated_start>:
}

void i2c_repeated_start(void) {
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);  //TWCR | 0b10100100;       // initiate START condition -- write 1 to TWINT to clear it and initiate action, set TWSTA bit, set TWEN bit
 166:	84 ea       	ldi	r24, 0xA4	; 164
 168:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while (!(TWCR & (1<<TWINT))); //while (!(TWCR & 0b10000000));   // wait for action to finish (poll TWINT bit)
 16c:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 170:	88 23       	and	r24, r24
 172:	e4 f7       	brge	.-8      	; 0x16c <i2c_repeated_start+0x6>
	// if ((TWSR & 0xF8) != START) // error checking -- need to predefine START = 0x10 and ERROR() function.
	// ERROR();
}
 174:	08 95       	ret

00000176 <i2c_write_to_address>:

void i2c_write_to_address( unsigned char address) { //Write an address byte to the I2C2 bus in form of SLA_W (address to write to)
	unsigned char SLA_W = address<<1; // create SLA_W byte by shifting address and leaving R/W bit clear
 176:	88 0f       	add	r24, r24
	while (!(TWCR & (1<<TWINT))); //while (!(TWCR & 0b10000000)) ;  // wait for idle condition -- TWINT bit must be high to proceed
 178:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 17c:	99 23       	and	r25, r25
 17e:	e4 f7       	brge	.-8      	; 0x178 <i2c_write_to_address+0x2>
	TWDR = SLA_W;       // Load TWDR with address plus R/W bit
 180:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	TWCR = (1<<TWINT) | (1<<TWEN); //TWCR = TWCR | 0b10000100;       // initiate Write -- write 1 to TWINT to clear it and initiate action, and set TWEN
 184:	84 e8       	ldi	r24, 0x84	; 132
 186:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while (!(TWCR & (1<<TWINT))); //while (!(TWCR & 0b10000000)) ;  // wait for action to finish (poll TWINT bit)
 18a:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 18e:	88 23       	and	r24, r24
 190:	e4 f7       	brge	.-8      	; 0x18a <i2c_write_to_address+0x14>
	// if ((TWSR & 0xF8) != MT_SLA_ACK) // error checking -- need to predefine MT_SLA_ACK and ERROR() function depending on possible outcomes: 0x18, 0x20, or 0x38.
	//ERROR();
}
 192:	08 95       	ret

00000194 <i2c_read_from_address>:

void i2c_read_from_address(unsigned char address) { //Write an address byte to the I2C bus in form of SLA_R (address to read from)
	unsigned char SLA_R = address<<1 | 1; // create SLA_R byte by shifting address and setting R/W bit
 194:	90 e0       	ldi	r25, 0x00	; 0
 196:	88 0f       	add	r24, r24
 198:	99 1f       	adc	r25, r25
 19a:	81 60       	ori	r24, 0x01	; 1
	while (!(TWCR & (1<<TWINT))); //while (!(TWCR & 0b10000000)) ;  // wait for idle condition -- TWINT bit must be high to proceed
 19c:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 1a0:	99 23       	and	r25, r25
 1a2:	e4 f7       	brge	.-8      	; 0x19c <i2c_read_from_address+0x8>
	TWDR = SLA_R;       // Load TWDR with address plus R/W bit
 1a4:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	TWCR = (1<<TWINT) | (1<<TWEN); //TWCR = TWCR | 0b10000100;       // initiate Write -- write 1 to TWINT to clear it and initiate action, and set TWEN
 1a8:	84 e8       	ldi	r24, 0x84	; 132
 1aa:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while (!(TWCR & (1<<TWINT))); //while (!(TWCR & 0b10000000)) ;  // wait for action to finish (poll TWINT bit)
 1ae:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 1b2:	88 23       	and	r24, r24
 1b4:	e4 f7       	brge	.-8      	; 0x1ae <i2c_read_from_address+0x1a>
	// if ((TWSR & 0xF8) != MR_SLA_ACK) // error checking -- need to predefine MR_SLA_ACK and ERROR() function depending on possible outcomes: 0x38, 0x40, or 0x48.
	//ERROR();
}
 1b6:	08 95       	ret

000001b8 <i2c_write_data>:

void i2c_write_data( unsigned char data) { //Write data byte to the I2C2 bus
	while (!(TWCR & (1<<TWINT))); //while (!(TWCR & 0b10000000)) ;  // wait for idle condition -- TWINT bit must be high to proceed
 1b8:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 1bc:	99 23       	and	r25, r25
 1be:	e4 f7       	brge	.-8      	; 0x1b8 <i2c_write_data>
	TWDR = data;       // Load TWDR with data to be sent
 1c0:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	TWCR = (1<<TWINT) | (1<<TWEN); //TWCR = TWCR | 0b10000100;       // initiate Write -- write 1 to TWINT to clear it and initiate action, and set TWEN
 1c4:	84 e8       	ldi	r24, 0x84	; 132
 1c6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while (!(TWCR & (1<<TWINT))); //while (!(TWCR & 0b10000000)) ;  // wait for action to finish (poll TWINT bit)
 1ca:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 1ce:	88 23       	and	r24, r24
 1d0:	e4 f7       	brge	.-8      	; 0x1ca <i2c_write_data+0x12>
	// if ((TWSR & 0xF8) != MT_DATA_ACK) // error checking -- need to predefine MT_DATA_ACK and ERROR() function depending on possible outcomes: 0x28 or 0x30.
	//ERROR();
}
 1d2:	08 95       	ret

000001d4 <setup_temp>:

// Setup temp
void setup_temp() {
	// PC4 and PC5 as input
	// Set pull-up resistors
	DDRC &= !(1 << 4) & !(1 << 5);
 1d4:	87 b1       	in	r24, 0x07	; 7
 1d6:	17 b8       	out	0x07, r1	; 7
	PORTC |= (1 << 4) | (1 << 5);
 1d8:	88 b1       	in	r24, 0x08	; 8
 1da:	80 63       	ori	r24, 0x30	; 48
 1dc:	88 b9       	out	0x08, r24	; 8
	
	// Call init
	i2c_init();
 1de:	0e 94 9a 00 	call	0x134	; 0x134 <i2c_init>
	
	// Set resolution to .5C
	i2c_start();
 1e2:	0e 94 a3 00 	call	0x146	; 0x146 <i2c_start>
	i2c_write_to_address(TEMP_ADDRESS);
 1e6:	88 e1       	ldi	r24, 0x18	; 24
 1e8:	0e 94 bb 00 	call	0x176	; 0x176 <i2c_write_to_address>
	i2c_write_data(TEMP_RESOLUTION_REGISTER);
 1ec:	88 e0       	ldi	r24, 0x08	; 8
 1ee:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <i2c_write_data>
	i2c_write_data(TEMP_RESOLUTION_DATA);
 1f2:	80 e0       	ldi	r24, 0x00	; 0
 1f4:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <i2c_write_data>
 1f8:	08 95       	ret

000001fa <i2c_read_data>:
}


unsigned char i2c_read_data(unsigned char ACK) { //Read a byte of data from a secondary on the I2C2 bus
	unsigned char data;
	while (!(TWCR & (1<<TWINT))); //while (!(TWCR & 0b10000000)) ;  // wait for idle condition -- TWINT bit must be high to proceed
 1fa:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 1fe:	99 23       	and	r25, r25
 200:	e4 f7       	brge	.-8      	; 0x1fa <i2c_read_data>
	if (ACK) // check for whether ACK or NO_ACK should be sent upon receipt of byte from secondary
 202:	88 23       	and	r24, r24
 204:	21 f0       	breq	.+8      	; 0x20e <i2c_read_data+0x14>
	TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN); //TWCR = TWCR | 0b11000100;       // initiate Read with ACK -- write 1 to TWINT to clear it and initiate action, and set TWEA and TWEN
 206:	84 ec       	ldi	r24, 0xC4	; 196
 208:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 20c:	03 c0       	rjmp	.+6      	; 0x214 <i2c_read_data+0x1a>
	else
	TWCR = (1<<TWINT) | (1<<TWEN); //TWCR = TWCR | 0b10000100;       // initiate Read with NO_ACK-- write 1 to TWINT to clear it and initiate action, and set TWEN
 20e:	84 e8       	ldi	r24, 0x84	; 132
 210:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while (!(TWCR & (1<<TWINT))); //while (!(TWCR & 0b10000000)) ;  // wait for action to finish (poll TWINT bit)
 214:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 218:	88 23       	and	r24, r24
 21a:	e4 f7       	brge	.-8      	; 0x214 <i2c_read_data+0x1a>
	// if ((TWSR & 0xF8) != MR_SLA_ACK) // error checking -- need to predefine MR_SLA_ACK and ERROR() function depending on possible outcomes: 0x50 or 0x58.
	//ERROR();
	//If multiple bytes are to be read, this function can be repeated with proper ACK or NO_ACK until done.
	data = TWDR;  // read the received data from secondary
 21c:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	return(data);
 220:	08 95       	ret

00000222 <read_temp>:
	i2c_write_to_address(TEMP_ADDRESS);
	i2c_write_data(TEMP_RESOLUTION_REGISTER);
	i2c_write_data(TEMP_RESOLUTION_DATA);
}

int read_temp() {
 222:	1f 93       	push	r17
 224:	cf 93       	push	r28
 226:	df 93       	push	r29
	
	i2c_start();
 228:	0e 94 a3 00 	call	0x146	; 0x146 <i2c_start>
	i2c_write_to_address(TEMP_ADDRESS);
 22c:	88 e1       	ldi	r24, 0x18	; 24
 22e:	0e 94 bb 00 	call	0x176	; 0x176 <i2c_write_to_address>
	i2c_write_data(TEMP_DATA_REGISTER);
 232:	85 e0       	ldi	r24, 0x05	; 5
 234:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <i2c_write_data>
	i2c_repeated_start();
 238:	0e 94 b3 00 	call	0x166	; 0x166 <i2c_repeated_start>
	i2c_read_from_address(TEMP_ADDRESS);
 23c:	88 e1       	ldi	r24, 0x18	; 24
 23e:	0e 94 ca 00 	call	0x194	; 0x194 <i2c_read_from_address>
	int data1 = i2c_read_data(1);  // ACK
 242:	81 e0       	ldi	r24, 0x01	; 1
 244:	0e 94 fd 00 	call	0x1fa	; 0x1fa <i2c_read_data>
 248:	18 2f       	mov	r17, r24
	int data0 = i2c_read_data(0);  // NO ACK
 24a:	80 e0       	ldi	r24, 0x00	; 0
 24c:	0e 94 fd 00 	call	0x1fa	; 0x1fa <i2c_read_data>
 250:	c8 2f       	mov	r28, r24
 252:	d0 e0       	ldi	r29, 0x00	; 0
	i2c_stop();
 254:	0e 94 ab 00 	call	0x156	; 0x156 <i2c_stop>
	
	// Compute temperature
	int temperature;
	data1 = data1 & 0x1F;  // Clear upper three bits
 258:	61 2f       	mov	r22, r17
 25a:	6f 71       	andi	r22, 0x1F	; 31
 25c:	70 e0       	ldi	r23, 0x00	; 0
	if ((data1 & 0x10) == 0x10) {
 25e:	14 ff       	sbrs	r17, 4
 260:	14 c0       	rjmp	.+40     	; 0x28a <read_temp+0x68>
		data1 = data1 & 0x0F;
 262:	1f 70       	andi	r17, 0x0F	; 15
		temperature = 256 - (data1 * 16 + data0 / 16);
 264:	80 e1       	ldi	r24, 0x10	; 16
 266:	18 9f       	mul	r17, r24
 268:	90 01       	movw	r18, r0
 26a:	11 24       	eor	r1, r1
 26c:	d5 95       	asr	r29
 26e:	c7 95       	ror	r28
 270:	d5 95       	asr	r29
 272:	c7 95       	ror	r28
 274:	d5 95       	asr	r29
 276:	c7 95       	ror	r28
 278:	d5 95       	asr	r29
 27a:	c7 95       	ror	r28
 27c:	2c 0f       	add	r18, r28
 27e:	3d 1f       	adc	r19, r29
 280:	60 e0       	ldi	r22, 0x00	; 0
 282:	71 e0       	ldi	r23, 0x01	; 1
 284:	62 1b       	sub	r22, r18
 286:	73 0b       	sbc	r23, r19
 288:	10 c0       	rjmp	.+32     	; 0x2aa <read_temp+0x88>
	} else {
		temperature = (data1 * 16 + data0 / 16);
 28a:	62 95       	swap	r22
 28c:	72 95       	swap	r23
 28e:	70 7f       	andi	r23, 0xF0	; 240
 290:	76 27       	eor	r23, r22
 292:	60 7f       	andi	r22, 0xF0	; 240
 294:	76 27       	eor	r23, r22
 296:	d5 95       	asr	r29
 298:	c7 95       	ror	r28
 29a:	d5 95       	asr	r29
 29c:	c7 95       	ror	r28
 29e:	d5 95       	asr	r29
 2a0:	c7 95       	ror	r28
 2a2:	d5 95       	asr	r29
 2a4:	c7 95       	ror	r28
 2a6:	6c 0f       	add	r22, r28
 2a8:	7d 1f       	adc	r23, r29
	}
	
	// Still in celsius, convert to F
	temperature = (int) (temperature * 9.0/5.0) + 32;
 2aa:	07 2e       	mov	r0, r23
 2ac:	00 0c       	add	r0, r0
 2ae:	88 0b       	sbc	r24, r24
 2b0:	99 0b       	sbc	r25, r25
 2b2:	0e 94 2c 02 	call	0x458	; 0x458 <__floatsisf>
 2b6:	20 e0       	ldi	r18, 0x00	; 0
 2b8:	30 e0       	ldi	r19, 0x00	; 0
 2ba:	40 e1       	ldi	r20, 0x10	; 16
 2bc:	51 e4       	ldi	r21, 0x41	; 65
 2be:	0e 94 b8 02 	call	0x570	; 0x570 <__mulsf3>
 2c2:	20 e0       	ldi	r18, 0x00	; 0
 2c4:	30 e0       	ldi	r19, 0x00	; 0
 2c6:	40 ea       	ldi	r20, 0xA0	; 160
 2c8:	50 e4       	ldi	r21, 0x40	; 64
 2ca:	0e 94 82 01 	call	0x304	; 0x304 <__divsf3>
 2ce:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <__fixsfsi>
	
	return temperature;
}
 2d2:	cb 01       	movw	r24, r22
 2d4:	80 96       	adiw	r24, 0x20	; 32
 2d6:	df 91       	pop	r29
 2d8:	cf 91       	pop	r28
 2da:	1f 91       	pop	r17
 2dc:	08 95       	ret

000002de <main>:

int main(void)
{
	
	// Set up
	setup_max();
 2de:	0e 94 6e 00 	call	0xdc	; 0xdc <setup_max>
	setup_temp();
 2e2:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <setup_temp>
	
	// Turn on
	send_to_max(MAX_CMD_POWER, MAX_DAT_TURN_ON);
 2e6:	61 e0       	ldi	r22, 0x01	; 1
 2e8:	70 e0       	ldi	r23, 0x00	; 0
 2ea:	8c e0       	ldi	r24, 0x0C	; 12
 2ec:	90 e0       	ldi	r25, 0x00	; 0
 2ee:	0e 94 5f 00 	call	0xbe	; 0xbe <send_to_max>
	
    /* Replace with your application code */
    while (1) 
    {
		// Read temperature
		int temperature = read_temp();
 2f2:	0e 94 11 01 	call	0x222	; 0x222 <read_temp>
		write_digits(temperature);
 2f6:	0e 94 80 00 	call	0x100	; 0x100 <write_digits>
		
		// Wait
		wait(100);
 2fa:	84 e6       	ldi	r24, 0x64	; 100
 2fc:	90 e0       	ldi	r25, 0x00	; 0
 2fe:	0e 94 40 00 	call	0x80	; 0x80 <wait>
 302:	f7 cf       	rjmp	.-18     	; 0x2f2 <main+0x14>

00000304 <__divsf3>:
 304:	0e 94 96 01 	call	0x32c	; 0x32c <__divsf3x>
 308:	0c 94 7e 02 	jmp	0x4fc	; 0x4fc <__fp_round>
 30c:	0e 94 77 02 	call	0x4ee	; 0x4ee <__fp_pscB>
 310:	58 f0       	brcs	.+22     	; 0x328 <__divsf3+0x24>
 312:	0e 94 70 02 	call	0x4e0	; 0x4e0 <__fp_pscA>
 316:	40 f0       	brcs	.+16     	; 0x328 <__divsf3+0x24>
 318:	29 f4       	brne	.+10     	; 0x324 <__divsf3+0x20>
 31a:	5f 3f       	cpi	r21, 0xFF	; 255
 31c:	29 f0       	breq	.+10     	; 0x328 <__divsf3+0x24>
 31e:	0c 94 67 02 	jmp	0x4ce	; 0x4ce <__fp_inf>
 322:	51 11       	cpse	r21, r1
 324:	0c 94 b2 02 	jmp	0x564	; 0x564 <__fp_szero>
 328:	0c 94 6d 02 	jmp	0x4da	; 0x4da <__fp_nan>

0000032c <__divsf3x>:
 32c:	0e 94 8f 02 	call	0x51e	; 0x51e <__fp_split3>
 330:	68 f3       	brcs	.-38     	; 0x30c <__divsf3+0x8>

00000332 <__divsf3_pse>:
 332:	99 23       	and	r25, r25
 334:	b1 f3       	breq	.-20     	; 0x322 <__divsf3+0x1e>
 336:	55 23       	and	r21, r21
 338:	91 f3       	breq	.-28     	; 0x31e <__divsf3+0x1a>
 33a:	95 1b       	sub	r25, r21
 33c:	55 0b       	sbc	r21, r21
 33e:	bb 27       	eor	r27, r27
 340:	aa 27       	eor	r26, r26
 342:	62 17       	cp	r22, r18
 344:	73 07       	cpc	r23, r19
 346:	84 07       	cpc	r24, r20
 348:	38 f0       	brcs	.+14     	; 0x358 <__divsf3_pse+0x26>
 34a:	9f 5f       	subi	r25, 0xFF	; 255
 34c:	5f 4f       	sbci	r21, 0xFF	; 255
 34e:	22 0f       	add	r18, r18
 350:	33 1f       	adc	r19, r19
 352:	44 1f       	adc	r20, r20
 354:	aa 1f       	adc	r26, r26
 356:	a9 f3       	breq	.-22     	; 0x342 <__divsf3_pse+0x10>
 358:	35 d0       	rcall	.+106    	; 0x3c4 <__divsf3_pse+0x92>
 35a:	0e 2e       	mov	r0, r30
 35c:	3a f0       	brmi	.+14     	; 0x36c <__divsf3_pse+0x3a>
 35e:	e0 e8       	ldi	r30, 0x80	; 128
 360:	32 d0       	rcall	.+100    	; 0x3c6 <__divsf3_pse+0x94>
 362:	91 50       	subi	r25, 0x01	; 1
 364:	50 40       	sbci	r21, 0x00	; 0
 366:	e6 95       	lsr	r30
 368:	00 1c       	adc	r0, r0
 36a:	ca f7       	brpl	.-14     	; 0x35e <__divsf3_pse+0x2c>
 36c:	2b d0       	rcall	.+86     	; 0x3c4 <__divsf3_pse+0x92>
 36e:	fe 2f       	mov	r31, r30
 370:	29 d0       	rcall	.+82     	; 0x3c4 <__divsf3_pse+0x92>
 372:	66 0f       	add	r22, r22
 374:	77 1f       	adc	r23, r23
 376:	88 1f       	adc	r24, r24
 378:	bb 1f       	adc	r27, r27
 37a:	26 17       	cp	r18, r22
 37c:	37 07       	cpc	r19, r23
 37e:	48 07       	cpc	r20, r24
 380:	ab 07       	cpc	r26, r27
 382:	b0 e8       	ldi	r27, 0x80	; 128
 384:	09 f0       	breq	.+2      	; 0x388 <__divsf3_pse+0x56>
 386:	bb 0b       	sbc	r27, r27
 388:	80 2d       	mov	r24, r0
 38a:	bf 01       	movw	r22, r30
 38c:	ff 27       	eor	r31, r31
 38e:	93 58       	subi	r25, 0x83	; 131
 390:	5f 4f       	sbci	r21, 0xFF	; 255
 392:	3a f0       	brmi	.+14     	; 0x3a2 <__divsf3_pse+0x70>
 394:	9e 3f       	cpi	r25, 0xFE	; 254
 396:	51 05       	cpc	r21, r1
 398:	78 f0       	brcs	.+30     	; 0x3b8 <__divsf3_pse+0x86>
 39a:	0c 94 67 02 	jmp	0x4ce	; 0x4ce <__fp_inf>
 39e:	0c 94 b2 02 	jmp	0x564	; 0x564 <__fp_szero>
 3a2:	5f 3f       	cpi	r21, 0xFF	; 255
 3a4:	e4 f3       	brlt	.-8      	; 0x39e <__divsf3_pse+0x6c>
 3a6:	98 3e       	cpi	r25, 0xE8	; 232
 3a8:	d4 f3       	brlt	.-12     	; 0x39e <__divsf3_pse+0x6c>
 3aa:	86 95       	lsr	r24
 3ac:	77 95       	ror	r23
 3ae:	67 95       	ror	r22
 3b0:	b7 95       	ror	r27
 3b2:	f7 95       	ror	r31
 3b4:	9f 5f       	subi	r25, 0xFF	; 255
 3b6:	c9 f7       	brne	.-14     	; 0x3aa <__divsf3_pse+0x78>
 3b8:	88 0f       	add	r24, r24
 3ba:	91 1d       	adc	r25, r1
 3bc:	96 95       	lsr	r25
 3be:	87 95       	ror	r24
 3c0:	97 f9       	bld	r25, 7
 3c2:	08 95       	ret
 3c4:	e1 e0       	ldi	r30, 0x01	; 1
 3c6:	66 0f       	add	r22, r22
 3c8:	77 1f       	adc	r23, r23
 3ca:	88 1f       	adc	r24, r24
 3cc:	bb 1f       	adc	r27, r27
 3ce:	62 17       	cp	r22, r18
 3d0:	73 07       	cpc	r23, r19
 3d2:	84 07       	cpc	r24, r20
 3d4:	ba 07       	cpc	r27, r26
 3d6:	20 f0       	brcs	.+8      	; 0x3e0 <__divsf3_pse+0xae>
 3d8:	62 1b       	sub	r22, r18
 3da:	73 0b       	sbc	r23, r19
 3dc:	84 0b       	sbc	r24, r20
 3de:	ba 0b       	sbc	r27, r26
 3e0:	ee 1f       	adc	r30, r30
 3e2:	88 f7       	brcc	.-30     	; 0x3c6 <__divsf3_pse+0x94>
 3e4:	e0 95       	com	r30
 3e6:	08 95       	ret

000003e8 <__fixsfsi>:
 3e8:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <__fixunssfsi>
 3ec:	68 94       	set
 3ee:	b1 11       	cpse	r27, r1
 3f0:	0c 94 b2 02 	jmp	0x564	; 0x564 <__fp_szero>
 3f4:	08 95       	ret

000003f6 <__fixunssfsi>:
 3f6:	0e 94 97 02 	call	0x52e	; 0x52e <__fp_splitA>
 3fa:	88 f0       	brcs	.+34     	; 0x41e <__EEPROM_REGION_LENGTH__+0x1e>
 3fc:	9f 57       	subi	r25, 0x7F	; 127
 3fe:	98 f0       	brcs	.+38     	; 0x426 <__EEPROM_REGION_LENGTH__+0x26>
 400:	b9 2f       	mov	r27, r25
 402:	99 27       	eor	r25, r25
 404:	b7 51       	subi	r27, 0x17	; 23
 406:	b0 f0       	brcs	.+44     	; 0x434 <__EEPROM_REGION_LENGTH__+0x34>
 408:	e1 f0       	breq	.+56     	; 0x442 <__EEPROM_REGION_LENGTH__+0x42>
 40a:	66 0f       	add	r22, r22
 40c:	77 1f       	adc	r23, r23
 40e:	88 1f       	adc	r24, r24
 410:	99 1f       	adc	r25, r25
 412:	1a f0       	brmi	.+6      	; 0x41a <__EEPROM_REGION_LENGTH__+0x1a>
 414:	ba 95       	dec	r27
 416:	c9 f7       	brne	.-14     	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
 418:	14 c0       	rjmp	.+40     	; 0x442 <__EEPROM_REGION_LENGTH__+0x42>
 41a:	b1 30       	cpi	r27, 0x01	; 1
 41c:	91 f0       	breq	.+36     	; 0x442 <__EEPROM_REGION_LENGTH__+0x42>
 41e:	0e 94 b1 02 	call	0x562	; 0x562 <__fp_zero>
 422:	b1 e0       	ldi	r27, 0x01	; 1
 424:	08 95       	ret
 426:	0c 94 b1 02 	jmp	0x562	; 0x562 <__fp_zero>
 42a:	67 2f       	mov	r22, r23
 42c:	78 2f       	mov	r23, r24
 42e:	88 27       	eor	r24, r24
 430:	b8 5f       	subi	r27, 0xF8	; 248
 432:	39 f0       	breq	.+14     	; 0x442 <__EEPROM_REGION_LENGTH__+0x42>
 434:	b9 3f       	cpi	r27, 0xF9	; 249
 436:	cc f3       	brlt	.-14     	; 0x42a <__EEPROM_REGION_LENGTH__+0x2a>
 438:	86 95       	lsr	r24
 43a:	77 95       	ror	r23
 43c:	67 95       	ror	r22
 43e:	b3 95       	inc	r27
 440:	d9 f7       	brne	.-10     	; 0x438 <__EEPROM_REGION_LENGTH__+0x38>
 442:	3e f4       	brtc	.+14     	; 0x452 <__EEPROM_REGION_LENGTH__+0x52>
 444:	90 95       	com	r25
 446:	80 95       	com	r24
 448:	70 95       	com	r23
 44a:	61 95       	neg	r22
 44c:	7f 4f       	sbci	r23, 0xFF	; 255
 44e:	8f 4f       	sbci	r24, 0xFF	; 255
 450:	9f 4f       	sbci	r25, 0xFF	; 255
 452:	08 95       	ret

00000454 <__floatunsisf>:
 454:	e8 94       	clt
 456:	09 c0       	rjmp	.+18     	; 0x46a <__floatsisf+0x12>

00000458 <__floatsisf>:
 458:	97 fb       	bst	r25, 7
 45a:	3e f4       	brtc	.+14     	; 0x46a <__floatsisf+0x12>
 45c:	90 95       	com	r25
 45e:	80 95       	com	r24
 460:	70 95       	com	r23
 462:	61 95       	neg	r22
 464:	7f 4f       	sbci	r23, 0xFF	; 255
 466:	8f 4f       	sbci	r24, 0xFF	; 255
 468:	9f 4f       	sbci	r25, 0xFF	; 255
 46a:	99 23       	and	r25, r25
 46c:	a9 f0       	breq	.+42     	; 0x498 <__floatsisf+0x40>
 46e:	f9 2f       	mov	r31, r25
 470:	96 e9       	ldi	r25, 0x96	; 150
 472:	bb 27       	eor	r27, r27
 474:	93 95       	inc	r25
 476:	f6 95       	lsr	r31
 478:	87 95       	ror	r24
 47a:	77 95       	ror	r23
 47c:	67 95       	ror	r22
 47e:	b7 95       	ror	r27
 480:	f1 11       	cpse	r31, r1
 482:	f8 cf       	rjmp	.-16     	; 0x474 <__floatsisf+0x1c>
 484:	fa f4       	brpl	.+62     	; 0x4c4 <__floatsisf+0x6c>
 486:	bb 0f       	add	r27, r27
 488:	11 f4       	brne	.+4      	; 0x48e <__floatsisf+0x36>
 48a:	60 ff       	sbrs	r22, 0
 48c:	1b c0       	rjmp	.+54     	; 0x4c4 <__floatsisf+0x6c>
 48e:	6f 5f       	subi	r22, 0xFF	; 255
 490:	7f 4f       	sbci	r23, 0xFF	; 255
 492:	8f 4f       	sbci	r24, 0xFF	; 255
 494:	9f 4f       	sbci	r25, 0xFF	; 255
 496:	16 c0       	rjmp	.+44     	; 0x4c4 <__floatsisf+0x6c>
 498:	88 23       	and	r24, r24
 49a:	11 f0       	breq	.+4      	; 0x4a0 <__floatsisf+0x48>
 49c:	96 e9       	ldi	r25, 0x96	; 150
 49e:	11 c0       	rjmp	.+34     	; 0x4c2 <__floatsisf+0x6a>
 4a0:	77 23       	and	r23, r23
 4a2:	21 f0       	breq	.+8      	; 0x4ac <__floatsisf+0x54>
 4a4:	9e e8       	ldi	r25, 0x8E	; 142
 4a6:	87 2f       	mov	r24, r23
 4a8:	76 2f       	mov	r23, r22
 4aa:	05 c0       	rjmp	.+10     	; 0x4b6 <__floatsisf+0x5e>
 4ac:	66 23       	and	r22, r22
 4ae:	71 f0       	breq	.+28     	; 0x4cc <__floatsisf+0x74>
 4b0:	96 e8       	ldi	r25, 0x86	; 134
 4b2:	86 2f       	mov	r24, r22
 4b4:	70 e0       	ldi	r23, 0x00	; 0
 4b6:	60 e0       	ldi	r22, 0x00	; 0
 4b8:	2a f0       	brmi	.+10     	; 0x4c4 <__floatsisf+0x6c>
 4ba:	9a 95       	dec	r25
 4bc:	66 0f       	add	r22, r22
 4be:	77 1f       	adc	r23, r23
 4c0:	88 1f       	adc	r24, r24
 4c2:	da f7       	brpl	.-10     	; 0x4ba <__floatsisf+0x62>
 4c4:	88 0f       	add	r24, r24
 4c6:	96 95       	lsr	r25
 4c8:	87 95       	ror	r24
 4ca:	97 f9       	bld	r25, 7
 4cc:	08 95       	ret

000004ce <__fp_inf>:
 4ce:	97 f9       	bld	r25, 7
 4d0:	9f 67       	ori	r25, 0x7F	; 127
 4d2:	80 e8       	ldi	r24, 0x80	; 128
 4d4:	70 e0       	ldi	r23, 0x00	; 0
 4d6:	60 e0       	ldi	r22, 0x00	; 0
 4d8:	08 95       	ret

000004da <__fp_nan>:
 4da:	9f ef       	ldi	r25, 0xFF	; 255
 4dc:	80 ec       	ldi	r24, 0xC0	; 192
 4de:	08 95       	ret

000004e0 <__fp_pscA>:
 4e0:	00 24       	eor	r0, r0
 4e2:	0a 94       	dec	r0
 4e4:	16 16       	cp	r1, r22
 4e6:	17 06       	cpc	r1, r23
 4e8:	18 06       	cpc	r1, r24
 4ea:	09 06       	cpc	r0, r25
 4ec:	08 95       	ret

000004ee <__fp_pscB>:
 4ee:	00 24       	eor	r0, r0
 4f0:	0a 94       	dec	r0
 4f2:	12 16       	cp	r1, r18
 4f4:	13 06       	cpc	r1, r19
 4f6:	14 06       	cpc	r1, r20
 4f8:	05 06       	cpc	r0, r21
 4fa:	08 95       	ret

000004fc <__fp_round>:
 4fc:	09 2e       	mov	r0, r25
 4fe:	03 94       	inc	r0
 500:	00 0c       	add	r0, r0
 502:	11 f4       	brne	.+4      	; 0x508 <__fp_round+0xc>
 504:	88 23       	and	r24, r24
 506:	52 f0       	brmi	.+20     	; 0x51c <__fp_round+0x20>
 508:	bb 0f       	add	r27, r27
 50a:	40 f4       	brcc	.+16     	; 0x51c <__fp_round+0x20>
 50c:	bf 2b       	or	r27, r31
 50e:	11 f4       	brne	.+4      	; 0x514 <__fp_round+0x18>
 510:	60 ff       	sbrs	r22, 0
 512:	04 c0       	rjmp	.+8      	; 0x51c <__fp_round+0x20>
 514:	6f 5f       	subi	r22, 0xFF	; 255
 516:	7f 4f       	sbci	r23, 0xFF	; 255
 518:	8f 4f       	sbci	r24, 0xFF	; 255
 51a:	9f 4f       	sbci	r25, 0xFF	; 255
 51c:	08 95       	ret

0000051e <__fp_split3>:
 51e:	57 fd       	sbrc	r21, 7
 520:	90 58       	subi	r25, 0x80	; 128
 522:	44 0f       	add	r20, r20
 524:	55 1f       	adc	r21, r21
 526:	59 f0       	breq	.+22     	; 0x53e <__fp_splitA+0x10>
 528:	5f 3f       	cpi	r21, 0xFF	; 255
 52a:	71 f0       	breq	.+28     	; 0x548 <__fp_splitA+0x1a>
 52c:	47 95       	ror	r20

0000052e <__fp_splitA>:
 52e:	88 0f       	add	r24, r24
 530:	97 fb       	bst	r25, 7
 532:	99 1f       	adc	r25, r25
 534:	61 f0       	breq	.+24     	; 0x54e <__fp_splitA+0x20>
 536:	9f 3f       	cpi	r25, 0xFF	; 255
 538:	79 f0       	breq	.+30     	; 0x558 <__fp_splitA+0x2a>
 53a:	87 95       	ror	r24
 53c:	08 95       	ret
 53e:	12 16       	cp	r1, r18
 540:	13 06       	cpc	r1, r19
 542:	14 06       	cpc	r1, r20
 544:	55 1f       	adc	r21, r21
 546:	f2 cf       	rjmp	.-28     	; 0x52c <__fp_split3+0xe>
 548:	46 95       	lsr	r20
 54a:	f1 df       	rcall	.-30     	; 0x52e <__fp_splitA>
 54c:	08 c0       	rjmp	.+16     	; 0x55e <__fp_splitA+0x30>
 54e:	16 16       	cp	r1, r22
 550:	17 06       	cpc	r1, r23
 552:	18 06       	cpc	r1, r24
 554:	99 1f       	adc	r25, r25
 556:	f1 cf       	rjmp	.-30     	; 0x53a <__fp_splitA+0xc>
 558:	86 95       	lsr	r24
 55a:	71 05       	cpc	r23, r1
 55c:	61 05       	cpc	r22, r1
 55e:	08 94       	sec
 560:	08 95       	ret

00000562 <__fp_zero>:
 562:	e8 94       	clt

00000564 <__fp_szero>:
 564:	bb 27       	eor	r27, r27
 566:	66 27       	eor	r22, r22
 568:	77 27       	eor	r23, r23
 56a:	cb 01       	movw	r24, r22
 56c:	97 f9       	bld	r25, 7
 56e:	08 95       	ret

00000570 <__mulsf3>:
 570:	0e 94 cb 02 	call	0x596	; 0x596 <__mulsf3x>
 574:	0c 94 7e 02 	jmp	0x4fc	; 0x4fc <__fp_round>
 578:	0e 94 70 02 	call	0x4e0	; 0x4e0 <__fp_pscA>
 57c:	38 f0       	brcs	.+14     	; 0x58c <__mulsf3+0x1c>
 57e:	0e 94 77 02 	call	0x4ee	; 0x4ee <__fp_pscB>
 582:	20 f0       	brcs	.+8      	; 0x58c <__mulsf3+0x1c>
 584:	95 23       	and	r25, r21
 586:	11 f0       	breq	.+4      	; 0x58c <__mulsf3+0x1c>
 588:	0c 94 67 02 	jmp	0x4ce	; 0x4ce <__fp_inf>
 58c:	0c 94 6d 02 	jmp	0x4da	; 0x4da <__fp_nan>
 590:	11 24       	eor	r1, r1
 592:	0c 94 b2 02 	jmp	0x564	; 0x564 <__fp_szero>

00000596 <__mulsf3x>:
 596:	0e 94 8f 02 	call	0x51e	; 0x51e <__fp_split3>
 59a:	70 f3       	brcs	.-36     	; 0x578 <__mulsf3+0x8>

0000059c <__mulsf3_pse>:
 59c:	95 9f       	mul	r25, r21
 59e:	c1 f3       	breq	.-16     	; 0x590 <__mulsf3+0x20>
 5a0:	95 0f       	add	r25, r21
 5a2:	50 e0       	ldi	r21, 0x00	; 0
 5a4:	55 1f       	adc	r21, r21
 5a6:	62 9f       	mul	r22, r18
 5a8:	f0 01       	movw	r30, r0
 5aa:	72 9f       	mul	r23, r18
 5ac:	bb 27       	eor	r27, r27
 5ae:	f0 0d       	add	r31, r0
 5b0:	b1 1d       	adc	r27, r1
 5b2:	63 9f       	mul	r22, r19
 5b4:	aa 27       	eor	r26, r26
 5b6:	f0 0d       	add	r31, r0
 5b8:	b1 1d       	adc	r27, r1
 5ba:	aa 1f       	adc	r26, r26
 5bc:	64 9f       	mul	r22, r20
 5be:	66 27       	eor	r22, r22
 5c0:	b0 0d       	add	r27, r0
 5c2:	a1 1d       	adc	r26, r1
 5c4:	66 1f       	adc	r22, r22
 5c6:	82 9f       	mul	r24, r18
 5c8:	22 27       	eor	r18, r18
 5ca:	b0 0d       	add	r27, r0
 5cc:	a1 1d       	adc	r26, r1
 5ce:	62 1f       	adc	r22, r18
 5d0:	73 9f       	mul	r23, r19
 5d2:	b0 0d       	add	r27, r0
 5d4:	a1 1d       	adc	r26, r1
 5d6:	62 1f       	adc	r22, r18
 5d8:	83 9f       	mul	r24, r19
 5da:	a0 0d       	add	r26, r0
 5dc:	61 1d       	adc	r22, r1
 5de:	22 1f       	adc	r18, r18
 5e0:	74 9f       	mul	r23, r20
 5e2:	33 27       	eor	r19, r19
 5e4:	a0 0d       	add	r26, r0
 5e6:	61 1d       	adc	r22, r1
 5e8:	23 1f       	adc	r18, r19
 5ea:	84 9f       	mul	r24, r20
 5ec:	60 0d       	add	r22, r0
 5ee:	21 1d       	adc	r18, r1
 5f0:	82 2f       	mov	r24, r18
 5f2:	76 2f       	mov	r23, r22
 5f4:	6a 2f       	mov	r22, r26
 5f6:	11 24       	eor	r1, r1
 5f8:	9f 57       	subi	r25, 0x7F	; 127
 5fa:	50 40       	sbci	r21, 0x00	; 0
 5fc:	9a f0       	brmi	.+38     	; 0x624 <__mulsf3_pse+0x88>
 5fe:	f1 f0       	breq	.+60     	; 0x63c <__mulsf3_pse+0xa0>
 600:	88 23       	and	r24, r24
 602:	4a f0       	brmi	.+18     	; 0x616 <__mulsf3_pse+0x7a>
 604:	ee 0f       	add	r30, r30
 606:	ff 1f       	adc	r31, r31
 608:	bb 1f       	adc	r27, r27
 60a:	66 1f       	adc	r22, r22
 60c:	77 1f       	adc	r23, r23
 60e:	88 1f       	adc	r24, r24
 610:	91 50       	subi	r25, 0x01	; 1
 612:	50 40       	sbci	r21, 0x00	; 0
 614:	a9 f7       	brne	.-22     	; 0x600 <__mulsf3_pse+0x64>
 616:	9e 3f       	cpi	r25, 0xFE	; 254
 618:	51 05       	cpc	r21, r1
 61a:	80 f0       	brcs	.+32     	; 0x63c <__mulsf3_pse+0xa0>
 61c:	0c 94 67 02 	jmp	0x4ce	; 0x4ce <__fp_inf>
 620:	0c 94 b2 02 	jmp	0x564	; 0x564 <__fp_szero>
 624:	5f 3f       	cpi	r21, 0xFF	; 255
 626:	e4 f3       	brlt	.-8      	; 0x620 <__mulsf3_pse+0x84>
 628:	98 3e       	cpi	r25, 0xE8	; 232
 62a:	d4 f3       	brlt	.-12     	; 0x620 <__mulsf3_pse+0x84>
 62c:	86 95       	lsr	r24
 62e:	77 95       	ror	r23
 630:	67 95       	ror	r22
 632:	b7 95       	ror	r27
 634:	f7 95       	ror	r31
 636:	e7 95       	ror	r30
 638:	9f 5f       	subi	r25, 0xFF	; 255
 63a:	c1 f7       	brne	.-16     	; 0x62c <__mulsf3_pse+0x90>
 63c:	fe 2b       	or	r31, r30
 63e:	88 0f       	add	r24, r24
 640:	91 1d       	adc	r25, r1
 642:	96 95       	lsr	r25
 644:	87 95       	ror	r24
 646:	97 f9       	bld	r25, 7
 648:	08 95       	ret

0000064a <__divmodhi4>:
 64a:	97 fb       	bst	r25, 7
 64c:	07 2e       	mov	r0, r23
 64e:	16 f4       	brtc	.+4      	; 0x654 <__divmodhi4+0xa>
 650:	00 94       	com	r0
 652:	07 d0       	rcall	.+14     	; 0x662 <__divmodhi4_neg1>
 654:	77 fd       	sbrc	r23, 7
 656:	09 d0       	rcall	.+18     	; 0x66a <__divmodhi4_neg2>
 658:	0e 94 39 03 	call	0x672	; 0x672 <__udivmodhi4>
 65c:	07 fc       	sbrc	r0, 7
 65e:	05 d0       	rcall	.+10     	; 0x66a <__divmodhi4_neg2>
 660:	3e f4       	brtc	.+14     	; 0x670 <__divmodhi4_exit>

00000662 <__divmodhi4_neg1>:
 662:	90 95       	com	r25
 664:	81 95       	neg	r24
 666:	9f 4f       	sbci	r25, 0xFF	; 255
 668:	08 95       	ret

0000066a <__divmodhi4_neg2>:
 66a:	70 95       	com	r23
 66c:	61 95       	neg	r22
 66e:	7f 4f       	sbci	r23, 0xFF	; 255

00000670 <__divmodhi4_exit>:
 670:	08 95       	ret

00000672 <__udivmodhi4>:
 672:	aa 1b       	sub	r26, r26
 674:	bb 1b       	sub	r27, r27
 676:	51 e1       	ldi	r21, 0x11	; 17
 678:	07 c0       	rjmp	.+14     	; 0x688 <__udivmodhi4_ep>

0000067a <__udivmodhi4_loop>:
 67a:	aa 1f       	adc	r26, r26
 67c:	bb 1f       	adc	r27, r27
 67e:	a6 17       	cp	r26, r22
 680:	b7 07       	cpc	r27, r23
 682:	10 f0       	brcs	.+4      	; 0x688 <__udivmodhi4_ep>
 684:	a6 1b       	sub	r26, r22
 686:	b7 0b       	sbc	r27, r23

00000688 <__udivmodhi4_ep>:
 688:	88 1f       	adc	r24, r24
 68a:	99 1f       	adc	r25, r25
 68c:	5a 95       	dec	r21
 68e:	a9 f7       	brne	.-22     	; 0x67a <__udivmodhi4_loop>
 690:	80 95       	com	r24
 692:	90 95       	com	r25
 694:	bc 01       	movw	r22, r24
 696:	cd 01       	movw	r24, r26
 698:	08 95       	ret

0000069a <_exit>:
 69a:	f8 94       	cli

0000069c <__stop_program>:
 69c:	ff cf       	rjmp	.-2      	; 0x69c <__stop_program>
