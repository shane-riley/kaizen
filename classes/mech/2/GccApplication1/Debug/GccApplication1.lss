
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001be  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000016a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001be  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001f0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  00000230  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000075e  00000000  00000000  00000268  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006b6  00000000  00000000  000009c6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002ea  00000000  00000000  0000107c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000064  00000000  00000000  00001368  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000039f  00000000  00000000  000013cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000154  00000000  00000000  0000176b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  000018bf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 87 00 	call	0x10e	; 0x10e <main>
  78:	0c 94 b3 00 	jmp	0x166	; 0x166 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <button_pressed>:
// S U B R O U T I N E S
// ============================================

// Check PD2 for low
int button_pressed() {
	return !(PIND & 0b00000100);
  80:	89 b1       	in	r24, 0x09	; 9
  82:	86 95       	lsr	r24
  84:	86 95       	lsr	r24
  86:	91 e0       	ldi	r25, 0x01	; 1
  88:	89 27       	eor	r24, r25
} // end button_pressed()
  8a:	81 70       	andi	r24, 0x01	; 1
  8c:	90 e0       	ldi	r25, 0x00	; 0
  8e:	08 95       	ret

00000090 <wait>:

void wait(volatile int multiple) {
  90:	cf 93       	push	r28
  92:	df 93       	push	r29
  94:	00 d0       	rcall	.+0      	; 0x96 <wait+0x6>
  96:	cd b7       	in	r28, 0x3d	; 61
  98:	de b7       	in	r29, 0x3e	; 62
  9a:	9a 83       	std	Y+2, r25	; 0x02
  9c:	89 83       	std	Y+1, r24	; 0x01
	// This subroutine creates a delay equal to multiple*T, where T is 1 msec
	// Assumes a 16MHz clock frequency – FOR DIFFERENT CLOCK, CHANGE THE COUNT EXIT VALUE IN WHILE LOOP
	while (multiple > 0) {
  9e:	0d c0       	rjmp	.+26     	; 0xba <wait+0x2a>
		TCCR0A = 0x00; // clears WGM00 and WGM01 (bits 0 and 1) to ensure Timer/Counter is in normal mode.
  a0:	14 bc       	out	0x24, r1	; 36
		TCNT0 = 0; // preload value for testing on count = 250
  a2:	16 bc       	out	0x26, r1	; 38
		TCCR0B = 0b00000011; //1<<CS01 | 1<<CS00; TCCR0B = 0x03; //
  a4:	83 e0       	ldi	r24, 0x03	; 3
  a6:	85 bd       	out	0x25, r24	; 37
		// Start TIMER0, Normal mode, crystal clock, prescaler = 64
		while (TCNT0 < 0xFA); // exits when count = 250 (requires preload of 0 to make count = 250) CHANGE THIS VALUE FOR CLOCK OTHER THAN 16MHz
  a8:	86 b5       	in	r24, 0x26	; 38
  aa:	8a 3f       	cpi	r24, 0xFA	; 250
  ac:	e8 f3       	brcs	.-6      	; 0xa8 <wait+0x18>
		TCCR0B = 0x00; // Stop TIMER0
  ae:	15 bc       	out	0x25, r1	; 37
		multiple--;
  b0:	89 81       	ldd	r24, Y+1	; 0x01
  b2:	9a 81       	ldd	r25, Y+2	; 0x02
  b4:	01 97       	sbiw	r24, 0x01	; 1
  b6:	9a 83       	std	Y+2, r25	; 0x02
  b8:	89 83       	std	Y+1, r24	; 0x01
} // end button_pressed()

void wait(volatile int multiple) {
	// This subroutine creates a delay equal to multiple*T, where T is 1 msec
	// Assumes a 16MHz clock frequency – FOR DIFFERENT CLOCK, CHANGE THE COUNT EXIT VALUE IN WHILE LOOP
	while (multiple > 0) {
  ba:	89 81       	ldd	r24, Y+1	; 0x01
  bc:	9a 81       	ldd	r25, Y+2	; 0x02
  be:	18 16       	cp	r1, r24
  c0:	19 06       	cpc	r1, r25
  c2:	74 f3       	brlt	.-36     	; 0xa0 <wait+0x10>
		// Start TIMER0, Normal mode, crystal clock, prescaler = 64
		while (TCNT0 < 0xFA); // exits when count = 250 (requires preload of 0 to make count = 250) CHANGE THIS VALUE FOR CLOCK OTHER THAN 16MHz
		TCCR0B = 0x00; // Stop TIMER0
		multiple--;
	}
} // end wait()
  c4:	0f 90       	pop	r0
  c6:	0f 90       	pop	r0
  c8:	df 91       	pop	r29
  ca:	cf 91       	pop	r28
  cc:	08 95       	ret

000000ce <set_led>:

void set_led(int led) {
	switch(led) {
  ce:	81 30       	cpi	r24, 0x01	; 1
  d0:	91 05       	cpc	r25, r1
  d2:	89 f0       	breq	.+34     	; 0xf6 <set_led+0x28>
  d4:	3c f4       	brge	.+14     	; 0xe4 <set_led+0x16>
  d6:	8f 3f       	cpi	r24, 0xFF	; 255
  d8:	2f ef       	ldi	r18, 0xFF	; 255
  da:	92 07       	cpc	r25, r18
  dc:	a9 f0       	breq	.+42     	; 0x108 <set_led+0x3a>
  de:	89 2b       	or	r24, r25
  e0:	39 f0       	breq	.+14     	; 0xf0 <set_led+0x22>
  e2:	08 95       	ret
  e4:	82 30       	cpi	r24, 0x02	; 2
  e6:	91 05       	cpc	r25, r1
  e8:	49 f0       	breq	.+18     	; 0xfc <set_led+0x2e>
  ea:	03 97       	sbiw	r24, 0x03	; 3
  ec:	51 f0       	breq	.+20     	; 0x102 <set_led+0x34>
  ee:	08 95       	ret
		case 0:
			PORTC = 0xFE;
  f0:	8e ef       	ldi	r24, 0xFE	; 254
  f2:	88 b9       	out	0x08, r24	; 8
			break;
  f4:	08 95       	ret
		case 1:
			PORTC = 0xFD;
  f6:	8d ef       	ldi	r24, 0xFD	; 253
  f8:	88 b9       	out	0x08, r24	; 8
			break;
  fa:	08 95       	ret
		case 2:
			PORTC = 0xFB;
  fc:	8b ef       	ldi	r24, 0xFB	; 251
  fe:	88 b9       	out	0x08, r24	; 8
			break;
 100:	08 95       	ret
		case 3:
			PORTC = 0xF7;
 102:	87 ef       	ldi	r24, 0xF7	; 247
 104:	88 b9       	out	0x08, r24	; 8
			break;
 106:	08 95       	ret
		case -1:
			PORTC = 0xFF;
 108:	8f ef       	ldi	r24, 0xFF	; 255
 10a:	88 b9       	out	0x08, r24	; 8
 10c:	08 95       	ret

0000010e <main>:

int main(void)
{
	
	// Set all PORTC pins as output
	DDRC = 0xFF;
 10e:	8f ef       	ldi	r24, 0xFF	; 255
 110:	87 b9       	out	0x07, r24	; 7
	
	// Turn off PORTC pins
	PORTC = 0xFF;
 112:	88 b9       	out	0x08, r24	; 8
	
	// Set PORTD as input
	DDRD = 0;
 114:	1a b8       	out	0x0a, r1	; 10
	
	// State information
	int led = 0;
	int is_increasing = 1;
 116:	01 e0       	ldi	r16, 0x01	; 1
 118:	10 e0       	ldi	r17, 0x00	; 0
	
	// Set PORTD as input
	DDRD = 0;
	
	// State information
	int led = 0;
 11a:	c0 e0       	ldi	r28, 0x00	; 0
 11c:	d0 e0       	ldi	r29, 0x00	; 0
    // ============================================
    // P R O G R A M L O O P
    // ============================================
	while(1)
    {
		if (button_pressed()) {
 11e:	0e 94 40 00 	call	0x80	; 0x80 <button_pressed>
 122:	89 2b       	or	r24, r25
 124:	29 f0       	breq	.+10     	; 0x130 <main+0x22>
			set_led(-1);
 126:	8f ef       	ldi	r24, 0xFF	; 255
 128:	9f ef       	ldi	r25, 0xFF	; 255
 12a:	0e 94 67 00 	call	0xce	; 0xce <set_led>
 12e:	16 c0       	rjmp	.+44     	; 0x15c <main+0x4e>
		} else {
			// Tick led
			led += is_increasing ? 1 : -1;
 130:	01 15       	cp	r16, r1
 132:	11 05       	cpc	r17, r1
 134:	19 f0       	breq	.+6      	; 0x13c <main+0x2e>
 136:	81 e0       	ldi	r24, 0x01	; 1
 138:	90 e0       	ldi	r25, 0x00	; 0
 13a:	02 c0       	rjmp	.+4      	; 0x140 <main+0x32>
 13c:	8f ef       	ldi	r24, 0xFF	; 255
 13e:	9f ef       	ldi	r25, 0xFF	; 255
 140:	c8 0f       	add	r28, r24
 142:	d9 1f       	adc	r29, r25
			if (led == 0) is_increasing = 1;
 144:	20 97       	sbiw	r28, 0x00	; 0
 146:	11 f4       	brne	.+4      	; 0x14c <main+0x3e>
 148:	01 e0       	ldi	r16, 0x01	; 1
 14a:	10 e0       	ldi	r17, 0x00	; 0
			if (led == 3) is_increasing = 0;
 14c:	c3 30       	cpi	r28, 0x03	; 3
 14e:	d1 05       	cpc	r29, r1
 150:	11 f4       	brne	.+4      	; 0x156 <main+0x48>
 152:	00 e0       	ldi	r16, 0x00	; 0
 154:	10 e0       	ldi	r17, 0x00	; 0
			set_led(led);
 156:	ce 01       	movw	r24, r28
 158:	0e 94 67 00 	call	0xce	; 0xce <set_led>
		}
		wait(1000);
 15c:	88 ee       	ldi	r24, 0xE8	; 232
 15e:	93 e0       	ldi	r25, 0x03	; 3
 160:	0e 94 48 00 	call	0x90	; 0x90 <wait>
	}
 164:	dc cf       	rjmp	.-72     	; 0x11e <main+0x10>

00000166 <_exit>:
 166:	f8 94       	cli

00000168 <__stop_program>:
 168:	ff cf       	rjmp	.-2      	; 0x168 <__stop_program>
