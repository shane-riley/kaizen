
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000018c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001e0  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000210  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  00000250  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007c9  00000000  00000000  00000290  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006d2  00000000  00000000  00000a59  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000333  00000000  00000000  0000112b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000074  00000000  00000000  00001460  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003d0  00000000  00000000  000014d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000200  00000000  00000000  000018a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  00001aa4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 88 00 	call	0x110	; 0x110 <main>
  78:	0c 94 c4 00 	jmp	0x188	; 0x188 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <read_voltage>:
} // end wait()

int read_voltage() {
	
	// Set starting bit
	ADCSRA = ADCSRA | 0b01000000;
  80:	ea e7       	ldi	r30, 0x7A	; 122
  82:	f0 e0       	ldi	r31, 0x00	; 0
  84:	80 81       	ld	r24, Z
  86:	80 64       	ori	r24, 0x40	; 64
  88:	80 83       	st	Z, r24
	
	// Wait for completion
	while ((0b00010000 & ADCSRA) == 0);
  8a:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
  8e:	84 ff       	sbrs	r24, 4
  90:	fc cf       	rjmp	.-8      	; 0x8a <read_voltage+0xa>

	// Left-justify in register
	return (ADCH);
  92:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
	
} // end read_voltage()
  96:	90 e0       	ldi	r25, 0x00	; 0
  98:	08 95       	ret

0000009a <set_which_led>:

void set_which_led(int led) {
	if (led > 4) { led = 4; }
  9a:	85 30       	cpi	r24, 0x05	; 5
  9c:	91 05       	cpc	r25, r1
  9e:	14 f0       	brlt	.+4      	; 0xa4 <set_which_led+0xa>
  a0:	84 e0       	ldi	r24, 0x04	; 4
  a2:	90 e0       	ldi	r25, 0x00	; 0
	if (led >= 0) {
  a4:	99 23       	and	r25, r25
  a6:	64 f0       	brlt	.+24     	; 0xc0 <set_which_led+0x26>
		PORTB = ~(1 << led);
  a8:	21 e0       	ldi	r18, 0x01	; 1
  aa:	30 e0       	ldi	r19, 0x00	; 0
  ac:	a9 01       	movw	r20, r18
  ae:	02 c0       	rjmp	.+4      	; 0xb4 <set_which_led+0x1a>
  b0:	44 0f       	add	r20, r20
  b2:	55 1f       	adc	r21, r21
  b4:	8a 95       	dec	r24
  b6:	e2 f7       	brpl	.-8      	; 0xb0 <set_which_led+0x16>
  b8:	ca 01       	movw	r24, r20
  ba:	80 95       	com	r24
  bc:	85 b9       	out	0x05, r24	; 5
  be:	08 95       	ret
	} else {
		PORTB = 0xFF;
  c0:	8f ef       	ldi	r24, 0xFF	; 255
  c2:	85 b9       	out	0x05, r24	; 5
  c4:	08 95       	ret

000000c6 <set_motor>:

void set_motor(int mode, int speed) {
	int forward = (mode > 0);
	int backward = (mode < 0);
	int duty;
	if (mode == 1 || mode == -1) {
  c6:	81 30       	cpi	r24, 0x01	; 1
  c8:	91 05       	cpc	r25, r1
  ca:	51 f0       	breq	.+20     	; 0xe0 <set_motor+0x1a>
  cc:	8f 3f       	cpi	r24, 0xFF	; 255
  ce:	2f ef       	ldi	r18, 0xFF	; 255
  d0:	92 07       	cpc	r25, r18
  d2:	41 f0       	breq	.+16     	; 0xe4 <set_motor+0x1e>
		duty = 0x80;
	} else if (mode == -2) {
  d4:	8e 3f       	cpi	r24, 0xFE	; 254
  d6:	2f ef       	ldi	r18, 0xFF	; 255
  d8:	92 07       	cpc	r25, r18
  da:	29 f4       	brne	.+10     	; 0xe6 <set_motor+0x20>
		duty = 0xD0;
  dc:	60 ed       	ldi	r22, 0xD0	; 208
  de:	03 c0       	rjmp	.+6      	; 0xe6 <set_motor+0x20>
void set_motor(int mode, int speed) {
	int forward = (mode > 0);
	int backward = (mode < 0);
	int duty;
	if (mode == 1 || mode == -1) {
		duty = 0x80;
  e0:	60 e8       	ldi	r22, 0x80	; 128
  e2:	01 c0       	rjmp	.+2      	; 0xe6 <set_motor+0x20>
  e4:	60 e8       	ldi	r22, 0x80	; 128
		duty = 0xD0;
	} else {
		duty = speed;
	}
	
	if (forward) {
  e6:	18 16       	cp	r1, r24
  e8:	19 06       	cpc	r1, r25
  ea:	24 f4       	brge	.+8      	; 0xf4 <set_motor+0x2e>
		PORTC = PORTC | (1<<1);
  ec:	28 b1       	in	r18, 0x08	; 8
  ee:	22 60       	ori	r18, 0x02	; 2
  f0:	28 b9       	out	0x08, r18	; 8
  f2:	03 c0       	rjmp	.+6      	; 0xfa <set_motor+0x34>
	} else {
		PORTC = PORTC & ~(1<<1);
  f4:	28 b1       	in	r18, 0x08	; 8
  f6:	2d 7f       	andi	r18, 0xFD	; 253
  f8:	28 b9       	out	0x08, r18	; 8
	}
	
	if (backward) {
  fa:	99 23       	and	r25, r25
  fc:	24 f4       	brge	.+8      	; 0x106 <set_motor+0x40>
		PORTC = PORTC | (1<<2);
  fe:	88 b1       	in	r24, 0x08	; 8
 100:	84 60       	ori	r24, 0x04	; 4
 102:	88 b9       	out	0x08, r24	; 8
 104:	03 c0       	rjmp	.+6      	; 0x10c <set_motor+0x46>
		} else {
		PORTC = PORTC & ~(1<<2);
 106:	88 b1       	in	r24, 0x08	; 8
 108:	8b 7f       	andi	r24, 0xFB	; 251
 10a:	88 b9       	out	0x08, r24	; 8
	}
	
	// Set duty
	OCR0A = duty;
 10c:	67 bd       	out	0x27, r22	; 39
 10e:	08 95       	ret

00000110 <main>:

// main 
int main(void)
{
	// SETUP
	DDRB = 0xFF;  // Set all PORTB pins as output
 110:	8f ef       	ldi	r24, 0xFF	; 255
 112:	84 b9       	out	0x04, r24	; 4
	PORTB = 0xFF; // Turn off PORTB pins
 114:	85 b9       	out	0x05, r24	; 5
	
	DDRC = 0xFE;     // Set PORTC as output except PC0
 116:	8e ef       	ldi	r24, 0xFE	; 254
 118:	87 b9       	out	0x07, r24	; 7
	DDRD = (1 << 6) | (1 << 5);	 // Set PORTD as output
 11a:	80 e6       	ldi	r24, 0x60	; 96
 11c:	8a b9       	out	0x0a, r24	; 10
	
	// Preset duty cycle
	OCR0A = 0x00;
 11e:	17 bc       	out	0x27, r1	; 39
	TCCR0A = 0b10000011;  // Set up PWM on PD6, Fast PWM, TOP 0xFF
 120:	93 e8       	ldi	r25, 0x83	; 131
 122:	94 bd       	out	0x24, r25	; 36
	TCCR0B = 0b00000011;  // Set 64x prescaler
 124:	93 e0       	ldi	r25, 0x03	; 3
 126:	95 bd       	out	0x25, r25	; 37
	
	// SET UP ANALOG READ
	ADMUX = 0b01100000;  // PC0, LEFT JUSTIFY, USE VREF
 128:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
	PRR = 0x00;  // POWER ON ADC
 12c:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <__TEXT_REGION_LENGTH__+0x7f8064>
	ADCSRA = 0b10000111;  // TURN ON ND PRESCALER
 130:	87 e8       	ldi	r24, 0x87	; 135
 132:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
	
    // MAINLOOP
	
	while(1)
    {
		voltage = read_voltage();
 136:	0e 94 40 00 	call	0x80	; 0x80 <read_voltage>
 13a:	8c 01       	movw	r16, r24
		bin = (voltage / 51);
 13c:	9c 01       	movw	r18, r24
 13e:	a1 ea       	ldi	r26, 0xA1	; 161
 140:	b0 ea       	ldi	r27, 0xA0	; 160
 142:	0e 94 b5 00 	call	0x16a	; 0x16a <__umulhisi3>
 146:	ec 01       	movw	r28, r24
 148:	d6 95       	lsr	r29
 14a:	c7 95       	ror	r28
 14c:	d2 95       	swap	r29
 14e:	c2 95       	swap	r28
 150:	cf 70       	andi	r28, 0x0F	; 15
 152:	cd 27       	eor	r28, r29
 154:	df 70       	andi	r29, 0x0F	; 15
 156:	cd 27       	eor	r28, r29
		set_which_led(bin);
 158:	ce 01       	movw	r24, r28
 15a:	0e 94 4d 00 	call	0x9a	; 0x9a <set_which_led>
		speed = voltage;  // 40 to FF
		set_motor(bin-2, speed);
 15e:	b8 01       	movw	r22, r16
 160:	ce 01       	movw	r24, r28
 162:	02 97       	sbiw	r24, 0x02	; 2
 164:	0e 94 63 00 	call	0xc6	; 0xc6 <set_motor>
 168:	e6 cf       	rjmp	.-52     	; 0x136 <main+0x26>

0000016a <__umulhisi3>:
 16a:	a2 9f       	mul	r26, r18
 16c:	b0 01       	movw	r22, r0
 16e:	b3 9f       	mul	r27, r19
 170:	c0 01       	movw	r24, r0
 172:	a3 9f       	mul	r26, r19
 174:	70 0d       	add	r23, r0
 176:	81 1d       	adc	r24, r1
 178:	11 24       	eor	r1, r1
 17a:	91 1d       	adc	r25, r1
 17c:	b2 9f       	mul	r27, r18
 17e:	70 0d       	add	r23, r0
 180:	81 1d       	adc	r24, r1
 182:	11 24       	eor	r1, r1
 184:	91 1d       	adc	r25, r1
 186:	08 95       	ret

00000188 <_exit>:
 188:	f8 94       	cli

0000018a <__stop_program>:
 18a:	ff cf       	rjmp	.-2      	; 0x18a <__stop_program>
