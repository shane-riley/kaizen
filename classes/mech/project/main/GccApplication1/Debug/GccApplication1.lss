
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000005a  00800100  00000f1c  00000fb0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000f1c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000e  0080015a  0080015a  0000100a  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000100a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001068  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000158  00000000  00000000  000010a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c33  00000000  00000000  00001200  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000cad  00000000  00000000  00002e33  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000fa5  00000000  00000000  00003ae0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000300  00000000  00000000  00004a88  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000069d  00000000  00000000  00004d88  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000d1d  00000000  00000000  00005425  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000118  00000000  00000000  00006142  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 bf 02 	jmp	0x57e	; 0x57e <__vector_1>
   8:	0c 94 d3 02 	jmp	0x5a6	; 0x5a6 <__vector_2>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec e1       	ldi	r30, 0x1C	; 28
  7c:	ff e0       	ldi	r31, 0x0F	; 15
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 35       	cpi	r26, 0x5A	; 90
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	aa e5       	ldi	r26, 0x5A	; 90
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a8 36       	cpi	r26, 0x68	; 104
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 fe 01 	call	0x3fc	; 0x3fc <main>
  9e:	0c 94 8c 07 	jmp	0xf18	; 0xf18 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <init_actions>:
/******************************* External Functions *************************/

// Init actions
void init_actions()
{
	if (!initialized)
  a6:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <initialized>
  aa:	90 91 5d 01 	lds	r25, 0x015D	; 0x80015d <initialized+0x1>
  ae:	89 2b       	or	r24, r25
  b0:	81 f5       	brne	.+96     	; 0x112 <init_actions+0x6c>
	{
		// Set all DDR's as output
		relay_ddr |= (1 << relay_bit);
  b2:	84 b1       	in	r24, 0x04	; 4
  b4:	82 60       	ori	r24, 0x02	; 2
  b6:	84 b9       	out	0x04, r24	; 4
		rot_fw_ddr |= (1 << rot_fw_bit);
  b8:	8a b1       	in	r24, 0x0a	; 10
  ba:	81 60       	ori	r24, 0x01	; 1
  bc:	8a b9       	out	0x0a, r24	; 10
		rot_bw_ddr |= (1 << rot_bw_bit);
  be:	8a b1       	in	r24, 0x0a	; 10
  c0:	82 60       	ori	r24, 0x02	; 2
  c2:	8a b9       	out	0x0a, r24	; 10
		water_1_ddr |= (1 << water_1_bit);
  c4:	8a b1       	in	r24, 0x0a	; 10
  c6:	80 62       	ori	r24, 0x20	; 32
  c8:	8a b9       	out	0x0a, r24	; 10
		water_2_ddr |= (1 << water_2_bit);
  ca:	8a b1       	in	r24, 0x0a	; 10
  cc:	80 64       	ori	r24, 0x40	; 64
  ce:	8a b9       	out	0x0a, r24	; 10
		water_3_ddr |= (1 << water_3_bit);
  d0:	8a b1       	in	r24, 0x0a	; 10
  d2:	80 68       	ori	r24, 0x80	; 128
  d4:	8a b9       	out	0x0a, r24	; 10
		water_4_ddr |= (1 << water_4_bit);
  d6:	84 b1       	in	r24, 0x04	; 4
  d8:	81 60       	ori	r24, 0x01	; 1
  da:	84 b9       	out	0x04, r24	; 4

		// Set all pins to low
		relay_port &= ~(1 << relay_bit);
  dc:	85 b1       	in	r24, 0x05	; 5
  de:	8d 7f       	andi	r24, 0xFD	; 253
  e0:	85 b9       	out	0x05, r24	; 5
		rot_fw_port &= ~(1 << rot_fw_bit);
  e2:	8b b1       	in	r24, 0x0b	; 11
  e4:	8e 7f       	andi	r24, 0xFE	; 254
  e6:	8b b9       	out	0x0b, r24	; 11
		rot_bw_port &= ~(1 << rot_bw_bit);
  e8:	8b b1       	in	r24, 0x0b	; 11
  ea:	8d 7f       	andi	r24, 0xFD	; 253
  ec:	8b b9       	out	0x0b, r24	; 11
		water_1_port &= ~(1 << water_1_bit);
  ee:	8b b1       	in	r24, 0x0b	; 11
  f0:	8f 7d       	andi	r24, 0xDF	; 223
  f2:	8b b9       	out	0x0b, r24	; 11
		water_2_port &= ~(1 << water_2_bit);
  f4:	8b b1       	in	r24, 0x0b	; 11
  f6:	8f 7b       	andi	r24, 0xBF	; 191
  f8:	8b b9       	out	0x0b, r24	; 11
		water_3_port &= ~(1 << water_3_bit);
  fa:	8b b1       	in	r24, 0x0b	; 11
  fc:	8f 77       	andi	r24, 0x7F	; 127
  fe:	8b b9       	out	0x0b, r24	; 11
		water_4_port &= ~(1 << water_4_bit);
 100:	85 b1       	in	r24, 0x05	; 5
 102:	8e 7f       	andi	r24, 0xFE	; 254
 104:	85 b9       	out	0x05, r24	; 5

		// No PWM on the brushed motor
		// No PWM on the stepper motor

		// No duplication
		initialized = 1;
 106:	81 e0       	ldi	r24, 0x01	; 1
 108:	90 e0       	ldi	r25, 0x00	; 0
 10a:	90 93 5d 01 	sts	0x015D, r25	; 0x80015d <initialized+0x1>
 10e:	80 93 5c 01 	sts	0x015C, r24	; 0x80015c <initialized>
 112:	08 95       	ret

00000114 <rotate_plant>:
// Rotate plant (synchronous)
void rotate_plant()
{

	// Check state
	if (rotation_state == 0)
 114:	80 91 5a 01 	lds	r24, 0x015A	; 0x80015a <__data_end>
 118:	90 91 5b 01 	lds	r25, 0x015B	; 0x80015b <__data_end+0x1>
 11c:	89 2b       	or	r24, r25
 11e:	b1 f4       	brne	.+44     	; 0x14c <rotate_plant+0x38>
	{

		// Go forward
		rot_fw_port |= (1 << rot_fw_bit);
 120:	8b b1       	in	r24, 0x0b	; 11
 122:	81 60       	ori	r24, 0x01	; 1
 124:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 126:	2f ef       	ldi	r18, 0xFF	; 255
 128:	8d e2       	ldi	r24, 0x2D	; 45
 12a:	92 e2       	ldi	r25, 0x22	; 34
 12c:	21 50       	subi	r18, 0x01	; 1
 12e:	80 40       	sbci	r24, 0x00	; 0
 130:	90 40       	sbci	r25, 0x00	; 0
 132:	e1 f7       	brne	.-8      	; 0x12c <rotate_plant+0x18>
 134:	00 c0       	rjmp	.+0      	; 0x136 <rotate_plant+0x22>
 136:	00 00       	nop

		// Wait
		_delay_ms(rot_time_ms);

		// Stop
		rot_fw_port &= ~(1 << rot_fw_bit);
 138:	8b b1       	in	r24, 0x0b	; 11
 13a:	8e 7f       	andi	r24, 0xFE	; 254
 13c:	8b b9       	out	0x0b, r24	; 11

		// Switch state
		rotation_state = 1;
 13e:	81 e0       	ldi	r24, 0x01	; 1
 140:	90 e0       	ldi	r25, 0x00	; 0
 142:	90 93 5b 01 	sts	0x015B, r25	; 0x80015b <__data_end+0x1>
 146:	80 93 5a 01 	sts	0x015A, r24	; 0x80015a <__data_end>
 14a:	08 95       	ret
	}
	else
	{
		// Go backward
		rot_bw_port |= (1 << rot_bw_bit);
 14c:	8b b1       	in	r24, 0x0b	; 11
 14e:	82 60       	ori	r24, 0x02	; 2
 150:	8b b9       	out	0x0b, r24	; 11
 152:	2f ef       	ldi	r18, 0xFF	; 255
 154:	8d e2       	ldi	r24, 0x2D	; 45
 156:	92 e2       	ldi	r25, 0x22	; 34
 158:	21 50       	subi	r18, 0x01	; 1
 15a:	80 40       	sbci	r24, 0x00	; 0
 15c:	90 40       	sbci	r25, 0x00	; 0
 15e:	e1 f7       	brne	.-8      	; 0x158 <rotate_plant+0x44>
 160:	00 c0       	rjmp	.+0      	; 0x162 <rotate_plant+0x4e>
 162:	00 00       	nop

		// Wait
		_delay_ms(rot_time_ms);

		// Stop
		rot_bw_port &= ~(1 << rot_bw_bit);
 164:	8b b1       	in	r24, 0x0b	; 11
 166:	8d 7f       	andi	r24, 0xFD	; 253
 168:	8b b9       	out	0x0b, r24	; 11

		// Switch state
		rotation_state = 0;
 16a:	10 92 5b 01 	sts	0x015B, r1	; 0x80015b <__data_end+0x1>
 16e:	10 92 5a 01 	sts	0x015A, r1	; 0x80015a <__data_end>
 172:	08 95       	ret

00000174 <turn_on_lamp>:

// Turn on lamp
void turn_on_lamp()
{
	// Make relay port high
	relay_port |= (1 << relay_bit);
 174:	85 b1       	in	r24, 0x05	; 5
 176:	82 60       	ori	r24, 0x02	; 2
 178:	85 b9       	out	0x05, r24	; 5
 17a:	08 95       	ret

0000017c <turn_off_lamp>:

// Turn off lamp
void turn_off_lamp()
{
	// Make relay port low
	relay_port &= ~(1 << relay_bit);
 17c:	85 b1       	in	r24, 0x05	; 5
 17e:	8d 7f       	andi	r24, 0xFD	; 253
 180:	85 b9       	out	0x05, r24	; 5
 182:	08 95       	ret

00000184 <step_up>:
/******************************* End of External Functions ******************/

// Step functions
void step_up()
{
	switch (stepper_phase)
 184:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 188:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 18c:	82 30       	cpi	r24, 0x02	; 2
 18e:	91 05       	cpc	r25, r1
 190:	e9 f0       	breq	.+58     	; 0x1cc <step_up+0x48>
 192:	1c f4       	brge	.+6      	; 0x19a <step_up+0x16>
 194:	01 97       	sbiw	r24, 0x01	; 1
 196:	39 f0       	breq	.+14     	; 0x1a6 <step_up+0x22>
 198:	08 95       	ret
 19a:	83 30       	cpi	r24, 0x03	; 3
 19c:	91 05       	cpc	r25, r1
 19e:	49 f1       	breq	.+82     	; 0x1f2 <step_up+0x6e>
 1a0:	04 97       	sbiw	r24, 0x04	; 4
 1a2:	d1 f1       	breq	.+116    	; 0x218 <step_up+0x94>
 1a4:	08 95       	ret
	{

	case 1:
		// Set bit 2
		water_2_port |= (1 << water_2_bit);
 1a6:	8b b1       	in	r24, 0x0b	; 11
 1a8:	80 64       	ori	r24, 0x40	; 64
 1aa:	8b b9       	out	0x0b, r24	; 11
		// Clear bits 134
		water_1_port &= ~(1 << water_1_bit);
 1ac:	8b b1       	in	r24, 0x0b	; 11
 1ae:	8f 7d       	andi	r24, 0xDF	; 223
 1b0:	8b b9       	out	0x0b, r24	; 11
		water_3_port &= ~(1 << water_3_bit);
 1b2:	8b b1       	in	r24, 0x0b	; 11
 1b4:	8f 77       	andi	r24, 0x7F	; 127
 1b6:	8b b9       	out	0x0b, r24	; 11
		water_4_port &= ~(1 << water_4_bit);
 1b8:	85 b1       	in	r24, 0x05	; 5
 1ba:	8e 7f       	andi	r24, 0xFE	; 254
 1bc:	85 b9       	out	0x05, r24	; 5
		stepper_phase = 2;
 1be:	82 e0       	ldi	r24, 0x02	; 2
 1c0:	90 e0       	ldi	r25, 0x00	; 0
 1c2:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 1c6:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		break;
 1ca:	08 95       	ret

	case 2:
		// Set bit 4
		water_4_port |= (1 << water_4_bit);
 1cc:	85 b1       	in	r24, 0x05	; 5
 1ce:	81 60       	ori	r24, 0x01	; 1
 1d0:	85 b9       	out	0x05, r24	; 5
		// Clear bits 123
		water_1_port &= ~(1 << water_1_bit);
 1d2:	8b b1       	in	r24, 0x0b	; 11
 1d4:	8f 7d       	andi	r24, 0xDF	; 223
 1d6:	8b b9       	out	0x0b, r24	; 11
		water_2_port &= ~(1 << water_2_bit);
 1d8:	8b b1       	in	r24, 0x0b	; 11
 1da:	8f 7b       	andi	r24, 0xBF	; 191
 1dc:	8b b9       	out	0x0b, r24	; 11
		water_3_port &= ~(1 << water_3_bit);
 1de:	8b b1       	in	r24, 0x0b	; 11
 1e0:	8f 77       	andi	r24, 0x7F	; 127
 1e2:	8b b9       	out	0x0b, r24	; 11
		stepper_phase = 3;
 1e4:	83 e0       	ldi	r24, 0x03	; 3
 1e6:	90 e0       	ldi	r25, 0x00	; 0
 1e8:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 1ec:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		break;
 1f0:	08 95       	ret

	case 3:
		// Set bit 1
		water_1_port |= (1 << water_1_bit);
 1f2:	8b b1       	in	r24, 0x0b	; 11
 1f4:	80 62       	ori	r24, 0x20	; 32
 1f6:	8b b9       	out	0x0b, r24	; 11
		// Clear bits 234
		water_2_port &= ~(1 << water_2_bit);
 1f8:	8b b1       	in	r24, 0x0b	; 11
 1fa:	8f 7b       	andi	r24, 0xBF	; 191
 1fc:	8b b9       	out	0x0b, r24	; 11
		water_3_port &= ~(1 << water_3_bit);
 1fe:	8b b1       	in	r24, 0x0b	; 11
 200:	8f 77       	andi	r24, 0x7F	; 127
 202:	8b b9       	out	0x0b, r24	; 11
		water_4_port &= ~(1 << water_4_bit);
 204:	85 b1       	in	r24, 0x05	; 5
 206:	8e 7f       	andi	r24, 0xFE	; 254
 208:	85 b9       	out	0x05, r24	; 5
		stepper_phase = 4;
 20a:	84 e0       	ldi	r24, 0x04	; 4
 20c:	90 e0       	ldi	r25, 0x00	; 0
 20e:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 212:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		break;
 216:	08 95       	ret

	case 4:
		// Set bit 3
		water_3_port |= (1 << water_3_bit);
 218:	8b b1       	in	r24, 0x0b	; 11
 21a:	80 68       	ori	r24, 0x80	; 128
 21c:	8b b9       	out	0x0b, r24	; 11
		// Clear bits 124
		water_1_port &= ~(1 << water_1_bit);
 21e:	8b b1       	in	r24, 0x0b	; 11
 220:	8f 7d       	andi	r24, 0xDF	; 223
 222:	8b b9       	out	0x0b, r24	; 11
		water_2_port &= ~(1 << water_2_bit);
 224:	8b b1       	in	r24, 0x0b	; 11
 226:	8f 7b       	andi	r24, 0xBF	; 191
 228:	8b b9       	out	0x0b, r24	; 11
		water_4_port &= ~(1 << water_4_bit);
 22a:	85 b1       	in	r24, 0x05	; 5
 22c:	8e 7f       	andi	r24, 0xFE	; 254
 22e:	85 b9       	out	0x05, r24	; 5
		stepper_phase = 1;
 230:	81 e0       	ldi	r24, 0x01	; 1
 232:	90 e0       	ldi	r25, 0x00	; 0
 234:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 238:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 23c:	08 95       	ret

0000023e <step_down>:
	}
}

void step_down()
{
	switch (stepper_phase)
 23e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 242:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 246:	82 30       	cpi	r24, 0x02	; 2
 248:	91 05       	cpc	r25, r1
 24a:	e9 f0       	breq	.+58     	; 0x286 <step_down+0x48>
 24c:	1c f4       	brge	.+6      	; 0x254 <step_down+0x16>
 24e:	01 97       	sbiw	r24, 0x01	; 1
 250:	39 f0       	breq	.+14     	; 0x260 <step_down+0x22>
 252:	08 95       	ret
 254:	83 30       	cpi	r24, 0x03	; 3
 256:	91 05       	cpc	r25, r1
 258:	49 f1       	breq	.+82     	; 0x2ac <step_down+0x6e>
 25a:	04 97       	sbiw	r24, 0x04	; 4
 25c:	d1 f1       	breq	.+116    	; 0x2d2 <step_down+0x94>
 25e:	08 95       	ret
	{

		case 1:
		// Set bit 1
		water_1_port |= (1 << water_1_bit);
 260:	8b b1       	in	r24, 0x0b	; 11
 262:	80 62       	ori	r24, 0x20	; 32
 264:	8b b9       	out	0x0b, r24	; 11
		// Clear bits 234
		water_2_port &= ~(1 << water_2_bit);
 266:	8b b1       	in	r24, 0x0b	; 11
 268:	8f 7b       	andi	r24, 0xBF	; 191
 26a:	8b b9       	out	0x0b, r24	; 11
		water_3_port &= ~(1 << water_3_bit);
 26c:	8b b1       	in	r24, 0x0b	; 11
 26e:	8f 77       	andi	r24, 0x7F	; 127
 270:	8b b9       	out	0x0b, r24	; 11
		water_4_port &= ~(1 << water_4_bit);
 272:	85 b1       	in	r24, 0x05	; 5
 274:	8e 7f       	andi	r24, 0xFE	; 254
 276:	85 b9       	out	0x05, r24	; 5
		stepper_phase = 4;
 278:	84 e0       	ldi	r24, 0x04	; 4
 27a:	90 e0       	ldi	r25, 0x00	; 0
 27c:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 280:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		break;
 284:	08 95       	ret

		case 2:
		// Set bit 3
		water_3_port |= (1 << water_3_bit);
 286:	8b b1       	in	r24, 0x0b	; 11
 288:	80 68       	ori	r24, 0x80	; 128
 28a:	8b b9       	out	0x0b, r24	; 11
		// Clear bits 124
		water_1_port &= ~(1 << water_1_bit);
 28c:	8b b1       	in	r24, 0x0b	; 11
 28e:	8f 7d       	andi	r24, 0xDF	; 223
 290:	8b b9       	out	0x0b, r24	; 11
		water_2_port &= ~(1 << water_2_bit);
 292:	8b b1       	in	r24, 0x0b	; 11
 294:	8f 7b       	andi	r24, 0xBF	; 191
 296:	8b b9       	out	0x0b, r24	; 11
		water_4_port &= ~(1 << water_4_bit);
 298:	85 b1       	in	r24, 0x05	; 5
 29a:	8e 7f       	andi	r24, 0xFE	; 254
 29c:	85 b9       	out	0x05, r24	; 5
		stepper_phase = 1;
 29e:	81 e0       	ldi	r24, 0x01	; 1
 2a0:	90 e0       	ldi	r25, 0x00	; 0
 2a2:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 2a6:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		break;
 2aa:	08 95       	ret

		case 3:
		// Set bit 2
		water_2_port |= (1 << water_2_bit);
 2ac:	8b b1       	in	r24, 0x0b	; 11
 2ae:	80 64       	ori	r24, 0x40	; 64
 2b0:	8b b9       	out	0x0b, r24	; 11
		// Clear bits 134
		water_1_port &= ~(1 << water_1_bit);
 2b2:	8b b1       	in	r24, 0x0b	; 11
 2b4:	8f 7d       	andi	r24, 0xDF	; 223
 2b6:	8b b9       	out	0x0b, r24	; 11
		water_3_port &= ~(1 << water_3_bit);
 2b8:	8b b1       	in	r24, 0x0b	; 11
 2ba:	8f 77       	andi	r24, 0x7F	; 127
 2bc:	8b b9       	out	0x0b, r24	; 11
		water_4_port &= ~(1 << water_4_bit);
 2be:	85 b1       	in	r24, 0x05	; 5
 2c0:	8e 7f       	andi	r24, 0xFE	; 254
 2c2:	85 b9       	out	0x05, r24	; 5
		stepper_phase = 2;
 2c4:	82 e0       	ldi	r24, 0x02	; 2
 2c6:	90 e0       	ldi	r25, 0x00	; 0
 2c8:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 2cc:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		break;
 2d0:	08 95       	ret

		case 4:
		// Set bit 4
		water_4_port |= (1 << water_4_bit);
 2d2:	85 b1       	in	r24, 0x05	; 5
 2d4:	81 60       	ori	r24, 0x01	; 1
 2d6:	85 b9       	out	0x05, r24	; 5
		// Clear bits 123
		water_1_port &= ~(1 << water_1_bit);
 2d8:	8b b1       	in	r24, 0x0b	; 11
 2da:	8f 7d       	andi	r24, 0xDF	; 223
 2dc:	8b b9       	out	0x0b, r24	; 11
		water_2_port &= ~(1 << water_2_bit);
 2de:	8b b1       	in	r24, 0x0b	; 11
 2e0:	8f 7b       	andi	r24, 0xBF	; 191
 2e2:	8b b9       	out	0x0b, r24	; 11
		water_3_port &= ~(1 << water_3_bit);
 2e4:	8b b1       	in	r24, 0x0b	; 11
 2e6:	8f 77       	andi	r24, 0x7F	; 127
 2e8:	8b b9       	out	0x0b, r24	; 11
		stepper_phase = 3;
 2ea:	83 e0       	ldi	r24, 0x03	; 3
 2ec:	90 e0       	ldi	r25, 0x00	; 0
 2ee:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 2f2:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 2f6:	08 95       	ret

000002f8 <water_plant>:
	relay_port &= ~(1 << relay_bit);
}

// Water plant (synchronous)
void water_plant()
{
 2f8:	cf 93       	push	r28
 2fa:	df 93       	push	r29

	// Loop through steps
	for (int i = 0; i < (steps_per_rot * n_turns_water); i++)
 2fc:	c0 e0       	ldi	r28, 0x00	; 0
 2fe:	d0 e0       	ldi	r29, 0x00	; 0
 300:	09 c0       	rjmp	.+18     	; 0x314 <water_plant+0x1c>
	{
		// Step
		step_down();
 302:	0e 94 1f 01 	call	0x23e	; 0x23e <step_down>
 306:	8f e1       	ldi	r24, 0x1F	; 31
 308:	9b ec       	ldi	r25, 0xCB	; 203
 30a:	01 97       	sbiw	r24, 0x01	; 1
 30c:	f1 f7       	brne	.-4      	; 0x30a <water_plant+0x12>
 30e:	00 c0       	rjmp	.+0      	; 0x310 <water_plant+0x18>
 310:	00 00       	nop
// Water plant (synchronous)
void water_plant()
{

	// Loop through steps
	for (int i = 0; i < (steps_per_rot * n_turns_water); i++)
 312:	21 96       	adiw	r28, 0x01	; 1
 314:	c0 39       	cpi	r28, 0x90	; 144
 316:	d1 05       	cpc	r29, r1
 318:	a4 f3       	brlt	.-24     	; 0x302 <water_plant+0xa>
 31a:	9f ef       	ldi	r25, 0xFF	; 255
 31c:	23 ed       	ldi	r18, 0xD3	; 211
 31e:	80 e3       	ldi	r24, 0x30	; 48
 320:	91 50       	subi	r25, 0x01	; 1
 322:	20 40       	sbci	r18, 0x00	; 0
 324:	80 40       	sbci	r24, 0x00	; 0
 326:	e1 f7       	brne	.-8      	; 0x320 <water_plant+0x28>
 328:	00 c0       	rjmp	.+0      	; 0x32a <water_plant+0x32>
 32a:	00 00       	nop
		_delay_ms(per_step_ms);
	}
	
	_delay_ms(water_wait_ms);
	
	for (int i = 0; i < (steps_per_rot * n_turns_water); i++)
 32c:	c0 e0       	ldi	r28, 0x00	; 0
 32e:	d0 e0       	ldi	r29, 0x00	; 0
 330:	09 c0       	rjmp	.+18     	; 0x344 <water_plant+0x4c>
	{
		// Step
		step_up();
 332:	0e 94 c2 00 	call	0x184	; 0x184 <step_up>
 336:	8f e1       	ldi	r24, 0x1F	; 31
 338:	9b ec       	ldi	r25, 0xCB	; 203
 33a:	01 97       	sbiw	r24, 0x01	; 1
 33c:	f1 f7       	brne	.-4      	; 0x33a <water_plant+0x42>
 33e:	00 c0       	rjmp	.+0      	; 0x340 <water_plant+0x48>
 340:	00 00       	nop
		_delay_ms(per_step_ms);
	}
	
	_delay_ms(water_wait_ms);
	
	for (int i = 0; i < (steps_per_rot * n_turns_water); i++)
 342:	21 96       	adiw	r28, 0x01	; 1
 344:	c0 39       	cpi	r28, 0x90	; 144
 346:	d1 05       	cpc	r29, r1
 348:	a4 f3       	brlt	.-24     	; 0x332 <water_plant+0x3a>
		// Step
		step_up();
		// Wait
		_delay_ms(per_step_ms);
	}
}
 34a:	df 91       	pop	r29
 34c:	cf 91       	pop	r28
 34e:	08 95       	ret

00000350 <init_all>:
}

// Init everything
void init_all()
{
	init_actions();
 350:	0e 94 53 00 	call	0xa6	; 0xa6 <init_actions>
	init_screen();
 354:	0e 94 ce 03 	call	0x79c	; 0x79c <init_screen>
	init_sensors();
 358:	0e 94 6d 04 	call	0x8da	; 0x8da <init_sensors>
	init_buttons();
 35c:	0e 94 38 04 	call	0x870	; 0x870 <init_buttons>
 360:	08 95       	ret

00000362 <display_values>:
	write_to_screen(lamp_line, water_line);
}

// Display values
void display_values(int light, int moist, int rocker)
{
 362:	0f 93       	push	r16
 364:	1f 93       	push	r17
 366:	cf 93       	push	r28
 368:	df 93       	push	r29
 36a:	cd b7       	in	r28, 0x3d	; 61
 36c:	de b7       	in	r29, 0x3e	; 62
 36e:	ab 97       	sbiw	r28, 0x2b	; 43
 370:	0f b6       	in	r0, 0x3f	; 63
 372:	f8 94       	cli
 374:	de bf       	out	0x3e, r29	; 62
 376:	0f be       	out	0x3f, r0	; 63
 378:	cd bf       	out	0x3d, r28	; 61

	// Initialize
	char string_one[] = "Lit/Moist/Thresh";
 37a:	21 e1       	ldi	r18, 0x11	; 17
 37c:	eb e0       	ldi	r30, 0x0B	; 11
 37e:	f1 e0       	ldi	r31, 0x01	; 1
 380:	de 01       	movw	r26, r28
 382:	11 96       	adiw	r26, 0x01	; 1
 384:	01 90       	ld	r0, Z+
 386:	0d 92       	st	X+, r0
 388:	2a 95       	dec	r18
 38a:	e1 f7       	brne	.-8      	; 0x384 <display_values+0x22>
	char string_template_two[] = "%d/%d/%s";
 38c:	29 e0       	ldi	r18, 0x09	; 9
 38e:	ec e1       	ldi	r30, 0x1C	; 28
 390:	f1 e0       	ldi	r31, 0x01	; 1
 392:	de 01       	movw	r26, r28
 394:	52 96       	adiw	r26, 0x12	; 18
 396:	01 90       	ld	r0, Z+
 398:	0d 92       	st	X+, r0
 39a:	2a 95       	dec	r18
 39c:	e1 f7       	brne	.-8      	; 0x396 <display_values+0x34>
	char string_two[17];

	// Print onto lines
	sprintf(string_two, string_template_two, light, moist, rocker ? "HIGH" : "LOW");
 39e:	45 2b       	or	r20, r21
 3a0:	19 f0       	breq	.+6      	; 0x3a8 <display_values+0x46>
 3a2:	22 e0       	ldi	r18, 0x02	; 2
 3a4:	31 e0       	ldi	r19, 0x01	; 1
 3a6:	02 c0       	rjmp	.+4      	; 0x3ac <display_values+0x4a>
 3a8:	27 e0       	ldi	r18, 0x07	; 7
 3aa:	31 e0       	ldi	r19, 0x01	; 1
 3ac:	3f 93       	push	r19
 3ae:	2f 93       	push	r18
 3b0:	7f 93       	push	r23
 3b2:	6f 93       	push	r22
 3b4:	9f 93       	push	r25
 3b6:	8f 93       	push	r24
 3b8:	ce 01       	movw	r24, r28
 3ba:	42 96       	adiw	r24, 0x12	; 18
 3bc:	9f 93       	push	r25
 3be:	8f 93       	push	r24
 3c0:	8e 01       	movw	r16, r28
 3c2:	05 5e       	subi	r16, 0xE5	; 229
 3c4:	1f 4f       	sbci	r17, 0xFF	; 255
 3c6:	1f 93       	push	r17
 3c8:	0f 93       	push	r16
 3ca:	0e 94 a2 04 	call	0x944	; 0x944 <sprintf>
	clear_screen();
 3ce:	0e 94 6f 03 	call	0x6de	; 0x6de <clear_screen>
	write_to_screen(string_one, string_two);
 3d2:	b8 01       	movw	r22, r16
 3d4:	ce 01       	movw	r24, r28
 3d6:	01 96       	adiw	r24, 0x01	; 1
 3d8:	0e 94 19 04 	call	0x832	; 0x832 <write_to_screen>
}
 3dc:	0f b6       	in	r0, 0x3f	; 63
 3de:	f8 94       	cli
 3e0:	de bf       	out	0x3e, r29	; 62
 3e2:	0f be       	out	0x3f, r0	; 63
 3e4:	cd bf       	out	0x3d, r28	; 61
 3e6:	ab 96       	adiw	r28, 0x2b	; 43
 3e8:	0f b6       	in	r0, 0x3f	; 63
 3ea:	f8 94       	cli
 3ec:	de bf       	out	0x3e, r29	; 62
 3ee:	0f be       	out	0x3f, r0	; 63
 3f0:	cd bf       	out	0x3d, r28	; 61
 3f2:	df 91       	pop	r29
 3f4:	cf 91       	pop	r28
 3f6:	1f 91       	pop	r17
 3f8:	0f 91       	pop	r16
 3fa:	08 95       	ret

000003fc <main>:

	// Run in test mode
	//test_and_hang();

	// 	Setup
	init_all();
 3fc:	0e 94 a8 01 	call	0x350	; 0x350 <init_all>
	int light;
	long int moist;
	int water_threshold;
	int rocker;
	int lamp_cycles = 0;
	int rot_cycles = NUM_CYCLES_UNTIL_ROTATE;
 400:	0f 2e       	mov	r0, r31
 402:	f4 e1       	ldi	r31, 0x14	; 20
 404:	ef 2e       	mov	r14, r31
 406:	f1 2c       	mov	r15, r1
 408:	f0 2d       	mov	r31, r0

	int light;
	long int moist;
	int water_threshold;
	int rocker;
	int lamp_cycles = 0;
 40a:	00 e0       	ldi	r16, 0x00	; 0
 40c:	10 e0       	ldi	r17, 0x00	; 0
	int rot_cycles = NUM_CYCLES_UNTIL_ROTATE;
	while (1)
	{

		// Query sensors
		rocker = read_rocker();
 40e:	0e 94 51 04 	call	0x8a2	; 0x8a2 <read_rocker>
 412:	5c 01       	movw	r10, r24
		light = read_light();
 414:	0e 94 90 04 	call	0x920	; 0x920 <read_light>
 418:	6c 01       	movw	r12, r24
		moist = read_moist();
 41a:	0e 94 97 04 	call	0x92e	; 0x92e <read_moist>
 41e:	2b 01       	movw	r4, r22
 420:	3c 01       	movw	r6, r24

		// Adjust threshold
		water_threshold = rocker ? WATER_THRESHOLD_HIGH : WATER_THRESHOLD_LOW;
 422:	a1 14       	cp	r10, r1
 424:	b1 04       	cpc	r11, r1
 426:	19 f0       	breq	.+6      	; 0x42e <__EEPROM_REGION_LENGTH__+0x2e>
 428:	c8 ec       	ldi	r28, 0xC8	; 200
 42a:	d0 e0       	ldi	r29, 0x00	; 0
 42c:	02 c0       	rjmp	.+4      	; 0x432 <__EEPROM_REGION_LENGTH__+0x32>
 42e:	c4 e6       	ldi	r28, 0x64	; 100
 430:	d0 e0       	ldi	r29, 0x00	; 0

		// Display values
		display_values(light, moist, rocker);
 432:	a5 01       	movw	r20, r10
 434:	b2 01       	movw	r22, r4
 436:	c6 01       	movw	r24, r12
 438:	0e 94 b1 01 	call	0x362	; 0x362 <display_values>

		// Raise flags if threshold
		if (light < LIGHT_THRESHOLD)
 43c:	29 e1       	ldi	r18, 0x19	; 25
 43e:	c2 16       	cp	r12, r18
 440:	d1 04       	cpc	r13, r1
 442:	34 f4       	brge	.+12     	; 0x450 <__EEPROM_REGION_LENGTH__+0x50>
		{
			lamp_flag = 1;
 444:	81 e0       	ldi	r24, 0x01	; 1
 446:	90 e0       	ldi	r25, 0x00	; 0
 448:	90 93 61 01 	sts	0x0161, r25	; 0x800161 <lamp_flag+0x1>
 44c:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <lamp_flag>
		}
		if (moist < water_threshold)
 450:	ce 01       	movw	r24, r28
 452:	dd 0f       	add	r29, r29
 454:	aa 0b       	sbc	r26, r26
 456:	bb 0b       	sbc	r27, r27
 458:	48 16       	cp	r4, r24
 45a:	59 06       	cpc	r5, r25
 45c:	6a 06       	cpc	r6, r26
 45e:	7b 06       	cpc	r7, r27
 460:	34 f4       	brge	.+12     	; 0x46e <__EEPROM_REGION_LENGTH__+0x6e>
		{
			water_flag = 1;
 462:	81 e0       	ldi	r24, 0x01	; 1
 464:	90 e0       	ldi	r25, 0x00	; 0
 466:	90 93 5f 01 	sts	0x015F, r25	; 0x80015f <water_flag+0x1>
 46a:	80 93 5e 01 	sts	0x015E, r24	; 0x80015e <water_flag>
		}

		// Decrement lamp and rot cycles
		if (lamp_cycles > 0 && lamp_cycles <= NUM_CYCLES_UNTIL_LAMP_OFF)
 46e:	c8 01       	movw	r24, r16
 470:	01 97       	sbiw	r24, 0x01	; 1
 472:	84 31       	cpi	r24, 0x14	; 20
 474:	91 05       	cpc	r25, r1
 476:	08 f4       	brcc	.+2      	; 0x47a <__EEPROM_REGION_LENGTH__+0x7a>
		{
			lamp_cycles--;
 478:	8c 01       	movw	r16, r24
		}
		if (rot_cycles > 0)
 47a:	1e 14       	cp	r1, r14
 47c:	1f 04       	cpc	r1, r15
 47e:	1c f4       	brge	.+6      	; 0x486 <__EEPROM_REGION_LENGTH__+0x86>
		{
			rot_cycles--;
 480:	81 e0       	ldi	r24, 0x01	; 1
 482:	e8 1a       	sub	r14, r24
 484:	f1 08       	sbc	r15, r1
		}

		// Turn on lamp
		if (lamp_flag && lamp_cycles == NUM_CYCLES_UNTIL_LAMP_OFF + 1)
 486:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <lamp_flag>
 48a:	90 91 61 01 	lds	r25, 0x0161	; 0x800161 <lamp_flag+0x1>
 48e:	89 2b       	or	r24, r25
 490:	29 f1       	breq	.+74     	; 0x4dc <__EEPROM_REGION_LENGTH__+0xdc>
 492:	05 31       	cpi	r16, 0x15	; 21
 494:	11 05       	cpc	r17, r1
 496:	11 f5       	brne	.+68     	; 0x4dc <__EEPROM_REGION_LENGTH__+0xdc>
		{
			lamp_flag = 0;
 498:	10 92 61 01 	sts	0x0161, r1	; 0x800161 <lamp_flag+0x1>
 49c:	10 92 60 01 	sts	0x0160, r1	; 0x800160 <lamp_flag>
			clear_screen();
 4a0:	0e 94 6f 03 	call	0x6de	; 0x6de <clear_screen>
			write_to_screen("Turning on...", "LAMP");
 4a4:	65 e2       	ldi	r22, 0x25	; 37
 4a6:	71 e0       	ldi	r23, 0x01	; 1
 4a8:	8a e2       	ldi	r24, 0x2A	; 42
 4aa:	91 e0       	ldi	r25, 0x01	; 1
 4ac:	0e 94 19 04 	call	0x832	; 0x832 <write_to_screen>
 4b0:	9f ef       	ldi	r25, 0xFF	; 255
 4b2:	23 ed       	ldi	r18, 0xD3	; 211
 4b4:	80 e3       	ldi	r24, 0x30	; 48
 4b6:	91 50       	subi	r25, 0x01	; 1
 4b8:	20 40       	sbci	r18, 0x00	; 0
 4ba:	80 40       	sbci	r24, 0x00	; 0
 4bc:	e1 f7       	brne	.-8      	; 0x4b6 <__EEPROM_REGION_LENGTH__+0xb6>
 4be:	00 c0       	rjmp	.+0      	; 0x4c0 <__EEPROM_REGION_LENGTH__+0xc0>
 4c0:	00 00       	nop
			_delay_ms(TASTEFUL_DELAY_ms);
			turn_on_lamp();
 4c2:	0e 94 ba 00 	call	0x174	; 0x174 <turn_on_lamp>
 4c6:	9f ef       	ldi	r25, 0xFF	; 255
 4c8:	23 ed       	ldi	r18, 0xD3	; 211
 4ca:	80 e3       	ldi	r24, 0x30	; 48
 4cc:	91 50       	subi	r25, 0x01	; 1
 4ce:	20 40       	sbci	r18, 0x00	; 0
 4d0:	80 40       	sbci	r24, 0x00	; 0
 4d2:	e1 f7       	brne	.-8      	; 0x4cc <__EEPROM_REGION_LENGTH__+0xcc>
 4d4:	00 c0       	rjmp	.+0      	; 0x4d6 <__EEPROM_REGION_LENGTH__+0xd6>
 4d6:	00 00       	nop
			_delay_ms(TASTEFUL_DELAY_ms);
			lamp_cycles--;
 4d8:	01 50       	subi	r16, 0x01	; 1
 4da:	11 09       	sbc	r17, r1
		}

		// Turn on water
		if (water_flag)
 4dc:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <water_flag>
 4e0:	90 91 5f 01 	lds	r25, 0x015F	; 0x80015f <water_flag+0x1>
 4e4:	89 2b       	or	r24, r25
 4e6:	71 f0       	breq	.+28     	; 0x504 <__EEPROM_REGION_LENGTH__+0x104>
		{
			water_flag = 0;
 4e8:	10 92 5f 01 	sts	0x015F, r1	; 0x80015f <water_flag+0x1>
 4ec:	10 92 5e 01 	sts	0x015E, r1	; 0x80015e <water_flag>
			clear_screen();
 4f0:	0e 94 6f 03 	call	0x6de	; 0x6de <clear_screen>
			write_to_screen("Turning on...", "WATER");
 4f4:	68 e3       	ldi	r22, 0x38	; 56
 4f6:	71 e0       	ldi	r23, 0x01	; 1
 4f8:	8a e2       	ldi	r24, 0x2A	; 42
 4fa:	91 e0       	ldi	r25, 0x01	; 1
 4fc:	0e 94 19 04 	call	0x832	; 0x832 <write_to_screen>
			water_plant();
 500:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <water_plant>
		}

		// Turn off lamp
		if (lamp_cycles == 0)
 504:	01 15       	cp	r16, r1
 506:	11 05       	cpc	r17, r1
 508:	f1 f4       	brne	.+60     	; 0x546 <__EEPROM_REGION_LENGTH__+0x146>
		{
			clear_screen();
 50a:	0e 94 6f 03 	call	0x6de	; 0x6de <clear_screen>
			write_to_screen("Turning off...", "LAMP");
 50e:	65 e2       	ldi	r22, 0x25	; 37
 510:	71 e0       	ldi	r23, 0x01	; 1
 512:	8e e3       	ldi	r24, 0x3E	; 62
 514:	91 e0       	ldi	r25, 0x01	; 1
 516:	0e 94 19 04 	call	0x832	; 0x832 <write_to_screen>
 51a:	9f ef       	ldi	r25, 0xFF	; 255
 51c:	23 ed       	ldi	r18, 0xD3	; 211
 51e:	80 e3       	ldi	r24, 0x30	; 48
 520:	91 50       	subi	r25, 0x01	; 1
 522:	20 40       	sbci	r18, 0x00	; 0
 524:	80 40       	sbci	r24, 0x00	; 0
 526:	e1 f7       	brne	.-8      	; 0x520 <__EEPROM_REGION_LENGTH__+0x120>
 528:	00 c0       	rjmp	.+0      	; 0x52a <__EEPROM_REGION_LENGTH__+0x12a>
 52a:	00 00       	nop
			_delay_ms(TASTEFUL_DELAY_ms);
			turn_off_lamp();
 52c:	0e 94 be 00 	call	0x17c	; 0x17c <turn_off_lamp>
 530:	9f ef       	ldi	r25, 0xFF	; 255
 532:	23 ed       	ldi	r18, 0xD3	; 211
 534:	80 e3       	ldi	r24, 0x30	; 48
 536:	91 50       	subi	r25, 0x01	; 1
 538:	20 40       	sbci	r18, 0x00	; 0
 53a:	80 40       	sbci	r24, 0x00	; 0
 53c:	e1 f7       	brne	.-8      	; 0x536 <__EEPROM_REGION_LENGTH__+0x136>
 53e:	00 c0       	rjmp	.+0      	; 0x540 <__EEPROM_REGION_LENGTH__+0x140>
 540:	00 00       	nop
			_delay_ms(TASTEFUL_DELAY_ms);
			lamp_cycles = NUM_CYCLES_UNTIL_LAMP_OFF + 1;
 542:	05 e1       	ldi	r16, 0x15	; 21
 544:	10 e0       	ldi	r17, 0x00	; 0
		}

		// Rotate
		if (rot_cycles == 0)
 546:	e1 14       	cp	r14, r1
 548:	f1 04       	cpc	r15, r1
 54a:	79 f4       	brne	.+30     	; 0x56a <__EEPROM_REGION_LENGTH__+0x16a>
		{
			clear_screen();
 54c:	0e 94 6f 03 	call	0x6de	; 0x6de <clear_screen>
			write_to_screen("Rotating...", "");
 550:	6c e4       	ldi	r22, 0x4C	; 76
 552:	71 e0       	ldi	r23, 0x01	; 1
 554:	8d e4       	ldi	r24, 0x4D	; 77
 556:	91 e0       	ldi	r25, 0x01	; 1
 558:	0e 94 19 04 	call	0x832	; 0x832 <write_to_screen>
			rotate_plant();
 55c:	0e 94 8a 00 	call	0x114	; 0x114 <rotate_plant>
			rot_cycles = NUM_CYCLES_UNTIL_ROTATE;
 560:	0f 2e       	mov	r0, r31
 562:	f4 e1       	ldi	r31, 0x14	; 20
 564:	ef 2e       	mov	r14, r31
 566:	f1 2c       	mov	r15, r1
 568:	f0 2d       	mov	r31, r0
 56a:	9f ef       	ldi	r25, 0xFF	; 255
 56c:	23 ed       	ldi	r18, 0xD3	; 211
 56e:	80 e3       	ldi	r24, 0x30	; 48
 570:	91 50       	subi	r25, 0x01	; 1
 572:	20 40       	sbci	r18, 0x00	; 0
 574:	80 40       	sbci	r24, 0x00	; 0
 576:	e1 f7       	brne	.-8      	; 0x570 <__EEPROM_REGION_LENGTH__+0x170>
 578:	00 c0       	rjmp	.+0      	; 0x57a <__EEPROM_REGION_LENGTH__+0x17a>
 57a:	00 00       	nop
 57c:	48 cf       	rjmp	.-368    	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>

0000057e <__vector_1>:
	}
}

// INT0 Service routine (set to water)
ISR(INT0_vect)
{
 57e:	1f 92       	push	r1
 580:	0f 92       	push	r0
 582:	0f b6       	in	r0, 0x3f	; 63
 584:	0f 92       	push	r0
 586:	11 24       	eor	r1, r1
 588:	8f 93       	push	r24
 58a:	9f 93       	push	r25
	// Raise the water flag
	water_flag = 1;
 58c:	81 e0       	ldi	r24, 0x01	; 1
 58e:	90 e0       	ldi	r25, 0x00	; 0
 590:	90 93 5f 01 	sts	0x015F, r25	; 0x80015f <water_flag+0x1>
 594:	80 93 5e 01 	sts	0x015E, r24	; 0x80015e <water_flag>
}
 598:	9f 91       	pop	r25
 59a:	8f 91       	pop	r24
 59c:	0f 90       	pop	r0
 59e:	0f be       	out	0x3f, r0	; 63
 5a0:	0f 90       	pop	r0
 5a2:	1f 90       	pop	r1
 5a4:	18 95       	reti

000005a6 <__vector_2>:

// INT1 Service routine (set to water)
ISR(INT1_vect)
{
 5a6:	1f 92       	push	r1
 5a8:	0f 92       	push	r0
 5aa:	0f b6       	in	r0, 0x3f	; 63
 5ac:	0f 92       	push	r0
 5ae:	11 24       	eor	r1, r1
 5b0:	8f 93       	push	r24
 5b2:	9f 93       	push	r25
	// Raise the water flag
	lamp_flag = 1;
 5b4:	81 e0       	ldi	r24, 0x01	; 1
 5b6:	90 e0       	ldi	r25, 0x00	; 0
 5b8:	90 93 61 01 	sts	0x0161, r25	; 0x800161 <lamp_flag+0x1>
 5bc:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <lamp_flag>
}
 5c0:	9f 91       	pop	r25
 5c2:	8f 91       	pop	r24
 5c4:	0f 90       	pop	r0
 5c6:	0f be       	out	0x3f, r0	; 63
 5c8:	0f 90       	pop	r0
 5ca:	1f 90       	pop	r1
 5cc:	18 95       	reti

000005ce <lcd_write_4>:
  Exit:     no parameters
  Notes:    use either time delays or the busy flag
*/
void lcd_write_4(uint8_t theByte)
{
    lcd_D7_port &= ~(1 << lcd_D7_bit); // assume data is '0'
 5ce:	95 b1       	in	r25, 0x05	; 5
 5d0:	9b 7f       	andi	r25, 0xFB	; 251
 5d2:	95 b9       	out	0x05, r25	; 5
    if (theByte & 1 << 7)
 5d4:	88 23       	and	r24, r24
 5d6:	1c f4       	brge	.+6      	; 0x5de <lcd_write_4+0x10>
        lcd_D7_port |= (1 << lcd_D7_bit); // make data = '1' if required
 5d8:	95 b1       	in	r25, 0x05	; 5
 5da:	94 60       	ori	r25, 0x04	; 4
 5dc:	95 b9       	out	0x05, r25	; 5

    lcd_D6_port &= ~(1 << lcd_D6_bit); // repeat for each data bit
 5de:	95 b1       	in	r25, 0x05	; 5
 5e0:	97 7f       	andi	r25, 0xF7	; 247
 5e2:	95 b9       	out	0x05, r25	; 5
    if (theByte & 1 << 6)
 5e4:	86 ff       	sbrs	r24, 6
 5e6:	03 c0       	rjmp	.+6      	; 0x5ee <lcd_write_4+0x20>
        lcd_D6_port |= (1 << lcd_D6_bit);
 5e8:	95 b1       	in	r25, 0x05	; 5
 5ea:	98 60       	ori	r25, 0x08	; 8
 5ec:	95 b9       	out	0x05, r25	; 5

    lcd_D5_port &= ~(1 << lcd_D5_bit);
 5ee:	95 b1       	in	r25, 0x05	; 5
 5f0:	9f 7e       	andi	r25, 0xEF	; 239
 5f2:	95 b9       	out	0x05, r25	; 5
    if (theByte & 1 << 5)
 5f4:	85 ff       	sbrs	r24, 5
 5f6:	03 c0       	rjmp	.+6      	; 0x5fe <lcd_write_4+0x30>
        lcd_D5_port |= (1 << lcd_D5_bit);
 5f8:	95 b1       	in	r25, 0x05	; 5
 5fa:	90 61       	ori	r25, 0x10	; 16
 5fc:	95 b9       	out	0x05, r25	; 5

    lcd_D4_port &= ~(1 << lcd_D4_bit);
 5fe:	95 b1       	in	r25, 0x05	; 5
 600:	9f 7d       	andi	r25, 0xDF	; 223
 602:	95 b9       	out	0x05, r25	; 5
    if (theByte & 1 << 4)
 604:	84 ff       	sbrs	r24, 4
 606:	03 c0       	rjmp	.+6      	; 0x60e <lcd_write_4+0x40>
        lcd_D4_port |= (1 << lcd_D4_bit);
 608:	85 b1       	in	r24, 0x05	; 5
 60a:	80 62       	ori	r24, 0x20	; 32
 60c:	85 b9       	out	0x05, r24	; 5

    // write the data
    // 'Address set-up time' (40 nS)
    lcd_E_port |= (1 << lcd_E_bit);  // Enable pin high
 60e:	88 b1       	in	r24, 0x08	; 8
 610:	88 60       	ori	r24, 0x08	; 8
 612:	88 b9       	out	0x08, r24	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 614:	85 e0       	ldi	r24, 0x05	; 5
 616:	8a 95       	dec	r24
 618:	f1 f7       	brne	.-4      	; 0x616 <lcd_write_4+0x48>
 61a:	00 00       	nop
    _delay_us(1);                    // implement 'Data set-up time' (80 nS) and 'Enable pulse width' (230 nS)
    lcd_E_port &= ~(1 << lcd_E_bit); // Enable pin low
 61c:	88 b1       	in	r24, 0x08	; 8
 61e:	87 7f       	andi	r24, 0xF7	; 247
 620:	88 b9       	out	0x08, r24	; 8
 622:	85 e0       	ldi	r24, 0x05	; 5
 624:	8a 95       	dec	r24
 626:	f1 f7       	brne	.-4      	; 0x624 <lcd_write_4+0x56>
 628:	00 00       	nop
 62a:	08 95       	ret

0000062c <lcd_write_character_4f>:
  Entry:    (theData) is the information to be sent to the data register
  Exit:     no parameters
  Notes:    configures RW (busy flag is implemented)
*/
void lcd_write_character_4f(uint8_t theData)
{
 62c:	cf 93       	push	r28
 62e:	c8 2f       	mov	r28, r24
    lcd_RW_port &= ~(1 << lcd_RW_bit); // write to LCD module (RW low)
 630:	88 b1       	in	r24, 0x08	; 8
 632:	8f 7e       	andi	r24, 0xEF	; 239
 634:	88 b9       	out	0x08, r24	; 8
    lcd_RS_port |= (1 << lcd_RS_bit);  // select the Data Register (RS high)
 636:	88 b1       	in	r24, 0x08	; 8
 638:	80 62       	ori	r24, 0x20	; 32
 63a:	88 b9       	out	0x08, r24	; 8
    lcd_E_port &= ~(1 << lcd_E_bit);   // make sure E is initially low
 63c:	88 b1       	in	r24, 0x08	; 8
 63e:	87 7f       	andi	r24, 0xF7	; 247
 640:	88 b9       	out	0x08, r24	; 8
    lcd_write_4(theData);              // write the upper 4-bits of the data
 642:	8c 2f       	mov	r24, r28
 644:	0e 94 e7 02 	call	0x5ce	; 0x5ce <lcd_write_4>
    lcd_write_4(theData << 4);         // write the lower 4-bits of the data
 648:	8c 2f       	mov	r24, r28
 64a:	82 95       	swap	r24
 64c:	80 7f       	andi	r24, 0xF0	; 240
 64e:	0e 94 e7 02 	call	0x5ce	; 0x5ce <lcd_write_4>
}
 652:	cf 91       	pop	r28
 654:	08 95       	ret

00000656 <lcd_write_instruction_4f>:
  Entry:    (theInstruction) is the information to be sent to the instruction register
  Exit:     no parameters
  Notes:    configures RW (busy flag is implemented)
*/
void lcd_write_instruction_4f(uint8_t theInstruction)
{
 656:	cf 93       	push	r28
 658:	c8 2f       	mov	r28, r24
    lcd_RW_port &= ~(1 << lcd_RW_bit); // write to LCD module (RW low)
 65a:	88 b1       	in	r24, 0x08	; 8
 65c:	8f 7e       	andi	r24, 0xEF	; 239
 65e:	88 b9       	out	0x08, r24	; 8
    lcd_RS_port &= ~(1 << lcd_RS_bit); // select the Instruction Register (RS low)
 660:	88 b1       	in	r24, 0x08	; 8
 662:	8f 7d       	andi	r24, 0xDF	; 223
 664:	88 b9       	out	0x08, r24	; 8
    lcd_E_port &= ~(1 << lcd_E_bit);   // make sure E is initially low
 666:	88 b1       	in	r24, 0x08	; 8
 668:	87 7f       	andi	r24, 0xF7	; 247
 66a:	88 b9       	out	0x08, r24	; 8
    lcd_write_4(theInstruction);       // write the upper 4-bits of the data
 66c:	8c 2f       	mov	r24, r28
 66e:	0e 94 e7 02 	call	0x5ce	; 0x5ce <lcd_write_4>
    lcd_write_4(theInstruction << 4);  // write the lower 4-bits of the data
 672:	8c 2f       	mov	r24, r28
 674:	82 95       	swap	r24
 676:	80 7f       	andi	r24, 0xF0	; 240
 678:	0e 94 e7 02 	call	0x5ce	; 0x5ce <lcd_write_4>
}
 67c:	cf 91       	pop	r28
 67e:	08 95       	ret

00000680 <lcd_check_BF_4>:
*/
void lcd_check_BF_4(void)
{
    uint8_t busy_flag_copy; // busy flag 'mirror'

    lcd_D7_ddr &= ~(1 << lcd_D7_bit);  // set D7 data direction to input
 680:	84 b1       	in	r24, 0x04	; 4
 682:	8b 7f       	andi	r24, 0xFB	; 251
 684:	84 b9       	out	0x04, r24	; 4
    lcd_RS_port &= ~(1 << lcd_RS_bit); // select the Instruction Register (RS low)
 686:	88 b1       	in	r24, 0x08	; 8
 688:	8f 7d       	andi	r24, 0xDF	; 223
 68a:	88 b9       	out	0x08, r24	; 8
    lcd_RW_port |= (1 << lcd_RW_bit);  // read from LCD module (RW high)
 68c:	88 b1       	in	r24, 0x08	; 8
 68e:	80 61       	ori	r24, 0x10	; 16
 690:	88 b9       	out	0x08, r24	; 8

    do
    {
        busy_flag_copy = 0;             // initialize busy flag 'mirror'
        lcd_E_port |= (1 << lcd_E_bit); // Enable pin high
 692:	88 b1       	in	r24, 0x08	; 8
 694:	88 60       	ori	r24, 0x08	; 8
 696:	88 b9       	out	0x08, r24	; 8
 698:	85 e0       	ldi	r24, 0x05	; 5
 69a:	8a 95       	dec	r24
 69c:	f1 f7       	brne	.-4      	; 0x69a <lcd_check_BF_4+0x1a>
 69e:	00 00       	nop
        _delay_us(1);                   // implement 'Delay data time' (160 nS) and 'Enable pulse width' (230 nS)

        busy_flag_copy |= (lcd_D7_pin & (1 << lcd_D7_bit)); // get actual busy flag status
 6a0:	93 b1       	in	r25, 0x03	; 3

        lcd_E_port &= ~(1 << lcd_E_bit); // Enable pin low
 6a2:	88 b1       	in	r24, 0x08	; 8
 6a4:	87 7f       	andi	r24, 0xF7	; 247
 6a6:	88 b9       	out	0x08, r24	; 8
 6a8:	85 e0       	ldi	r24, 0x05	; 5
 6aa:	8a 95       	dec	r24
 6ac:	f1 f7       	brne	.-4      	; 0x6aa <lcd_check_BF_4+0x2a>
 6ae:	00 00       	nop
        _delay_us(1);                    // implement 'Address hold time' (10 nS), 'Data hold time' (10 nS), and 'Enable cycle time' (500 nS )

        // read and discard alternate nibbles (D3 information)
        lcd_E_port |= (1 << lcd_E_bit);  // Enable pin high
 6b0:	88 b1       	in	r24, 0x08	; 8
 6b2:	88 60       	ori	r24, 0x08	; 8
 6b4:	88 b9       	out	0x08, r24	; 8
 6b6:	85 e0       	ldi	r24, 0x05	; 5
 6b8:	8a 95       	dec	r24
 6ba:	f1 f7       	brne	.-4      	; 0x6b8 <lcd_check_BF_4+0x38>
 6bc:	00 00       	nop
        _delay_us(1);                    // implement 'Delay data time' (160 nS) and 'Enable pulse width' (230 nS)
        lcd_E_port &= ~(1 << lcd_E_bit); // Enable pin low
 6be:	88 b1       	in	r24, 0x08	; 8
 6c0:	87 7f       	andi	r24, 0xF7	; 247
 6c2:	88 b9       	out	0x08, r24	; 8
 6c4:	85 e0       	ldi	r24, 0x05	; 5
 6c6:	8a 95       	dec	r24
 6c8:	f1 f7       	brne	.-4      	; 0x6c6 <lcd_check_BF_4+0x46>
 6ca:	00 00       	nop
        _delay_us(1);                    // implement 'Address hold time (10 nS), 'Data hold time' (10 nS), and 'Enable cycle time' (500 nS )

    } while (busy_flag_copy); // check again if busy flag was high
 6cc:	92 fd       	sbrc	r25, 2
 6ce:	e1 cf       	rjmp	.-62     	; 0x692 <lcd_check_BF_4+0x12>

    // arrive here if busy flag is clear -  clean up and return
    lcd_RW_port &= ~(1 << lcd_RW_bit); // write to LCD module (RW low)
 6d0:	88 b1       	in	r24, 0x08	; 8
 6d2:	8f 7e       	andi	r24, 0xEF	; 239
 6d4:	88 b9       	out	0x08, r24	; 8
    lcd_D7_ddr |= (1 << lcd_D7_bit);   // reset D7 data direction to output
 6d6:	84 b1       	in	r24, 0x04	; 4
 6d8:	84 60       	ori	r24, 0x04	; 4
 6da:	84 b9       	out	0x04, r24	; 4
 6dc:	08 95       	ret

000006de <clear_screen>:
}

void clear_screen()
{
    // Display On/Off Control instruction
    lcd_check_BF_4();
 6de:	0e 94 40 03 	call	0x680	; 0x680 <lcd_check_BF_4>
    lcd_write_instruction_4f(lcd_DisplayOff); // turn display OFF
 6e2:	88 e0       	ldi	r24, 0x08	; 8
 6e4:	0e 94 2b 03 	call	0x656	; 0x656 <lcd_write_instruction_4f>

    // Clear Display instruction
    lcd_check_BF_4();
 6e8:	0e 94 40 03 	call	0x680	; 0x680 <lcd_check_BF_4>
    lcd_write_instruction_4f(lcd_Clear); // clear display RAM
 6ec:	81 e0       	ldi	r24, 0x01	; 1
 6ee:	0e 94 2b 03 	call	0x656	; 0x656 <lcd_write_instruction_4f>

    // ; Entry Mode Set instruction
    lcd_check_BF_4();
 6f2:	0e 94 40 03 	call	0x680	; 0x680 <lcd_check_BF_4>
    lcd_write_instruction_4f(lcd_EntryMode); // set desired shift characteristics
 6f6:	86 e0       	ldi	r24, 0x06	; 6
 6f8:	0e 94 2b 03 	call	0x656	; 0x656 <lcd_write_instruction_4f>

    // This is the end of the LCD controller initialization as specified in the data sheet, but the display
    //  has been left in the OFF condition.  This is a good time to turn the display back ON.

    // Display On/Off Control instruction
    lcd_check_BF_4();
 6fc:	0e 94 40 03 	call	0x680	; 0x680 <lcd_check_BF_4>
    lcd_write_instruction_4f(lcd_DisplayOn); // turn the display ON
 700:	8c e0       	ldi	r24, 0x0C	; 12
 702:	0e 94 2b 03 	call	0x656	; 0x656 <lcd_write_instruction_4f>
 706:	08 95       	ret

00000708 <lcd_init_4f>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 708:	2f ef       	ldi	r18, 0xFF	; 255
 70a:	81 ee       	ldi	r24, 0xE1	; 225
 70c:	94 e0       	ldi	r25, 0x04	; 4
 70e:	21 50       	subi	r18, 0x01	; 1
 710:	80 40       	sbci	r24, 0x00	; 0
 712:	90 40       	sbci	r25, 0x00	; 0
 714:	e1 f7       	brne	.-8      	; 0x70e <lcd_init_4f+0x6>
 716:	00 c0       	rjmp	.+0      	; 0x718 <lcd_init_4f+0x10>
 718:	00 00       	nop
    //   this instruction can be sent on just the four available data lines and it will be interpreted
    //   properly by the LCD controller.  The 'lcd_write_4' subroutine will accomplish this if the
    //   control lines have previously been configured properly.

    // Set up the RS, E, and RW lines for the 'lcd_write_4' function.
    lcd_RS_port &= ~(1 << lcd_RS_bit); // select the Instruction Register (RS low)
 71a:	88 b1       	in	r24, 0x08	; 8
 71c:	8f 7d       	andi	r24, 0xDF	; 223
 71e:	88 b9       	out	0x08, r24	; 8
    lcd_E_port &= ~(1 << lcd_E_bit);   // make sure E is initially low
 720:	88 b1       	in	r24, 0x08	; 8
 722:	87 7f       	andi	r24, 0xF7	; 247
 724:	88 b9       	out	0x08, r24	; 8
    lcd_RW_port &= ~(1 << lcd_RW_bit); // write to LCD module (RW low)
 726:	88 b1       	in	r24, 0x08	; 8
 728:	8f 7e       	andi	r24, 0xEF	; 239
 72a:	88 b9       	out	0x08, r24	; 8

    // Reset the LCD controller
    lcd_write_4(lcd_FunctionReset); // first part of reset sequence
 72c:	80 e3       	ldi	r24, 0x30	; 48
 72e:	0e 94 e7 02 	call	0x5ce	; 0x5ce <lcd_write_4>
 732:	8f e3       	ldi	r24, 0x3F	; 63
 734:	9c e9       	ldi	r25, 0x9C	; 156
 736:	01 97       	sbiw	r24, 0x01	; 1
 738:	f1 f7       	brne	.-4      	; 0x736 <lcd_init_4f+0x2e>
 73a:	00 c0       	rjmp	.+0      	; 0x73c <lcd_init_4f+0x34>
 73c:	00 00       	nop
    _delay_ms(10);                  // 4.1 mS delay (min)

    lcd_write_4(lcd_FunctionReset); // second part of reset sequence
 73e:	80 e3       	ldi	r24, 0x30	; 48
 740:	0e 94 e7 02 	call	0x5ce	; 0x5ce <lcd_write_4>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 744:	8f e1       	ldi	r24, 0x1F	; 31
 746:	93 e0       	ldi	r25, 0x03	; 3
 748:	01 97       	sbiw	r24, 0x01	; 1
 74a:	f1 f7       	brne	.-4      	; 0x748 <lcd_init_4f+0x40>
 74c:	00 c0       	rjmp	.+0      	; 0x74e <lcd_init_4f+0x46>
 74e:	00 00       	nop
    _delay_us(200);                 // 100 uS delay (min)

    lcd_write_4(lcd_FunctionReset); // third part of reset sequence
 750:	80 e3       	ldi	r24, 0x30	; 48
 752:	0e 94 e7 02 	call	0x5ce	; 0x5ce <lcd_write_4>
 756:	8f e3       	ldi	r24, 0x3F	; 63
 758:	91 e0       	ldi	r25, 0x01	; 1
 75a:	01 97       	sbiw	r24, 0x01	; 1
 75c:	f1 f7       	brne	.-4      	; 0x75a <lcd_init_4f+0x52>
 75e:	00 c0       	rjmp	.+0      	; 0x760 <lcd_init_4f+0x58>
 760:	00 00       	nop
    // Preliminary Function Set instruction - used only to set the 4-bit mode.
    // The number of lines or the font cannot be set at this time since the controller is still in the
    //  8-bit mode, but the data transfer mode can be changed since this parameter is determined by one
    //  of the upper four bits of the instruction.

    lcd_write_4(lcd_FunctionSet4bit); // set 4-bit mode
 762:	88 e2       	ldi	r24, 0x28	; 40
 764:	0e 94 e7 02 	call	0x5ce	; 0x5ce <lcd_write_4>
                                      //  _delay_us(80);                                  //  40 uS delay (min)
                                      // --> from this point on the busy flag is available <--

    // Function Set instruction
    lcd_check_BF_4();                              // make sure LCD controller is ready
 768:	0e 94 40 03 	call	0x680	; 0x680 <lcd_check_BF_4>
    lcd_write_instruction_4f(lcd_FunctionSet4bit); // set mode, lines, and font
 76c:	88 e2       	ldi	r24, 0x28	; 40
 76e:	0e 94 2b 03 	call	0x656	; 0x656 <lcd_write_instruction_4f>
    // The next three instructions are specified in the data sheet as part of the initialization routine,
    //  so it is a good idea (but probably not necessary) to do them just as specified and then redo them
    //  later if the application requires a different configuration.

    // Display On/Off Control instruction
    lcd_check_BF_4();
 772:	0e 94 40 03 	call	0x680	; 0x680 <lcd_check_BF_4>
    lcd_write_instruction_4f(lcd_DisplayOff); // turn display OFF
 776:	88 e0       	ldi	r24, 0x08	; 8
 778:	0e 94 2b 03 	call	0x656	; 0x656 <lcd_write_instruction_4f>

    // Clear Display instruction
    lcd_check_BF_4();
 77c:	0e 94 40 03 	call	0x680	; 0x680 <lcd_check_BF_4>
    lcd_write_instruction_4f(lcd_Clear); // clear display RAM
 780:	81 e0       	ldi	r24, 0x01	; 1
 782:	0e 94 2b 03 	call	0x656	; 0x656 <lcd_write_instruction_4f>

    // ; Entry Mode Set instruction
    lcd_check_BF_4();
 786:	0e 94 40 03 	call	0x680	; 0x680 <lcd_check_BF_4>
    lcd_write_instruction_4f(lcd_EntryMode); // set desired shift characteristics
 78a:	86 e0       	ldi	r24, 0x06	; 6
 78c:	0e 94 2b 03 	call	0x656	; 0x656 <lcd_write_instruction_4f>

    // This is the end of the LCD controller initialization as specified in the data sheet, but the display
    //  has been left in the OFF condition.  This is a good time to turn the display back ON.

    // Display On/Off Control instruction
    lcd_check_BF_4();
 790:	0e 94 40 03 	call	0x680	; 0x680 <lcd_check_BF_4>
    lcd_write_instruction_4f(lcd_DisplayOn); // turn the display ON
 794:	8c e0       	ldi	r24, 0x0C	; 12
 796:	0e 94 2b 03 	call	0x656	; 0x656 <lcd_write_instruction_4f>
 79a:	08 95       	ret

0000079c <init_screen>:
/******************************* End of Test Program Code ******************/

/******************************* External Functions *************************/
void init_screen()
{
    if (!initialized)
 79c:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <initialized>
 7a0:	90 91 63 01 	lds	r25, 0x0163	; 0x800163 <initialized+0x1>
 7a4:	89 2b       	or	r24, r25
 7a6:	e9 f4       	brne	.+58     	; 0x7e2 <init_screen+0x46>
    {
        // configure the microprocessor pins for the data lines
        lcd_D7_ddr |= (1 << lcd_D7_bit); // 4 data lines - output
 7a8:	84 b1       	in	r24, 0x04	; 4
 7aa:	84 60       	ori	r24, 0x04	; 4
 7ac:	84 b9       	out	0x04, r24	; 4
        lcd_D6_ddr |= (1 << lcd_D6_bit);
 7ae:	84 b1       	in	r24, 0x04	; 4
 7b0:	88 60       	ori	r24, 0x08	; 8
 7b2:	84 b9       	out	0x04, r24	; 4
        lcd_D5_ddr |= (1 << lcd_D5_bit);
 7b4:	84 b1       	in	r24, 0x04	; 4
 7b6:	80 61       	ori	r24, 0x10	; 16
 7b8:	84 b9       	out	0x04, r24	; 4
        lcd_D4_ddr |= (1 << lcd_D4_bit);
 7ba:	84 b1       	in	r24, 0x04	; 4
 7bc:	80 62       	ori	r24, 0x20	; 32
 7be:	84 b9       	out	0x04, r24	; 4

        // configure the microprocessor pins for the control lines
        lcd_E_ddr |= (1 << lcd_E_bit);   // E line - output
 7c0:	87 b1       	in	r24, 0x07	; 7
 7c2:	88 60       	ori	r24, 0x08	; 8
 7c4:	87 b9       	out	0x07, r24	; 7
        lcd_RS_ddr |= (1 << lcd_RS_bit); // RS line - output
 7c6:	87 b1       	in	r24, 0x07	; 7
 7c8:	80 62       	ori	r24, 0x20	; 32
 7ca:	87 b9       	out	0x07, r24	; 7
        lcd_RW_ddr |= (1 << lcd_RW_bit); // RW line - output
 7cc:	87 b1       	in	r24, 0x07	; 7
 7ce:	80 61       	ori	r24, 0x10	; 16
 7d0:	87 b9       	out	0x07, r24	; 7

        // initialize the LCD controller as determined by the defines (LCD instructions)
        lcd_init_4f();
 7d2:	0e 94 84 03 	call	0x708	; 0x708 <lcd_init_4f>

        // No duplicate call
        initialized = 1;
 7d6:	81 e0       	ldi	r24, 0x01	; 1
 7d8:	90 e0       	ldi	r25, 0x00	; 0
 7da:	90 93 63 01 	sts	0x0163, r25	; 0x800163 <initialized+0x1>
 7de:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <initialized>
 7e2:	08 95       	ret

000007e4 <lcd_write_string_4f>:
  Entry:    (theString) is the string to be displayed
  Exit:     no parameters
  Notes:    uses the busy flag instead of time delays
*/
void lcd_write_string_4f(uint8_t theString[])
{
 7e4:	0f 93       	push	r16
 7e6:	1f 93       	push	r17
 7e8:	cf 93       	push	r28
 7ea:	df 93       	push	r29
 7ec:	00 d0       	rcall	.+0      	; 0x7ee <lcd_write_string_4f+0xa>
 7ee:	cd b7       	in	r28, 0x3d	; 61
 7f0:	de b7       	in	r29, 0x3e	; 62
 7f2:	8c 01       	movw	r16, r24
    volatile int i = 0; // character counter*/
 7f4:	1a 82       	std	Y+2, r1	; 0x02
 7f6:	19 82       	std	Y+1, r1	; 0x01
    while (theString[i] != 0)
 7f8:	0e c0       	rjmp	.+28     	; 0x816 <__DATA_REGION_LENGTH__+0x16>
    {
        lcd_check_BF_4(); // make sure LCD controller is ready
 7fa:	0e 94 40 03 	call	0x680	; 0x680 <lcd_check_BF_4>
        lcd_write_character_4f(theString[i]);
 7fe:	e9 81       	ldd	r30, Y+1	; 0x01
 800:	fa 81       	ldd	r31, Y+2	; 0x02
 802:	e0 0f       	add	r30, r16
 804:	f1 1f       	adc	r31, r17
 806:	80 81       	ld	r24, Z
 808:	0e 94 16 03 	call	0x62c	; 0x62c <lcd_write_character_4f>
        i++;
 80c:	89 81       	ldd	r24, Y+1	; 0x01
 80e:	9a 81       	ldd	r25, Y+2	; 0x02
 810:	01 96       	adiw	r24, 0x01	; 1
 812:	9a 83       	std	Y+2, r25	; 0x02
 814:	89 83       	std	Y+1, r24	; 0x01
  Notes:    uses the busy flag instead of time delays
*/
void lcd_write_string_4f(uint8_t theString[])
{
    volatile int i = 0; // character counter*/
    while (theString[i] != 0)
 816:	e9 81       	ldd	r30, Y+1	; 0x01
 818:	fa 81       	ldd	r31, Y+2	; 0x02
 81a:	e0 0f       	add	r30, r16
 81c:	f1 1f       	adc	r31, r17
 81e:	80 81       	ld	r24, Z
 820:	81 11       	cpse	r24, r1
 822:	eb cf       	rjmp	.-42     	; 0x7fa <lcd_write_string_4f+0x16>
    {
        lcd_check_BF_4(); // make sure LCD controller is ready
        lcd_write_character_4f(theString[i]);
        i++;
    }
}
 824:	0f 90       	pop	r0
 826:	0f 90       	pop	r0
 828:	df 91       	pop	r29
 82a:	cf 91       	pop	r28
 82c:	1f 91       	pop	r17
 82e:	0f 91       	pop	r16
 830:	08 95       	ret

00000832 <write_to_screen>:
    lcd_check_BF_4();
    lcd_write_instruction_4f(lcd_DisplayOn); // turn the display ON
}

void write_to_screen(char *line1, char *line2)
{
 832:	0f 93       	push	r16
 834:	1f 93       	push	r17
 836:	cf 93       	push	r28
 838:	df 93       	push	r29
 83a:	8c 01       	movw	r16, r24
 83c:	eb 01       	movw	r28, r22
    // Seek first line
    lcd_check_BF_4();
 83e:	0e 94 40 03 	call	0x680	; 0x680 <lcd_check_BF_4>
    lcd_write_instruction_4f(lcd_SetCursor | lcd_LineOne);
 842:	80 e8       	ldi	r24, 0x80	; 128
 844:	0e 94 2b 03 	call	0x656	; 0x656 <lcd_write_instruction_4f>

    // Write first line
    lcd_check_BF_4();
 848:	0e 94 40 03 	call	0x680	; 0x680 <lcd_check_BF_4>
    lcd_write_string_4f((uint8_t *)line1);
 84c:	c8 01       	movw	r24, r16
 84e:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <lcd_write_string_4f>

    // Seek second line
    lcd_check_BF_4();
 852:	0e 94 40 03 	call	0x680	; 0x680 <lcd_check_BF_4>
    lcd_write_instruction_4f(lcd_SetCursor | lcd_LineTwo);
 856:	80 ec       	ldi	r24, 0xC0	; 192
 858:	0e 94 2b 03 	call	0x656	; 0x656 <lcd_write_instruction_4f>

    // Write second line
    lcd_check_BF_4();
 85c:	0e 94 40 03 	call	0x680	; 0x680 <lcd_check_BF_4>
    lcd_write_string_4f((uint8_t *)line2);
 860:	ce 01       	movw	r24, r28
 862:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <lcd_write_string_4f>
}
 866:	df 91       	pop	r29
 868:	cf 91       	pop	r28
 86a:	1f 91       	pop	r17
 86c:	0f 91       	pop	r16
 86e:	08 95       	ret

00000870 <init_buttons>:
	}
}

void init_buttons()
{
	if (!initialized_buttons)
 870:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <initialized_buttons>
 874:	90 91 65 01 	lds	r25, 0x0165	; 0x800165 <initialized_buttons+0x1>
 878:	89 2b       	or	r24, r25
 87a:	91 f4       	brne	.+36     	; 0x8a0 <init_buttons+0x30>
	{
		// Set pins as input
		water_btn_ddr &= ~(1 << water_btn_bit);
 87c:	8a b1       	in	r24, 0x0a	; 10
 87e:	8b 7f       	andi	r24, 0xFB	; 251
 880:	8a b9       	out	0x0a, r24	; 10
		lamp_btn_ddr &= ~(1 << lamp_btn_bit);
 882:	8a b1       	in	r24, 0x0a	; 10
 884:	87 7f       	andi	r24, 0xF7	; 247
 886:	8a b9       	out	0x0a, r24	; 10

		// Set interrupts on rising edge
		EICRA = 1 << ISC01 | 1 << ISC00 | 1 << ISC11 | 1 << ISC10;
 888:	8f e0       	ldi	r24, 0x0F	; 15
 88a:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7f8069>

		// Set both interrupts
		EIMSK = (1 << water_btn_int) | (1 << lamp_btn_int);
 88e:	83 e0       	ldi	r24, 0x03	; 3
 890:	8d bb       	out	0x1d, r24	; 29

		// Enable global interrupts
		sei();
 892:	78 94       	sei

		// No duplication
		initialized_buttons = 1;
 894:	81 e0       	ldi	r24, 0x01	; 1
 896:	90 e0       	ldi	r25, 0x00	; 0
 898:	90 93 65 01 	sts	0x0165, r25	; 0x800165 <initialized_buttons+0x1>
 89c:	80 93 64 01 	sts	0x0164, r24	; 0x800164 <initialized_buttons>
 8a0:	08 95       	ret

000008a2 <read_rocker>:
}

// Read rocker
int read_rocker()
{
	return !((1 << rocker_in_bit) & rocker_in_pin);
 8a2:	89 b1       	in	r24, 0x09	; 9
 8a4:	82 95       	swap	r24
 8a6:	8f 70       	andi	r24, 0x0F	; 15
 8a8:	91 e0       	ldi	r25, 0x01	; 1
 8aa:	89 27       	eor	r24, r25
}
 8ac:	81 70       	andi	r24, 0x01	; 1
 8ae:	90 e0       	ldi	r25, 0x00	; 0
 8b0:	08 95       	ret

000008b2 <read_adc>:
/******************************* End of External Functions ******************/

int read_adc()
{
	// Start ADC
	ADCSRA |= (1 << ADSC);
 8b2:	ea e7       	ldi	r30, 0x7A	; 122
 8b4:	f0 e0       	ldi	r31, 0x00	; 0
 8b6:	80 81       	ld	r24, Z
 8b8:	80 64       	ori	r24, 0x40	; 64
 8ba:	80 83       	st	Z, r24

	// Wait for completion
	while (((1 << ADIF) & ADCSRA) == 0)
 8bc:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
 8c0:	84 ff       	sbrs	r24, 4
 8c2:	fc cf       	rjmp	.-8      	; 0x8bc <read_adc+0xa>
		;

	// Return left-justify
	return ADCH;
 8c4:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
}
 8c8:	90 e0       	ldi	r25, 0x00	; 0
 8ca:	08 95       	ret

000008cc <switch_adc>:

void switch_adc(int pin)
{

	// Set ADMUX
	ADMUX = (pin);			// set pin
 8cc:	ec e7       	ldi	r30, 0x7C	; 124
 8ce:	f0 e0       	ldi	r31, 0x00	; 0
 8d0:	80 83       	st	Z, r24
	ADMUX |= (1 << REFS0) | // set mode
 8d2:	80 81       	ld	r24, Z
 8d4:	80 66       	ori	r24, 0x60	; 96
 8d6:	80 83       	st	Z, r24
 8d8:	08 95       	ret

000008da <init_sensors>:

// Init sensors
void init_sensors()
{

	if (!initialized_sensors)
 8da:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <initialized_sensors>
 8de:	90 91 67 01 	lds	r25, 0x0167	; 0x800167 <initialized_sensors+0x1>
 8e2:	89 2b       	or	r24, r25
 8e4:	e1 f4       	brne	.+56     	; 0x91e <__stack+0x1f>
	{
		// Rocker setup

		// Set DDR as input
		rocker_in_ddr &= ~(1 << rocker_in_bit);
 8e6:	8a b1       	in	r24, 0x0a	; 10
 8e8:	8f 7e       	andi	r24, 0xEF	; 239
 8ea:	8a b9       	out	0x0a, r24	; 10

		// Photosensor setup
		// Simple A/D conversion

		// Set DDR
		photo_in_ddr &= ~(1 << photo_in_bit);
 8ec:	87 b1       	in	r24, 0x07	; 7
 8ee:	8e 7f       	andi	r24, 0xFE	; 254
 8f0:	87 b9       	out	0x07, r24	; 7
		moist_in_ddr &= ~(1 << moist_in_bit);
 8f2:	87 b1       	in	r24, 0x07	; 7
 8f4:	8d 7f       	andi	r24, 0xFD	; 253
 8f6:	87 b9       	out	0x07, r24	; 7

		// ADMUX set in switch_adc, default to photo for now
		switch_adc(moist_in_adc_bit);
 8f8:	81 e0       	ldi	r24, 0x01	; 1
 8fa:	90 e0       	ldi	r25, 0x00	; 0
 8fc:	0e 94 66 04 	call	0x8cc	; 0x8cc <switch_adc>

		// Turn on ADC
		PRR = 0x00;
 900:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <__TEXT_REGION_LENGTH__+0x7f8064>

		// Enable ADC
		ADCSRA = ADC_PRESCALER; // Set prescaler
 904:	ea e7       	ldi	r30, 0x7A	; 122
 906:	f0 e0       	ldi	r31, 0x00	; 0
 908:	87 e0       	ldi	r24, 0x07	; 7
 90a:	80 83       	st	Z, r24
		ADCSRA |= (1 << ADEN);	// Set bit
 90c:	80 81       	ld	r24, Z
 90e:	80 68       	ori	r24, 0x80	; 128
 910:	80 83       	st	Z, r24

		// Ensure no duplicate call
		initialized_sensors = 1;
 912:	81 e0       	ldi	r24, 0x01	; 1
 914:	90 e0       	ldi	r25, 0x00	; 0
 916:	90 93 67 01 	sts	0x0167, r25	; 0x800167 <initialized_sensors+0x1>
 91a:	80 93 66 01 	sts	0x0166, r24	; 0x800166 <initialized_sensors>
 91e:	08 95       	ret

00000920 <read_light>:
}

// Read light
int read_light()
{
	switch_adc(photo_in_adc_bit);
 920:	80 e0       	ldi	r24, 0x00	; 0
 922:	90 e0       	ldi	r25, 0x00	; 0
 924:	0e 94 66 04 	call	0x8cc	; 0x8cc <switch_adc>
	return read_adc();
 928:	0e 94 59 04 	call	0x8b2	; 0x8b2 <read_adc>
}
 92c:	08 95       	ret

0000092e <read_moist>:

// Read moisture
long int read_moist()
{
	switch_adc(moist_in_adc_bit);
 92e:	81 e0       	ldi	r24, 0x01	; 1
 930:	90 e0       	ldi	r25, 0x00	; 0
 932:	0e 94 66 04 	call	0x8cc	; 0x8cc <switch_adc>
	return read_adc();
 936:	0e 94 59 04 	call	0x8b2	; 0x8b2 <read_adc>
 93a:	bc 01       	movw	r22, r24
 93c:	99 0f       	add	r25, r25
 93e:	88 0b       	sbc	r24, r24
 940:	99 0b       	sbc	r25, r25
}
 942:	08 95       	ret

00000944 <sprintf>:
 944:	ae e0       	ldi	r26, 0x0E	; 14
 946:	b0 e0       	ldi	r27, 0x00	; 0
 948:	e8 ea       	ldi	r30, 0xA8	; 168
 94a:	f4 e0       	ldi	r31, 0x04	; 4
 94c:	0c 94 63 07 	jmp	0xec6	; 0xec6 <__prologue_saves__+0x1c>
 950:	0d 89       	ldd	r16, Y+21	; 0x15
 952:	1e 89       	ldd	r17, Y+22	; 0x16
 954:	86 e0       	ldi	r24, 0x06	; 6
 956:	8c 83       	std	Y+4, r24	; 0x04
 958:	1a 83       	std	Y+2, r17	; 0x02
 95a:	09 83       	std	Y+1, r16	; 0x01
 95c:	8f ef       	ldi	r24, 0xFF	; 255
 95e:	9f e7       	ldi	r25, 0x7F	; 127
 960:	9e 83       	std	Y+6, r25	; 0x06
 962:	8d 83       	std	Y+5, r24	; 0x05
 964:	ae 01       	movw	r20, r28
 966:	47 5e       	subi	r20, 0xE7	; 231
 968:	5f 4f       	sbci	r21, 0xFF	; 255
 96a:	6f 89       	ldd	r22, Y+23	; 0x17
 96c:	78 8d       	ldd	r23, Y+24	; 0x18
 96e:	ce 01       	movw	r24, r28
 970:	01 96       	adiw	r24, 0x01	; 1
 972:	0e 94 c4 04 	call	0x988	; 0x988 <vfprintf>
 976:	ef 81       	ldd	r30, Y+7	; 0x07
 978:	f8 85       	ldd	r31, Y+8	; 0x08
 97a:	e0 0f       	add	r30, r16
 97c:	f1 1f       	adc	r31, r17
 97e:	10 82       	st	Z, r1
 980:	2e 96       	adiw	r28, 0x0e	; 14
 982:	e4 e0       	ldi	r30, 0x04	; 4
 984:	0c 94 7f 07 	jmp	0xefe	; 0xefe <__epilogue_restores__+0x1c>

00000988 <vfprintf>:
 988:	ab e0       	ldi	r26, 0x0B	; 11
 98a:	b0 e0       	ldi	r27, 0x00	; 0
 98c:	ea ec       	ldi	r30, 0xCA	; 202
 98e:	f4 e0       	ldi	r31, 0x04	; 4
 990:	0c 94 55 07 	jmp	0xeaa	; 0xeaa <__prologue_saves__>
 994:	6c 01       	movw	r12, r24
 996:	7b 01       	movw	r14, r22
 998:	8a 01       	movw	r16, r20
 99a:	fc 01       	movw	r30, r24
 99c:	17 82       	std	Z+7, r1	; 0x07
 99e:	16 82       	std	Z+6, r1	; 0x06
 9a0:	83 81       	ldd	r24, Z+3	; 0x03
 9a2:	81 ff       	sbrs	r24, 1
 9a4:	cc c1       	rjmp	.+920    	; 0xd3e <vfprintf+0x3b6>
 9a6:	ce 01       	movw	r24, r28
 9a8:	01 96       	adiw	r24, 0x01	; 1
 9aa:	3c 01       	movw	r6, r24
 9ac:	f6 01       	movw	r30, r12
 9ae:	93 81       	ldd	r25, Z+3	; 0x03
 9b0:	f7 01       	movw	r30, r14
 9b2:	93 fd       	sbrc	r25, 3
 9b4:	85 91       	lpm	r24, Z+
 9b6:	93 ff       	sbrs	r25, 3
 9b8:	81 91       	ld	r24, Z+
 9ba:	7f 01       	movw	r14, r30
 9bc:	88 23       	and	r24, r24
 9be:	09 f4       	brne	.+2      	; 0x9c2 <vfprintf+0x3a>
 9c0:	ba c1       	rjmp	.+884    	; 0xd36 <vfprintf+0x3ae>
 9c2:	85 32       	cpi	r24, 0x25	; 37
 9c4:	39 f4       	brne	.+14     	; 0x9d4 <vfprintf+0x4c>
 9c6:	93 fd       	sbrc	r25, 3
 9c8:	85 91       	lpm	r24, Z+
 9ca:	93 ff       	sbrs	r25, 3
 9cc:	81 91       	ld	r24, Z+
 9ce:	7f 01       	movw	r14, r30
 9d0:	85 32       	cpi	r24, 0x25	; 37
 9d2:	29 f4       	brne	.+10     	; 0x9de <vfprintf+0x56>
 9d4:	b6 01       	movw	r22, r12
 9d6:	90 e0       	ldi	r25, 0x00	; 0
 9d8:	0e 94 bb 06 	call	0xd76	; 0xd76 <fputc>
 9dc:	e7 cf       	rjmp	.-50     	; 0x9ac <vfprintf+0x24>
 9de:	91 2c       	mov	r9, r1
 9e0:	21 2c       	mov	r2, r1
 9e2:	31 2c       	mov	r3, r1
 9e4:	ff e1       	ldi	r31, 0x1F	; 31
 9e6:	f3 15       	cp	r31, r3
 9e8:	d8 f0       	brcs	.+54     	; 0xa20 <vfprintf+0x98>
 9ea:	8b 32       	cpi	r24, 0x2B	; 43
 9ec:	79 f0       	breq	.+30     	; 0xa0c <vfprintf+0x84>
 9ee:	38 f4       	brcc	.+14     	; 0x9fe <vfprintf+0x76>
 9f0:	80 32       	cpi	r24, 0x20	; 32
 9f2:	79 f0       	breq	.+30     	; 0xa12 <vfprintf+0x8a>
 9f4:	83 32       	cpi	r24, 0x23	; 35
 9f6:	a1 f4       	brne	.+40     	; 0xa20 <vfprintf+0x98>
 9f8:	23 2d       	mov	r18, r3
 9fa:	20 61       	ori	r18, 0x10	; 16
 9fc:	1d c0       	rjmp	.+58     	; 0xa38 <vfprintf+0xb0>
 9fe:	8d 32       	cpi	r24, 0x2D	; 45
 a00:	61 f0       	breq	.+24     	; 0xa1a <vfprintf+0x92>
 a02:	80 33       	cpi	r24, 0x30	; 48
 a04:	69 f4       	brne	.+26     	; 0xa20 <vfprintf+0x98>
 a06:	23 2d       	mov	r18, r3
 a08:	21 60       	ori	r18, 0x01	; 1
 a0a:	16 c0       	rjmp	.+44     	; 0xa38 <vfprintf+0xb0>
 a0c:	83 2d       	mov	r24, r3
 a0e:	82 60       	ori	r24, 0x02	; 2
 a10:	38 2e       	mov	r3, r24
 a12:	e3 2d       	mov	r30, r3
 a14:	e4 60       	ori	r30, 0x04	; 4
 a16:	3e 2e       	mov	r3, r30
 a18:	2a c0       	rjmp	.+84     	; 0xa6e <vfprintf+0xe6>
 a1a:	f3 2d       	mov	r31, r3
 a1c:	f8 60       	ori	r31, 0x08	; 8
 a1e:	1d c0       	rjmp	.+58     	; 0xa5a <vfprintf+0xd2>
 a20:	37 fc       	sbrc	r3, 7
 a22:	2d c0       	rjmp	.+90     	; 0xa7e <vfprintf+0xf6>
 a24:	20 ed       	ldi	r18, 0xD0	; 208
 a26:	28 0f       	add	r18, r24
 a28:	2a 30       	cpi	r18, 0x0A	; 10
 a2a:	40 f0       	brcs	.+16     	; 0xa3c <vfprintf+0xb4>
 a2c:	8e 32       	cpi	r24, 0x2E	; 46
 a2e:	b9 f4       	brne	.+46     	; 0xa5e <vfprintf+0xd6>
 a30:	36 fc       	sbrc	r3, 6
 a32:	81 c1       	rjmp	.+770    	; 0xd36 <vfprintf+0x3ae>
 a34:	23 2d       	mov	r18, r3
 a36:	20 64       	ori	r18, 0x40	; 64
 a38:	32 2e       	mov	r3, r18
 a3a:	19 c0       	rjmp	.+50     	; 0xa6e <vfprintf+0xe6>
 a3c:	36 fe       	sbrs	r3, 6
 a3e:	06 c0       	rjmp	.+12     	; 0xa4c <vfprintf+0xc4>
 a40:	8a e0       	ldi	r24, 0x0A	; 10
 a42:	98 9e       	mul	r9, r24
 a44:	20 0d       	add	r18, r0
 a46:	11 24       	eor	r1, r1
 a48:	92 2e       	mov	r9, r18
 a4a:	11 c0       	rjmp	.+34     	; 0xa6e <vfprintf+0xe6>
 a4c:	ea e0       	ldi	r30, 0x0A	; 10
 a4e:	2e 9e       	mul	r2, r30
 a50:	20 0d       	add	r18, r0
 a52:	11 24       	eor	r1, r1
 a54:	22 2e       	mov	r2, r18
 a56:	f3 2d       	mov	r31, r3
 a58:	f0 62       	ori	r31, 0x20	; 32
 a5a:	3f 2e       	mov	r3, r31
 a5c:	08 c0       	rjmp	.+16     	; 0xa6e <vfprintf+0xe6>
 a5e:	8c 36       	cpi	r24, 0x6C	; 108
 a60:	21 f4       	brne	.+8      	; 0xa6a <vfprintf+0xe2>
 a62:	83 2d       	mov	r24, r3
 a64:	80 68       	ori	r24, 0x80	; 128
 a66:	38 2e       	mov	r3, r24
 a68:	02 c0       	rjmp	.+4      	; 0xa6e <vfprintf+0xe6>
 a6a:	88 36       	cpi	r24, 0x68	; 104
 a6c:	41 f4       	brne	.+16     	; 0xa7e <vfprintf+0xf6>
 a6e:	f7 01       	movw	r30, r14
 a70:	93 fd       	sbrc	r25, 3
 a72:	85 91       	lpm	r24, Z+
 a74:	93 ff       	sbrs	r25, 3
 a76:	81 91       	ld	r24, Z+
 a78:	7f 01       	movw	r14, r30
 a7a:	81 11       	cpse	r24, r1
 a7c:	b3 cf       	rjmp	.-154    	; 0x9e4 <vfprintf+0x5c>
 a7e:	98 2f       	mov	r25, r24
 a80:	9f 7d       	andi	r25, 0xDF	; 223
 a82:	95 54       	subi	r25, 0x45	; 69
 a84:	93 30       	cpi	r25, 0x03	; 3
 a86:	28 f4       	brcc	.+10     	; 0xa92 <vfprintf+0x10a>
 a88:	0c 5f       	subi	r16, 0xFC	; 252
 a8a:	1f 4f       	sbci	r17, 0xFF	; 255
 a8c:	9f e3       	ldi	r25, 0x3F	; 63
 a8e:	99 83       	std	Y+1, r25	; 0x01
 a90:	0d c0       	rjmp	.+26     	; 0xaac <vfprintf+0x124>
 a92:	83 36       	cpi	r24, 0x63	; 99
 a94:	31 f0       	breq	.+12     	; 0xaa2 <vfprintf+0x11a>
 a96:	83 37       	cpi	r24, 0x73	; 115
 a98:	71 f0       	breq	.+28     	; 0xab6 <vfprintf+0x12e>
 a9a:	83 35       	cpi	r24, 0x53	; 83
 a9c:	09 f0       	breq	.+2      	; 0xaa0 <vfprintf+0x118>
 a9e:	59 c0       	rjmp	.+178    	; 0xb52 <vfprintf+0x1ca>
 aa0:	21 c0       	rjmp	.+66     	; 0xae4 <vfprintf+0x15c>
 aa2:	f8 01       	movw	r30, r16
 aa4:	80 81       	ld	r24, Z
 aa6:	89 83       	std	Y+1, r24	; 0x01
 aa8:	0e 5f       	subi	r16, 0xFE	; 254
 aaa:	1f 4f       	sbci	r17, 0xFF	; 255
 aac:	88 24       	eor	r8, r8
 aae:	83 94       	inc	r8
 ab0:	91 2c       	mov	r9, r1
 ab2:	53 01       	movw	r10, r6
 ab4:	13 c0       	rjmp	.+38     	; 0xadc <vfprintf+0x154>
 ab6:	28 01       	movw	r4, r16
 ab8:	f2 e0       	ldi	r31, 0x02	; 2
 aba:	4f 0e       	add	r4, r31
 abc:	51 1c       	adc	r5, r1
 abe:	f8 01       	movw	r30, r16
 ac0:	a0 80       	ld	r10, Z
 ac2:	b1 80       	ldd	r11, Z+1	; 0x01
 ac4:	36 fe       	sbrs	r3, 6
 ac6:	03 c0       	rjmp	.+6      	; 0xace <vfprintf+0x146>
 ac8:	69 2d       	mov	r22, r9
 aca:	70 e0       	ldi	r23, 0x00	; 0
 acc:	02 c0       	rjmp	.+4      	; 0xad2 <vfprintf+0x14a>
 ace:	6f ef       	ldi	r22, 0xFF	; 255
 ad0:	7f ef       	ldi	r23, 0xFF	; 255
 ad2:	c5 01       	movw	r24, r10
 ad4:	0e 94 b0 06 	call	0xd60	; 0xd60 <strnlen>
 ad8:	4c 01       	movw	r8, r24
 ada:	82 01       	movw	r16, r4
 adc:	f3 2d       	mov	r31, r3
 ade:	ff 77       	andi	r31, 0x7F	; 127
 ae0:	3f 2e       	mov	r3, r31
 ae2:	16 c0       	rjmp	.+44     	; 0xb10 <vfprintf+0x188>
 ae4:	28 01       	movw	r4, r16
 ae6:	22 e0       	ldi	r18, 0x02	; 2
 ae8:	42 0e       	add	r4, r18
 aea:	51 1c       	adc	r5, r1
 aec:	f8 01       	movw	r30, r16
 aee:	a0 80       	ld	r10, Z
 af0:	b1 80       	ldd	r11, Z+1	; 0x01
 af2:	36 fe       	sbrs	r3, 6
 af4:	03 c0       	rjmp	.+6      	; 0xafc <vfprintf+0x174>
 af6:	69 2d       	mov	r22, r9
 af8:	70 e0       	ldi	r23, 0x00	; 0
 afa:	02 c0       	rjmp	.+4      	; 0xb00 <vfprintf+0x178>
 afc:	6f ef       	ldi	r22, 0xFF	; 255
 afe:	7f ef       	ldi	r23, 0xFF	; 255
 b00:	c5 01       	movw	r24, r10
 b02:	0e 94 a5 06 	call	0xd4a	; 0xd4a <strnlen_P>
 b06:	4c 01       	movw	r8, r24
 b08:	f3 2d       	mov	r31, r3
 b0a:	f0 68       	ori	r31, 0x80	; 128
 b0c:	3f 2e       	mov	r3, r31
 b0e:	82 01       	movw	r16, r4
 b10:	33 fc       	sbrc	r3, 3
 b12:	1b c0       	rjmp	.+54     	; 0xb4a <vfprintf+0x1c2>
 b14:	82 2d       	mov	r24, r2
 b16:	90 e0       	ldi	r25, 0x00	; 0
 b18:	88 16       	cp	r8, r24
 b1a:	99 06       	cpc	r9, r25
 b1c:	b0 f4       	brcc	.+44     	; 0xb4a <vfprintf+0x1c2>
 b1e:	b6 01       	movw	r22, r12
 b20:	80 e2       	ldi	r24, 0x20	; 32
 b22:	90 e0       	ldi	r25, 0x00	; 0
 b24:	0e 94 bb 06 	call	0xd76	; 0xd76 <fputc>
 b28:	2a 94       	dec	r2
 b2a:	f4 cf       	rjmp	.-24     	; 0xb14 <vfprintf+0x18c>
 b2c:	f5 01       	movw	r30, r10
 b2e:	37 fc       	sbrc	r3, 7
 b30:	85 91       	lpm	r24, Z+
 b32:	37 fe       	sbrs	r3, 7
 b34:	81 91       	ld	r24, Z+
 b36:	5f 01       	movw	r10, r30
 b38:	b6 01       	movw	r22, r12
 b3a:	90 e0       	ldi	r25, 0x00	; 0
 b3c:	0e 94 bb 06 	call	0xd76	; 0xd76 <fputc>
 b40:	21 10       	cpse	r2, r1
 b42:	2a 94       	dec	r2
 b44:	21 e0       	ldi	r18, 0x01	; 1
 b46:	82 1a       	sub	r8, r18
 b48:	91 08       	sbc	r9, r1
 b4a:	81 14       	cp	r8, r1
 b4c:	91 04       	cpc	r9, r1
 b4e:	71 f7       	brne	.-36     	; 0xb2c <vfprintf+0x1a4>
 b50:	e8 c0       	rjmp	.+464    	; 0xd22 <vfprintf+0x39a>
 b52:	84 36       	cpi	r24, 0x64	; 100
 b54:	11 f0       	breq	.+4      	; 0xb5a <vfprintf+0x1d2>
 b56:	89 36       	cpi	r24, 0x69	; 105
 b58:	41 f5       	brne	.+80     	; 0xbaa <vfprintf+0x222>
 b5a:	f8 01       	movw	r30, r16
 b5c:	37 fe       	sbrs	r3, 7
 b5e:	07 c0       	rjmp	.+14     	; 0xb6e <vfprintf+0x1e6>
 b60:	60 81       	ld	r22, Z
 b62:	71 81       	ldd	r23, Z+1	; 0x01
 b64:	82 81       	ldd	r24, Z+2	; 0x02
 b66:	93 81       	ldd	r25, Z+3	; 0x03
 b68:	0c 5f       	subi	r16, 0xFC	; 252
 b6a:	1f 4f       	sbci	r17, 0xFF	; 255
 b6c:	08 c0       	rjmp	.+16     	; 0xb7e <vfprintf+0x1f6>
 b6e:	60 81       	ld	r22, Z
 b70:	71 81       	ldd	r23, Z+1	; 0x01
 b72:	07 2e       	mov	r0, r23
 b74:	00 0c       	add	r0, r0
 b76:	88 0b       	sbc	r24, r24
 b78:	99 0b       	sbc	r25, r25
 b7a:	0e 5f       	subi	r16, 0xFE	; 254
 b7c:	1f 4f       	sbci	r17, 0xFF	; 255
 b7e:	f3 2d       	mov	r31, r3
 b80:	ff 76       	andi	r31, 0x6F	; 111
 b82:	3f 2e       	mov	r3, r31
 b84:	97 ff       	sbrs	r25, 7
 b86:	09 c0       	rjmp	.+18     	; 0xb9a <vfprintf+0x212>
 b88:	90 95       	com	r25
 b8a:	80 95       	com	r24
 b8c:	70 95       	com	r23
 b8e:	61 95       	neg	r22
 b90:	7f 4f       	sbci	r23, 0xFF	; 255
 b92:	8f 4f       	sbci	r24, 0xFF	; 255
 b94:	9f 4f       	sbci	r25, 0xFF	; 255
 b96:	f0 68       	ori	r31, 0x80	; 128
 b98:	3f 2e       	mov	r3, r31
 b9a:	2a e0       	ldi	r18, 0x0A	; 10
 b9c:	30 e0       	ldi	r19, 0x00	; 0
 b9e:	a3 01       	movw	r20, r6
 ba0:	0e 94 f7 06 	call	0xdee	; 0xdee <__ultoa_invert>
 ba4:	88 2e       	mov	r8, r24
 ba6:	86 18       	sub	r8, r6
 ba8:	45 c0       	rjmp	.+138    	; 0xc34 <vfprintf+0x2ac>
 baa:	85 37       	cpi	r24, 0x75	; 117
 bac:	31 f4       	brne	.+12     	; 0xbba <vfprintf+0x232>
 bae:	23 2d       	mov	r18, r3
 bb0:	2f 7e       	andi	r18, 0xEF	; 239
 bb2:	b2 2e       	mov	r11, r18
 bb4:	2a e0       	ldi	r18, 0x0A	; 10
 bb6:	30 e0       	ldi	r19, 0x00	; 0
 bb8:	25 c0       	rjmp	.+74     	; 0xc04 <vfprintf+0x27c>
 bba:	93 2d       	mov	r25, r3
 bbc:	99 7f       	andi	r25, 0xF9	; 249
 bbe:	b9 2e       	mov	r11, r25
 bc0:	8f 36       	cpi	r24, 0x6F	; 111
 bc2:	c1 f0       	breq	.+48     	; 0xbf4 <vfprintf+0x26c>
 bc4:	18 f4       	brcc	.+6      	; 0xbcc <vfprintf+0x244>
 bc6:	88 35       	cpi	r24, 0x58	; 88
 bc8:	79 f0       	breq	.+30     	; 0xbe8 <vfprintf+0x260>
 bca:	b5 c0       	rjmp	.+362    	; 0xd36 <vfprintf+0x3ae>
 bcc:	80 37       	cpi	r24, 0x70	; 112
 bce:	19 f0       	breq	.+6      	; 0xbd6 <vfprintf+0x24e>
 bd0:	88 37       	cpi	r24, 0x78	; 120
 bd2:	21 f0       	breq	.+8      	; 0xbdc <vfprintf+0x254>
 bd4:	b0 c0       	rjmp	.+352    	; 0xd36 <vfprintf+0x3ae>
 bd6:	e9 2f       	mov	r30, r25
 bd8:	e0 61       	ori	r30, 0x10	; 16
 bda:	be 2e       	mov	r11, r30
 bdc:	b4 fe       	sbrs	r11, 4
 bde:	0d c0       	rjmp	.+26     	; 0xbfa <vfprintf+0x272>
 be0:	fb 2d       	mov	r31, r11
 be2:	f4 60       	ori	r31, 0x04	; 4
 be4:	bf 2e       	mov	r11, r31
 be6:	09 c0       	rjmp	.+18     	; 0xbfa <vfprintf+0x272>
 be8:	34 fe       	sbrs	r3, 4
 bea:	0a c0       	rjmp	.+20     	; 0xc00 <vfprintf+0x278>
 bec:	29 2f       	mov	r18, r25
 bee:	26 60       	ori	r18, 0x06	; 6
 bf0:	b2 2e       	mov	r11, r18
 bf2:	06 c0       	rjmp	.+12     	; 0xc00 <vfprintf+0x278>
 bf4:	28 e0       	ldi	r18, 0x08	; 8
 bf6:	30 e0       	ldi	r19, 0x00	; 0
 bf8:	05 c0       	rjmp	.+10     	; 0xc04 <vfprintf+0x27c>
 bfa:	20 e1       	ldi	r18, 0x10	; 16
 bfc:	30 e0       	ldi	r19, 0x00	; 0
 bfe:	02 c0       	rjmp	.+4      	; 0xc04 <vfprintf+0x27c>
 c00:	20 e1       	ldi	r18, 0x10	; 16
 c02:	32 e0       	ldi	r19, 0x02	; 2
 c04:	f8 01       	movw	r30, r16
 c06:	b7 fe       	sbrs	r11, 7
 c08:	07 c0       	rjmp	.+14     	; 0xc18 <vfprintf+0x290>
 c0a:	60 81       	ld	r22, Z
 c0c:	71 81       	ldd	r23, Z+1	; 0x01
 c0e:	82 81       	ldd	r24, Z+2	; 0x02
 c10:	93 81       	ldd	r25, Z+3	; 0x03
 c12:	0c 5f       	subi	r16, 0xFC	; 252
 c14:	1f 4f       	sbci	r17, 0xFF	; 255
 c16:	06 c0       	rjmp	.+12     	; 0xc24 <vfprintf+0x29c>
 c18:	60 81       	ld	r22, Z
 c1a:	71 81       	ldd	r23, Z+1	; 0x01
 c1c:	80 e0       	ldi	r24, 0x00	; 0
 c1e:	90 e0       	ldi	r25, 0x00	; 0
 c20:	0e 5f       	subi	r16, 0xFE	; 254
 c22:	1f 4f       	sbci	r17, 0xFF	; 255
 c24:	a3 01       	movw	r20, r6
 c26:	0e 94 f7 06 	call	0xdee	; 0xdee <__ultoa_invert>
 c2a:	88 2e       	mov	r8, r24
 c2c:	86 18       	sub	r8, r6
 c2e:	fb 2d       	mov	r31, r11
 c30:	ff 77       	andi	r31, 0x7F	; 127
 c32:	3f 2e       	mov	r3, r31
 c34:	36 fe       	sbrs	r3, 6
 c36:	0d c0       	rjmp	.+26     	; 0xc52 <vfprintf+0x2ca>
 c38:	23 2d       	mov	r18, r3
 c3a:	2e 7f       	andi	r18, 0xFE	; 254
 c3c:	a2 2e       	mov	r10, r18
 c3e:	89 14       	cp	r8, r9
 c40:	58 f4       	brcc	.+22     	; 0xc58 <vfprintf+0x2d0>
 c42:	34 fe       	sbrs	r3, 4
 c44:	0b c0       	rjmp	.+22     	; 0xc5c <vfprintf+0x2d4>
 c46:	32 fc       	sbrc	r3, 2
 c48:	09 c0       	rjmp	.+18     	; 0xc5c <vfprintf+0x2d4>
 c4a:	83 2d       	mov	r24, r3
 c4c:	8e 7e       	andi	r24, 0xEE	; 238
 c4e:	a8 2e       	mov	r10, r24
 c50:	05 c0       	rjmp	.+10     	; 0xc5c <vfprintf+0x2d4>
 c52:	b8 2c       	mov	r11, r8
 c54:	a3 2c       	mov	r10, r3
 c56:	03 c0       	rjmp	.+6      	; 0xc5e <vfprintf+0x2d6>
 c58:	b8 2c       	mov	r11, r8
 c5a:	01 c0       	rjmp	.+2      	; 0xc5e <vfprintf+0x2d6>
 c5c:	b9 2c       	mov	r11, r9
 c5e:	a4 fe       	sbrs	r10, 4
 c60:	0f c0       	rjmp	.+30     	; 0xc80 <vfprintf+0x2f8>
 c62:	fe 01       	movw	r30, r28
 c64:	e8 0d       	add	r30, r8
 c66:	f1 1d       	adc	r31, r1
 c68:	80 81       	ld	r24, Z
 c6a:	80 33       	cpi	r24, 0x30	; 48
 c6c:	21 f4       	brne	.+8      	; 0xc76 <vfprintf+0x2ee>
 c6e:	9a 2d       	mov	r25, r10
 c70:	99 7e       	andi	r25, 0xE9	; 233
 c72:	a9 2e       	mov	r10, r25
 c74:	09 c0       	rjmp	.+18     	; 0xc88 <vfprintf+0x300>
 c76:	a2 fe       	sbrs	r10, 2
 c78:	06 c0       	rjmp	.+12     	; 0xc86 <vfprintf+0x2fe>
 c7a:	b3 94       	inc	r11
 c7c:	b3 94       	inc	r11
 c7e:	04 c0       	rjmp	.+8      	; 0xc88 <vfprintf+0x300>
 c80:	8a 2d       	mov	r24, r10
 c82:	86 78       	andi	r24, 0x86	; 134
 c84:	09 f0       	breq	.+2      	; 0xc88 <vfprintf+0x300>
 c86:	b3 94       	inc	r11
 c88:	a3 fc       	sbrc	r10, 3
 c8a:	11 c0       	rjmp	.+34     	; 0xcae <vfprintf+0x326>
 c8c:	a0 fe       	sbrs	r10, 0
 c8e:	06 c0       	rjmp	.+12     	; 0xc9c <vfprintf+0x314>
 c90:	b2 14       	cp	r11, r2
 c92:	88 f4       	brcc	.+34     	; 0xcb6 <vfprintf+0x32e>
 c94:	28 0c       	add	r2, r8
 c96:	92 2c       	mov	r9, r2
 c98:	9b 18       	sub	r9, r11
 c9a:	0e c0       	rjmp	.+28     	; 0xcb8 <vfprintf+0x330>
 c9c:	b2 14       	cp	r11, r2
 c9e:	60 f4       	brcc	.+24     	; 0xcb8 <vfprintf+0x330>
 ca0:	b6 01       	movw	r22, r12
 ca2:	80 e2       	ldi	r24, 0x20	; 32
 ca4:	90 e0       	ldi	r25, 0x00	; 0
 ca6:	0e 94 bb 06 	call	0xd76	; 0xd76 <fputc>
 caa:	b3 94       	inc	r11
 cac:	f7 cf       	rjmp	.-18     	; 0xc9c <vfprintf+0x314>
 cae:	b2 14       	cp	r11, r2
 cb0:	18 f4       	brcc	.+6      	; 0xcb8 <vfprintf+0x330>
 cb2:	2b 18       	sub	r2, r11
 cb4:	02 c0       	rjmp	.+4      	; 0xcba <vfprintf+0x332>
 cb6:	98 2c       	mov	r9, r8
 cb8:	21 2c       	mov	r2, r1
 cba:	a4 fe       	sbrs	r10, 4
 cbc:	10 c0       	rjmp	.+32     	; 0xcde <vfprintf+0x356>
 cbe:	b6 01       	movw	r22, r12
 cc0:	80 e3       	ldi	r24, 0x30	; 48
 cc2:	90 e0       	ldi	r25, 0x00	; 0
 cc4:	0e 94 bb 06 	call	0xd76	; 0xd76 <fputc>
 cc8:	a2 fe       	sbrs	r10, 2
 cca:	17 c0       	rjmp	.+46     	; 0xcfa <vfprintf+0x372>
 ccc:	a1 fc       	sbrc	r10, 1
 cce:	03 c0       	rjmp	.+6      	; 0xcd6 <vfprintf+0x34e>
 cd0:	88 e7       	ldi	r24, 0x78	; 120
 cd2:	90 e0       	ldi	r25, 0x00	; 0
 cd4:	02 c0       	rjmp	.+4      	; 0xcda <vfprintf+0x352>
 cd6:	88 e5       	ldi	r24, 0x58	; 88
 cd8:	90 e0       	ldi	r25, 0x00	; 0
 cda:	b6 01       	movw	r22, r12
 cdc:	0c c0       	rjmp	.+24     	; 0xcf6 <vfprintf+0x36e>
 cde:	8a 2d       	mov	r24, r10
 ce0:	86 78       	andi	r24, 0x86	; 134
 ce2:	59 f0       	breq	.+22     	; 0xcfa <vfprintf+0x372>
 ce4:	a1 fe       	sbrs	r10, 1
 ce6:	02 c0       	rjmp	.+4      	; 0xcec <vfprintf+0x364>
 ce8:	8b e2       	ldi	r24, 0x2B	; 43
 cea:	01 c0       	rjmp	.+2      	; 0xcee <vfprintf+0x366>
 cec:	80 e2       	ldi	r24, 0x20	; 32
 cee:	a7 fc       	sbrc	r10, 7
 cf0:	8d e2       	ldi	r24, 0x2D	; 45
 cf2:	b6 01       	movw	r22, r12
 cf4:	90 e0       	ldi	r25, 0x00	; 0
 cf6:	0e 94 bb 06 	call	0xd76	; 0xd76 <fputc>
 cfa:	89 14       	cp	r8, r9
 cfc:	38 f4       	brcc	.+14     	; 0xd0c <vfprintf+0x384>
 cfe:	b6 01       	movw	r22, r12
 d00:	80 e3       	ldi	r24, 0x30	; 48
 d02:	90 e0       	ldi	r25, 0x00	; 0
 d04:	0e 94 bb 06 	call	0xd76	; 0xd76 <fputc>
 d08:	9a 94       	dec	r9
 d0a:	f7 cf       	rjmp	.-18     	; 0xcfa <vfprintf+0x372>
 d0c:	8a 94       	dec	r8
 d0e:	f3 01       	movw	r30, r6
 d10:	e8 0d       	add	r30, r8
 d12:	f1 1d       	adc	r31, r1
 d14:	80 81       	ld	r24, Z
 d16:	b6 01       	movw	r22, r12
 d18:	90 e0       	ldi	r25, 0x00	; 0
 d1a:	0e 94 bb 06 	call	0xd76	; 0xd76 <fputc>
 d1e:	81 10       	cpse	r8, r1
 d20:	f5 cf       	rjmp	.-22     	; 0xd0c <vfprintf+0x384>
 d22:	22 20       	and	r2, r2
 d24:	09 f4       	brne	.+2      	; 0xd28 <vfprintf+0x3a0>
 d26:	42 ce       	rjmp	.-892    	; 0x9ac <vfprintf+0x24>
 d28:	b6 01       	movw	r22, r12
 d2a:	80 e2       	ldi	r24, 0x20	; 32
 d2c:	90 e0       	ldi	r25, 0x00	; 0
 d2e:	0e 94 bb 06 	call	0xd76	; 0xd76 <fputc>
 d32:	2a 94       	dec	r2
 d34:	f6 cf       	rjmp	.-20     	; 0xd22 <vfprintf+0x39a>
 d36:	f6 01       	movw	r30, r12
 d38:	86 81       	ldd	r24, Z+6	; 0x06
 d3a:	97 81       	ldd	r25, Z+7	; 0x07
 d3c:	02 c0       	rjmp	.+4      	; 0xd42 <vfprintf+0x3ba>
 d3e:	8f ef       	ldi	r24, 0xFF	; 255
 d40:	9f ef       	ldi	r25, 0xFF	; 255
 d42:	2b 96       	adiw	r28, 0x0b	; 11
 d44:	e2 e1       	ldi	r30, 0x12	; 18
 d46:	0c 94 71 07 	jmp	0xee2	; 0xee2 <__epilogue_restores__>

00000d4a <strnlen_P>:
 d4a:	fc 01       	movw	r30, r24
 d4c:	05 90       	lpm	r0, Z+
 d4e:	61 50       	subi	r22, 0x01	; 1
 d50:	70 40       	sbci	r23, 0x00	; 0
 d52:	01 10       	cpse	r0, r1
 d54:	d8 f7       	brcc	.-10     	; 0xd4c <strnlen_P+0x2>
 d56:	80 95       	com	r24
 d58:	90 95       	com	r25
 d5a:	8e 0f       	add	r24, r30
 d5c:	9f 1f       	adc	r25, r31
 d5e:	08 95       	ret

00000d60 <strnlen>:
 d60:	fc 01       	movw	r30, r24
 d62:	61 50       	subi	r22, 0x01	; 1
 d64:	70 40       	sbci	r23, 0x00	; 0
 d66:	01 90       	ld	r0, Z+
 d68:	01 10       	cpse	r0, r1
 d6a:	d8 f7       	brcc	.-10     	; 0xd62 <strnlen+0x2>
 d6c:	80 95       	com	r24
 d6e:	90 95       	com	r25
 d70:	8e 0f       	add	r24, r30
 d72:	9f 1f       	adc	r25, r31
 d74:	08 95       	ret

00000d76 <fputc>:
 d76:	0f 93       	push	r16
 d78:	1f 93       	push	r17
 d7a:	cf 93       	push	r28
 d7c:	df 93       	push	r29
 d7e:	fb 01       	movw	r30, r22
 d80:	23 81       	ldd	r18, Z+3	; 0x03
 d82:	21 fd       	sbrc	r18, 1
 d84:	03 c0       	rjmp	.+6      	; 0xd8c <fputc+0x16>
 d86:	8f ef       	ldi	r24, 0xFF	; 255
 d88:	9f ef       	ldi	r25, 0xFF	; 255
 d8a:	2c c0       	rjmp	.+88     	; 0xde4 <fputc+0x6e>
 d8c:	22 ff       	sbrs	r18, 2
 d8e:	16 c0       	rjmp	.+44     	; 0xdbc <fputc+0x46>
 d90:	46 81       	ldd	r20, Z+6	; 0x06
 d92:	57 81       	ldd	r21, Z+7	; 0x07
 d94:	24 81       	ldd	r18, Z+4	; 0x04
 d96:	35 81       	ldd	r19, Z+5	; 0x05
 d98:	42 17       	cp	r20, r18
 d9a:	53 07       	cpc	r21, r19
 d9c:	44 f4       	brge	.+16     	; 0xdae <fputc+0x38>
 d9e:	a0 81       	ld	r26, Z
 da0:	b1 81       	ldd	r27, Z+1	; 0x01
 da2:	9d 01       	movw	r18, r26
 da4:	2f 5f       	subi	r18, 0xFF	; 255
 da6:	3f 4f       	sbci	r19, 0xFF	; 255
 da8:	31 83       	std	Z+1, r19	; 0x01
 daa:	20 83       	st	Z, r18
 dac:	8c 93       	st	X, r24
 dae:	26 81       	ldd	r18, Z+6	; 0x06
 db0:	37 81       	ldd	r19, Z+7	; 0x07
 db2:	2f 5f       	subi	r18, 0xFF	; 255
 db4:	3f 4f       	sbci	r19, 0xFF	; 255
 db6:	37 83       	std	Z+7, r19	; 0x07
 db8:	26 83       	std	Z+6, r18	; 0x06
 dba:	14 c0       	rjmp	.+40     	; 0xde4 <fputc+0x6e>
 dbc:	8b 01       	movw	r16, r22
 dbe:	ec 01       	movw	r28, r24
 dc0:	fb 01       	movw	r30, r22
 dc2:	00 84       	ldd	r0, Z+8	; 0x08
 dc4:	f1 85       	ldd	r31, Z+9	; 0x09
 dc6:	e0 2d       	mov	r30, r0
 dc8:	09 95       	icall
 dca:	89 2b       	or	r24, r25
 dcc:	e1 f6       	brne	.-72     	; 0xd86 <fputc+0x10>
 dce:	d8 01       	movw	r26, r16
 dd0:	16 96       	adiw	r26, 0x06	; 6
 dd2:	8d 91       	ld	r24, X+
 dd4:	9c 91       	ld	r25, X
 dd6:	17 97       	sbiw	r26, 0x07	; 7
 dd8:	01 96       	adiw	r24, 0x01	; 1
 dda:	17 96       	adiw	r26, 0x07	; 7
 ddc:	9c 93       	st	X, r25
 dde:	8e 93       	st	-X, r24
 de0:	16 97       	sbiw	r26, 0x06	; 6
 de2:	ce 01       	movw	r24, r28
 de4:	df 91       	pop	r29
 de6:	cf 91       	pop	r28
 de8:	1f 91       	pop	r17
 dea:	0f 91       	pop	r16
 dec:	08 95       	ret

00000dee <__ultoa_invert>:
 dee:	fa 01       	movw	r30, r20
 df0:	aa 27       	eor	r26, r26
 df2:	28 30       	cpi	r18, 0x08	; 8
 df4:	51 f1       	breq	.+84     	; 0xe4a <__ultoa_invert+0x5c>
 df6:	20 31       	cpi	r18, 0x10	; 16
 df8:	81 f1       	breq	.+96     	; 0xe5a <__ultoa_invert+0x6c>
 dfa:	e8 94       	clt
 dfc:	6f 93       	push	r22
 dfe:	6e 7f       	andi	r22, 0xFE	; 254
 e00:	6e 5f       	subi	r22, 0xFE	; 254
 e02:	7f 4f       	sbci	r23, 0xFF	; 255
 e04:	8f 4f       	sbci	r24, 0xFF	; 255
 e06:	9f 4f       	sbci	r25, 0xFF	; 255
 e08:	af 4f       	sbci	r26, 0xFF	; 255
 e0a:	b1 e0       	ldi	r27, 0x01	; 1
 e0c:	3e d0       	rcall	.+124    	; 0xe8a <__ultoa_invert+0x9c>
 e0e:	b4 e0       	ldi	r27, 0x04	; 4
 e10:	3c d0       	rcall	.+120    	; 0xe8a <__ultoa_invert+0x9c>
 e12:	67 0f       	add	r22, r23
 e14:	78 1f       	adc	r23, r24
 e16:	89 1f       	adc	r24, r25
 e18:	9a 1f       	adc	r25, r26
 e1a:	a1 1d       	adc	r26, r1
 e1c:	68 0f       	add	r22, r24
 e1e:	79 1f       	adc	r23, r25
 e20:	8a 1f       	adc	r24, r26
 e22:	91 1d       	adc	r25, r1
 e24:	a1 1d       	adc	r26, r1
 e26:	6a 0f       	add	r22, r26
 e28:	71 1d       	adc	r23, r1
 e2a:	81 1d       	adc	r24, r1
 e2c:	91 1d       	adc	r25, r1
 e2e:	a1 1d       	adc	r26, r1
 e30:	20 d0       	rcall	.+64     	; 0xe72 <__ultoa_invert+0x84>
 e32:	09 f4       	brne	.+2      	; 0xe36 <__ultoa_invert+0x48>
 e34:	68 94       	set
 e36:	3f 91       	pop	r19
 e38:	2a e0       	ldi	r18, 0x0A	; 10
 e3a:	26 9f       	mul	r18, r22
 e3c:	11 24       	eor	r1, r1
 e3e:	30 19       	sub	r19, r0
 e40:	30 5d       	subi	r19, 0xD0	; 208
 e42:	31 93       	st	Z+, r19
 e44:	de f6       	brtc	.-74     	; 0xdfc <__ultoa_invert+0xe>
 e46:	cf 01       	movw	r24, r30
 e48:	08 95       	ret
 e4a:	46 2f       	mov	r20, r22
 e4c:	47 70       	andi	r20, 0x07	; 7
 e4e:	40 5d       	subi	r20, 0xD0	; 208
 e50:	41 93       	st	Z+, r20
 e52:	b3 e0       	ldi	r27, 0x03	; 3
 e54:	0f d0       	rcall	.+30     	; 0xe74 <__ultoa_invert+0x86>
 e56:	c9 f7       	brne	.-14     	; 0xe4a <__ultoa_invert+0x5c>
 e58:	f6 cf       	rjmp	.-20     	; 0xe46 <__ultoa_invert+0x58>
 e5a:	46 2f       	mov	r20, r22
 e5c:	4f 70       	andi	r20, 0x0F	; 15
 e5e:	40 5d       	subi	r20, 0xD0	; 208
 e60:	4a 33       	cpi	r20, 0x3A	; 58
 e62:	18 f0       	brcs	.+6      	; 0xe6a <__ultoa_invert+0x7c>
 e64:	49 5d       	subi	r20, 0xD9	; 217
 e66:	31 fd       	sbrc	r19, 1
 e68:	40 52       	subi	r20, 0x20	; 32
 e6a:	41 93       	st	Z+, r20
 e6c:	02 d0       	rcall	.+4      	; 0xe72 <__ultoa_invert+0x84>
 e6e:	a9 f7       	brne	.-22     	; 0xe5a <__ultoa_invert+0x6c>
 e70:	ea cf       	rjmp	.-44     	; 0xe46 <__ultoa_invert+0x58>
 e72:	b4 e0       	ldi	r27, 0x04	; 4
 e74:	a6 95       	lsr	r26
 e76:	97 95       	ror	r25
 e78:	87 95       	ror	r24
 e7a:	77 95       	ror	r23
 e7c:	67 95       	ror	r22
 e7e:	ba 95       	dec	r27
 e80:	c9 f7       	brne	.-14     	; 0xe74 <__ultoa_invert+0x86>
 e82:	00 97       	sbiw	r24, 0x00	; 0
 e84:	61 05       	cpc	r22, r1
 e86:	71 05       	cpc	r23, r1
 e88:	08 95       	ret
 e8a:	9b 01       	movw	r18, r22
 e8c:	ac 01       	movw	r20, r24
 e8e:	0a 2e       	mov	r0, r26
 e90:	06 94       	lsr	r0
 e92:	57 95       	ror	r21
 e94:	47 95       	ror	r20
 e96:	37 95       	ror	r19
 e98:	27 95       	ror	r18
 e9a:	ba 95       	dec	r27
 e9c:	c9 f7       	brne	.-14     	; 0xe90 <__ultoa_invert+0xa2>
 e9e:	62 0f       	add	r22, r18
 ea0:	73 1f       	adc	r23, r19
 ea2:	84 1f       	adc	r24, r20
 ea4:	95 1f       	adc	r25, r21
 ea6:	a0 1d       	adc	r26, r0
 ea8:	08 95       	ret

00000eaa <__prologue_saves__>:
 eaa:	2f 92       	push	r2
 eac:	3f 92       	push	r3
 eae:	4f 92       	push	r4
 eb0:	5f 92       	push	r5
 eb2:	6f 92       	push	r6
 eb4:	7f 92       	push	r7
 eb6:	8f 92       	push	r8
 eb8:	9f 92       	push	r9
 eba:	af 92       	push	r10
 ebc:	bf 92       	push	r11
 ebe:	cf 92       	push	r12
 ec0:	df 92       	push	r13
 ec2:	ef 92       	push	r14
 ec4:	ff 92       	push	r15
 ec6:	0f 93       	push	r16
 ec8:	1f 93       	push	r17
 eca:	cf 93       	push	r28
 ecc:	df 93       	push	r29
 ece:	cd b7       	in	r28, 0x3d	; 61
 ed0:	de b7       	in	r29, 0x3e	; 62
 ed2:	ca 1b       	sub	r28, r26
 ed4:	db 0b       	sbc	r29, r27
 ed6:	0f b6       	in	r0, 0x3f	; 63
 ed8:	f8 94       	cli
 eda:	de bf       	out	0x3e, r29	; 62
 edc:	0f be       	out	0x3f, r0	; 63
 ede:	cd bf       	out	0x3d, r28	; 61
 ee0:	09 94       	ijmp

00000ee2 <__epilogue_restores__>:
 ee2:	2a 88       	ldd	r2, Y+18	; 0x12
 ee4:	39 88       	ldd	r3, Y+17	; 0x11
 ee6:	48 88       	ldd	r4, Y+16	; 0x10
 ee8:	5f 84       	ldd	r5, Y+15	; 0x0f
 eea:	6e 84       	ldd	r6, Y+14	; 0x0e
 eec:	7d 84       	ldd	r7, Y+13	; 0x0d
 eee:	8c 84       	ldd	r8, Y+12	; 0x0c
 ef0:	9b 84       	ldd	r9, Y+11	; 0x0b
 ef2:	aa 84       	ldd	r10, Y+10	; 0x0a
 ef4:	b9 84       	ldd	r11, Y+9	; 0x09
 ef6:	c8 84       	ldd	r12, Y+8	; 0x08
 ef8:	df 80       	ldd	r13, Y+7	; 0x07
 efa:	ee 80       	ldd	r14, Y+6	; 0x06
 efc:	fd 80       	ldd	r15, Y+5	; 0x05
 efe:	0c 81       	ldd	r16, Y+4	; 0x04
 f00:	1b 81       	ldd	r17, Y+3	; 0x03
 f02:	aa 81       	ldd	r26, Y+2	; 0x02
 f04:	b9 81       	ldd	r27, Y+1	; 0x01
 f06:	ce 0f       	add	r28, r30
 f08:	d1 1d       	adc	r29, r1
 f0a:	0f b6       	in	r0, 0x3f	; 63
 f0c:	f8 94       	cli
 f0e:	de bf       	out	0x3e, r29	; 62
 f10:	0f be       	out	0x3f, r0	; 63
 f12:	cd bf       	out	0x3d, r28	; 61
 f14:	ed 01       	movw	r28, r26
 f16:	08 95       	ret

00000f18 <_exit>:
 f18:	f8 94       	cli

00000f1a <__stop_program>:
 f1a:	ff cf       	rjmp	.-2      	; 0xf1a <__stop_program>
